[{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/api-client-wrapper.ts","messages":[{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":163,"column":50,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":163,"endColumn":59},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":165,"column":16,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":165,"endColumn":33},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":190,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":190,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import chalk from 'chalk';\n\nimport type { ConfigManager } from './config';\nimport { ApiClient } from './client';\nimport { spinner } from './utils/spinner';\nimport { logger } from '../utils/logger';\nimport type {\n  HealthResponse,\n  CreateTaskRequest,\n  UpdateTaskRequest,\n  CreateBoardRequest,\n  UpdateBoardRequest,\n  CreateNoteRequest,\n  UpdateNoteRequest,\n  CreateTagRequest,\n  UpdateTagRequest,\n  TaskResponse,\n  BoardResponse,\n  NoteResponse,\n  TagResponse,\n  AnyApiResponse,\n} from './types';\n\ninterface RequestMetadata {\n  operationName: string;\n  retries?: number;\n  timeout?: number;\n  showSpinner?: boolean;\n  spinnerText?: string;\n  successText?: string;\n  errorText?: string;\n}\n\ninterface RetryOptions {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffFactor: number;\n  retryableErrors?: string[];\n}\n\ninterface OfflineOptions {\n  enabled: boolean;\n  fallbackResponse?: unknown;\n  queueOperations?: boolean;\n}\n\nexport interface ApiWrapperOptions {\n  spinner?: {\n    defaultTimeout: number;\n    showByDefault: boolean;\n  };\n  retry?: RetryOptions;\n  timeout?: {\n    default: number;\n    slow: number;\n    fast: number;\n  };\n  offline?: OfflineOptions;\n}\n\n/**\n * Enhanced API client wrapper with spinner integration, retry logic, and enhanced error handling\n */\nexport class ApiClientWrapper {\n  private readonly apiClient: ApiClient;\n\n  private readonly config: ConfigManager;\n\n  private readonly options: ApiWrapperOptions;\n\n  private isOnline: boolean = true;\n\n  private operationQueue: Array<{\n    operation: () => Promise<unknown>;\n    resolve: (value: unknown) => void;\n    reject: (error: unknown) => void;\n  }> = [];\n\n  constructor(config: ConfigManager, options: Partial<ApiWrapperOptions> = {}) {\n    this.config = config;\n    this.apiClient = new ApiClient(config);\n\n    this.options = {\n      spinner: {\n        defaultTimeout: 30000,\n        showByDefault: true,\n        ...options.spinner,\n      },\n      retry: {\n        maxRetries: 3,\n        baseDelay: 1000,\n        maxDelay: 10000,\n        backoffFactor: 2,\n        retryableErrors: ['timeout', 'network', 'ECONNREFUSED', 'ENOTFOUND', 'ECONNRESET'],\n        ...options.retry,\n      },\n      timeout: {\n        default: 10000,\n        slow: 30000,\n        fast: 5000,\n        ...options.timeout,\n      },\n      offline: {\n        enabled: true,\n        queueOperations: true,\n        ...options.offline,\n      },\n    };\n\n    // Monitor online status\n    this.setupOfflineDetection();\n  }\n\n  /**\n   * Enhanced request wrapper with spinner, retry, and timeout handling\n   */\n  private async executeWithEnhancements<T>(\n    operation: () => Promise<T>,\n    metadata: RequestMetadata\n  ): Promise<T> {\n    const {\n      operationName,\n      retries = this.options.retry!.maxRetries,\n      timeout = this.options.timeout!.default,\n      showSpinner = this.options.spinner!.showByDefault,\n      spinnerText = `Executing ${operationName}...`,\n      successText,\n      errorText,\n    } = metadata;\n\n    // Check offline mode\n    if (!this.isOnline && this.options.offline!.enabled) {\n      return this.handleOfflineOperation(operationName, metadata);\n    }\n\n    if (showSpinner) {\n      return spinner.withSpinner(\n        spinnerText,\n        this.executeWithRetry(operation, retries, operationName),\n        {\n          successText: successText ?? `${operationName} completed successfully`,\n          failText: errorText ?? `Failed to ${operationName.toLowerCase()}`,\n          timeout,\n        }\n      );\n    }\n\n    return this.executeWithRetry(operation, retries, operationName);\n  }\n\n  /**\n   * Execute operation with retry logic and exponential backoff\n   */\n  private async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries: number,\n    operationName: string\n  ): Promise<T> {\n    let lastError: Error | null = null;\n    const { baseDelay, maxDelay, backoffFactor, retryableErrors } = this.options.retry!;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        // Don't retry on final attempt\n        if (attempt === maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!ApiClientWrapper.isRetryableError(lastError, retryableErrors!)) {\n          break;\n        }\n\n        // Calculate delay with exponential backoff\n        const delay = Math.min(baseDelay * backoffFactor ** attempt, maxDelay);\n\n        // Log retry attempt\n        logger.warn(\n          chalk.yellow(\n            `⚠️  ${operationName} failed (attempt ${attempt + 1}/${maxRetries + 1}), retrying in ${delay}ms...`\n          )\n        );\n        logger.debug(chalk.gray(`   Error: ${lastError.message}`));\n\n        await ApiClientWrapper.sleep(delay);\n      }\n    }\n\n    // Update online status if we consistently fail\n    if (ApiClientWrapper.isNetworkError(lastError!)) {\n      this.isOnline = false;\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Check if an error is retryable\n   */\n  private static isRetryableError(error: Error, retryableErrors: string[]): boolean {\n    const errorMessage = error.message.toLowerCase();\n    return retryableErrors.some(retryableError =>\n      errorMessage.includes(retryableError.toLowerCase())\n    );\n  }\n\n  /**\n   * Check if an error is network-related\n   */\n  private static isNetworkError(error: Error): boolean {\n    const networkErrors = ['network', 'econnrefused', 'enotfound', 'econnreset', 'timeout'];\n    return networkErrors.some(networkError => error.message.toLowerCase().includes(networkError));\n  }\n\n  /**\n   * Handle offline operations\n   */\n  private async handleOfflineOperation<T>(\n    operationName: string,\n    _metadata: RequestMetadata\n  ): Promise<T> {\n    if (\n      this.options.offline!.queueOperations &&\n      ApiClientWrapper.isModifyingOperation(operationName)\n    ) {\n      // Queue the operation for when we're back online\n      return new Promise((resolve, reject) => {\n        this.operationQueue.push({\n          operation: () => this.apiClient.request(''),\n          resolve,\n          reject,\n        });\n        logger.info(chalk.yellow(`📱 ${operationName} queued for when connection is restored`));\n      });\n    }\n\n    if (this.options.offline!.fallbackResponse) {\n      logger.info(chalk.yellow(`📱 Using cached data for ${operationName}`));\n      return this.options.offline!.fallbackResponse;\n    }\n\n    throw new Error(`Operation ${operationName} not available offline`);\n  }\n\n  /**\n   * Check if operation modifies data\n   */\n  private static isModifyingOperation(operationName: string): boolean {\n    const modifyingOperations = ['create', 'update', 'delete', 'move', 'merge'];\n    return modifyingOperations.some(op => operationName.toLowerCase().includes(op));\n  }\n\n  /**\n   * Set up offline detection\n   */\n  private setupOfflineDetection(): void {\n    // Check connection periodically\n    setInterval(() => {\n      (async (): Promise<void> => {\n        try {\n          const wasOnline = this.isOnline;\n          this.isOnline = await this.apiClient.testConnection();\n\n          if (!wasOnline && this.isOnline) {\n            logger.info(chalk.green('🌐 Connection restored!'));\n            await this.processQueuedOperations();\n          } else if (wasOnline && !this.isOnline) {\n            logger.warn(chalk.yellow('📱 Connection lost - entering offline mode'));\n          }\n        } catch {\n          this.isOnline = false;\n        }\n      })().catch(error => {\n        logger.error('Error in offline detection:', error);\n      });\n    }, 30000); // Check every 30 seconds\n  }\n\n  /**\n   * Process queued operations when connection is restored\n   */\n  private async processQueuedOperations(): Promise<void> {\n    if (this.operationQueue.length === 0) return;\n\n    logger.info(chalk.cyan(`🔄 Processing ${this.operationQueue.length} queued operations...`));\n\n    await Promise.allSettled(\n      this.operationQueue.map(async ({ operation, resolve, reject }) => {\n        try {\n          const result = await operation();\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      })\n    );\n\n    this.operationQueue = [];\n    logger.info(chalk.green('✅ All queued operations processed'));\n  }\n\n  /**\n   * Sleep utility for retry delays\n   */\n  private static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  // Enhanced API methods with spinner integration\n\n  async testConnection(): Promise<boolean> {\n    return this.executeWithEnhancements(() => this.apiClient.testConnection(), {\n      operationName: 'Test Connection',\n      showSpinner: true,\n      spinnerText: 'Testing server connection...',\n      successText: 'Connection test successful',\n      errorText: 'Connection test failed',\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  async getHealth(): Promise<HealthResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getHealth(), {\n      operationName: 'Get Health Status',\n      showSpinner: true,\n      spinnerText: 'Checking server health...',\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  // Task API methods with enhancements\n  async getTasks(params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getTasks(params), {\n      operationName: 'Fetch Tasks',\n      showSpinner: true,\n      spinnerText: 'Loading tasks...',\n      successText: 'Tasks loaded',\n    });\n  }\n\n  async getTask(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getTask(id), {\n      operationName: 'Fetch Task',\n      showSpinner: true,\n      spinnerText: `Loading task ${id}...`,\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  async createTask(task: CreateTaskRequest): Promise<TaskResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.createTask(task), {\n      operationName: 'Create Task',\n      showSpinner: true,\n      spinnerText: `Creating task: ${task.title}`,\n      successText: 'Task created successfully',\n      errorText: 'Failed to create task',\n    });\n  }\n\n  async updateTask(id: string, updates: UpdateTaskRequest): Promise<TaskResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.updateTask(id, updates), {\n      operationName: 'Update Task',\n      showSpinner: true,\n      spinnerText: `Updating task ${id}...`,\n      successText: 'Task updated successfully',\n      errorText: 'Failed to update task',\n    });\n  }\n\n  async deleteTask(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.deleteTask(id), {\n      operationName: 'Delete Task',\n      showSpinner: true,\n      spinnerText: `Deleting task ${id}...`,\n      successText: 'Task deleted successfully',\n      errorText: 'Failed to delete task',\n    });\n  }\n\n  async moveTask(id: string, columnId: string, position?: number): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.moveTask(id, columnId, position), {\n      operationName: 'Move Task',\n      showSpinner: true,\n      spinnerText: `Moving task ${id}...`,\n      successText: 'Task moved successfully',\n      errorText: 'Failed to move task',\n    });\n  }\n\n  // Board API methods with enhancements\n  async getBoards(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getBoards(), {\n      operationName: 'Fetch Boards',\n      showSpinner: true,\n      spinnerText: 'Loading boards...',\n      successText: 'Boards loaded',\n    });\n  }\n\n  async getBoard(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getBoard(id), {\n      operationName: 'Fetch Board',\n      showSpinner: true,\n      spinnerText: `Loading board ${id}...`,\n    });\n  }\n\n  async createBoard(board: CreateBoardRequest): Promise<BoardResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.createBoard(board), {\n      operationName: 'Create Board',\n      showSpinner: true,\n      spinnerText: `Creating board: ${board.name}`,\n      successText: 'Board created successfully',\n      errorText: 'Failed to create board',\n    });\n  }\n\n  async updateBoard(id: string, updates: UpdateBoardRequest): Promise<BoardResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.updateBoard(id, updates), {\n      operationName: 'Update Board',\n      showSpinner: true,\n      spinnerText: `Updating board ${id}...`,\n      successText: 'Board updated successfully',\n      errorText: 'Failed to update board',\n    });\n  }\n\n  async deleteBoard(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.deleteBoard(id), {\n      operationName: 'Delete Board',\n      showSpinner: true,\n      spinnerText: `Deleting board ${id}...`,\n      successText: 'Board deleted successfully',\n      errorText: 'Failed to delete board',\n    });\n  }\n\n  async getBoardStats(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getBoardStats(id), {\n      operationName: 'Fetch Board Stats',\n      showSpinner: true,\n      spinnerText: `Loading board statistics...`,\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  // Note API methods with enhancements\n  async getNotes(params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getNotes(params), {\n      operationName: 'Fetch Notes',\n      showSpinner: true,\n      spinnerText: 'Loading notes...',\n    });\n  }\n\n  async getNote(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getNote(id), {\n      operationName: 'Fetch Note',\n      showSpinner: true,\n      spinnerText: `Loading note ${id}...`,\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  async createNote(note: CreateNoteRequest): Promise<NoteResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.createNote(note), {\n      operationName: 'Create Note',\n      showSpinner: true,\n      spinnerText: `Creating note: ${note.title}`,\n      successText: 'Note created successfully',\n      errorText: 'Failed to create note',\n    });\n  }\n\n  async updateNote(id: string, updates: UpdateNoteRequest): Promise<NoteResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.updateNote(id, updates), {\n      operationName: 'Update Note',\n      showSpinner: true,\n      spinnerText: `Updating note ${id}...`,\n      successText: 'Note updated successfully',\n      errorText: 'Failed to update note',\n    });\n  }\n\n  async deleteNote(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.deleteNote(id), {\n      operationName: 'Delete Note',\n      showSpinner: true,\n      spinnerText: `Deleting note ${id}...`,\n      successText: 'Note deleted successfully',\n      errorText: 'Failed to delete note',\n    });\n  }\n\n  async searchNotes(query: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.searchNotes(query), {\n      operationName: 'Search Notes',\n      showSpinner: true,\n      spinnerText: `Searching notes for: ${query}`,\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  // Tag API methods with enhancements\n  async getTags(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getTags(), {\n      operationName: 'Fetch Tags',\n      showSpinner: true,\n      spinnerText: 'Loading tags...',\n    });\n  }\n\n  async getTag(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getTag(id), {\n      operationName: 'Fetch Tag',\n      showSpinner: true,\n      spinnerText: `Loading tag ${id}...`,\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  async createTag(tag: CreateTagRequest): Promise<TagResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.createTag(tag), {\n      operationName: 'Create Tag',\n      showSpinner: true,\n      spinnerText: `Creating tag: ${tag.name}`,\n      successText: 'Tag created successfully',\n      errorText: 'Failed to create tag',\n    });\n  }\n\n  async addTagsToTask(taskId: string, tags: string[]): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.addTagsToTask(taskId, tags), {\n      operationName: 'Add Tags to Task',\n      showSpinner: true,\n      spinnerText: `Adding tags to task ${taskId}...`,\n      successText: 'Tags added successfully',\n      errorText: 'Failed to add tags',\n    });\n  }\n\n  async removeTagFromTask(taskId: string, tag: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.removeTagFromTask(taskId, tag), {\n      operationName: 'Remove Tag from Task',\n      showSpinner: true,\n      spinnerText: `Removing tag from task ${taskId}...`,\n      successText: 'Tag removed successfully',\n      errorText: 'Failed to remove tag',\n    });\n  }\n\n  async updateTag(id: string, updates: UpdateTagRequest): Promise<TagResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.updateTag(id, updates), {\n      operationName: 'Update Tag',\n      showSpinner: true,\n      spinnerText: `Updating tag ${id}...`,\n      successText: 'Tag updated successfully',\n      errorText: 'Failed to update tag',\n    });\n  }\n\n  async deleteTag(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.deleteTag(id), {\n      operationName: 'Delete Tag',\n      showSpinner: true,\n      spinnerText: `Deleting tag ${id}...`,\n      successText: 'Tag deleted successfully',\n      errorText: 'Failed to delete tag',\n    });\n  }\n\n  async searchTags(query: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.searchTags(query), {\n      operationName: 'Search Tags',\n      showSpinner: true,\n      spinnerText: `Searching tags for: ${query}`,\n    });\n  }\n\n  async mergeTags(fromId: string, toId: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.mergeTags(fromId, toId), {\n      operationName: 'Merge Tags',\n      showSpinner: true,\n      spinnerText: `Merging tags ${fromId} → ${toId}...`,\n      successText: 'Tags merged successfully',\n      errorText: 'Failed to merge tags',\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  // Priority API methods\n  async getPriorities(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getPriorities(), {\n      operationName: 'Fetch Priorities',\n      showSpinner: true,\n      spinnerText: 'Loading priorities...',\n    });\n  }\n\n  async getNextTask(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getNextTask(), {\n      operationName: 'Get Next Task',\n      showSpinner: true,\n      spinnerText: 'Finding next task...',\n      timeout: this.options.timeout!.fast,\n    });\n  }\n\n  async recalculatePriorities(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.recalculatePriorities(), {\n      operationName: 'Recalculate Priorities',\n      showSpinner: true,\n      spinnerText: 'Recalculating task priorities...',\n      successText: 'Priorities recalculated successfully',\n      errorText: 'Failed to recalculate priorities',\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  async updateTaskPriority(id: string, priority: number): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.updateTaskPriority(id, priority), {\n      operationName: 'Update Task Priority',\n      showSpinner: true,\n      spinnerText: `Updating priority for task ${id}...`,\n      successText: 'Task priority updated successfully',\n      errorText: 'Failed to update task priority',\n    });\n  }\n\n  // Context API methods\n  async getContext(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getContext(), {\n      operationName: 'Fetch Context',\n      showSpinner: true,\n      spinnerText: 'Loading context information...',\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  async getTaskContext(id: string): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getTaskContext(id), {\n      operationName: 'Fetch Task Context',\n      showSpinner: true,\n      spinnerText: `Loading context for task ${id}...`,\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  async getProjectSummary(): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.getProjectSummary(), {\n      operationName: 'Fetch Project Summary',\n      showSpinner: true,\n      spinnerText: 'Generating project summary...',\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  // Search API methods\n  async searchTasks(query: string, params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.executeWithEnhancements(() => this.apiClient.searchTasks(query, params), {\n      operationName: 'Search Tasks',\n      showSpinner: true,\n      spinnerText: `Searching tasks for: ${query}`,\n      timeout: this.options.timeout!.slow,\n    });\n  }\n\n  /**\n   * Get online status\n   */\n  getOnlineStatus(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Get queued operations count\n   */\n  getQueuedOperationsCount(): number {\n    return this.operationQueue.length;\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(): void {\n    this.apiClient.updateConfig();\n  }\n\n  /**\n   * Execute custom operation with all enhancements\n   */\n  async executeCustomOperation<T>(\n    operation: () => Promise<T>,\n    metadata: RequestMetadata\n  ): Promise<T> {\n    return this.executeWithEnhancements(operation, metadata);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/client.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":83,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":83,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ConfigManager } from './config';\nimport type {\n  HealthResponse,\n  CreateTaskRequest,\n  UpdateTaskRequest,\n  CreateBoardRequest,\n  UpdateBoardRequest,\n  CreateNoteRequest,\n  UpdateNoteRequest,\n  CreateTagRequest,\n  UpdateTagRequest,\n  TaskResponse,\n  BoardResponse,\n  NoteResponse,\n  TagResponse,\n  AnyApiResponse,\n} from './types';\n\ninterface RequestOptions {\n  method?: 'GET' | 'POST' | 'PATCH' | 'DELETE';\n  body?: unknown;\n  params?: Record<string, string> | undefined;\n  timeout?: number;\n}\n\nexport class ApiClient {\n  private readonly config: ConfigManager;\n\n  private baseUrl: string;\n\n  private apiKey: string | undefined;\n\n  constructor(config: ConfigManager) {\n    this.config = config;\n    this.baseUrl = config.getServerUrl();\n    this.apiKey = config.getApiKey();\n  }\n\n  /**\n   * Make authenticated API request\n   */\n  async request<T = AnyApiResponse>(endpoint: string, options: RequestOptions = {}): Promise<T> {\n    const { method = 'GET', body, params, timeout = 10000 } = options;\n\n    // Build URL with query parameters\n    const url = new URL(`${this.baseUrl}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        url.searchParams.set(key, value);\n      });\n    }\n\n    // Prepare headers\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'User-Agent': 'mcp-kanban-cli',\n    };\n\n    if (this.apiKey) {\n      headers['X-API-Key'] = this.apiKey;\n    }\n\n    // Prepare request options\n    const requestOptions: RequestInit = {\n      method,\n      headers,\n      signal: AbortSignal.timeout(timeout),\n    };\n\n    if (body && ['POST', 'PATCH', 'PUT'].includes(method)) {\n      requestOptions.body = JSON.stringify(body);\n    }\n\n    try {\n      const response = await fetch(url.toString(), requestOptions);\n\n      if (!response.ok) {\n        await ApiClient.handleErrorResponse(response);\n      }\n\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await response.json();\n        // Handle both wrapped and unwrapped responses\n        if (data && typeof data === 'object' && 'data' in data) {\n          const wrappedData = data as { data: T };\n          return wrappedData.data;\n        }\n        return data as T;\n      }\n\n      return (await response.text()) as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          throw new Error('Request timeout');\n        }\n        if (error.message.includes('fetch')) {\n          throw new Error(`Network error: Unable to connect to ${this.baseUrl}`);\n        }\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Handle error responses\n   */\n  private static async handleErrorResponse(response: Response): Promise<never> {\n    const contentType = response.headers.get('content-type');\n    let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n    try {\n      if (contentType && contentType.includes('application/json')) {\n        const errorData = (await response.json()) as {\n          error?: { message: string };\n          message?: string;\n        };\n        if (\n          errorData.error &&\n          typeof errorData.error === 'object' &&\n          'message' in errorData.error\n        ) {\n          errorMessage = errorData.error.message;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        }\n      } else {\n        const text = await response.text();\n        if (text) {\n          errorMessage = text;\n        }\n      }\n    } catch {\n      // Ignore parsing errors, use default message\n    }\n\n    if (response.status === 401) {\n      throw new Error('Authentication failed. Check your API key with \"kanban config show\"');\n    }\n\n    if (response.status === 403) {\n      throw new Error('Access denied. Check your API key permissions');\n    }\n\n    if (response.status === 404) {\n      throw new Error('Resource not found');\n    }\n\n    if (response.status === 429) {\n      throw new Error('Rate limit exceeded. Please try again later');\n    }\n\n    if (response.status >= 500) {\n      throw new Error(`Server error: ${errorMessage}`);\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  /**\n   * Test connection to server\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.request('/api/health');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get server health status\n   */\n  async getHealth(): Promise<HealthResponse> {\n    return this.request('/api/health/detailed');\n  }\n\n  // Task API methods\n  async getTasks(params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.request('/api/tasks', params ? { params } : {});\n  }\n\n  async getTask(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${id}`);\n  }\n\n  async createTask(task: CreateTaskRequest): Promise<TaskResponse> {\n    return this.request('/api/tasks', { method: 'POST', body: task });\n  }\n\n  async updateTask(id: string, updates: UpdateTaskRequest): Promise<TaskResponse> {\n    return this.request(`/api/tasks/${id}`, { method: 'PATCH', body: updates });\n  }\n\n  async deleteTask(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${id}`, { method: 'DELETE' });\n  }\n\n  async moveTask(id: string, columnId: string, position?: number): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${id}/move`, {\n      method: 'PATCH',\n      body: { columnId, position },\n    });\n  }\n\n  // Board API methods\n  async getBoards(): Promise<AnyApiResponse> {\n    return this.request('/api/boards');\n  }\n\n  async getBoard(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/boards/${id}`);\n  }\n\n  async createBoard(board: CreateBoardRequest): Promise<BoardResponse> {\n    return this.request('/api/boards', { method: 'POST', body: board });\n  }\n\n  async updateBoard(id: string, updates: UpdateBoardRequest): Promise<BoardResponse> {\n    return this.request(`/api/boards/${id}`, { method: 'PATCH', body: updates });\n  }\n\n  async deleteBoard(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/boards/${id}`, { method: 'DELETE' });\n  }\n\n  async getBoardStats(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/boards/${id}/stats`);\n  }\n\n  // Note API methods\n  async getNotes(params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.request('/api/notes', params ? { params } : {});\n  }\n\n  async getNote(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/notes/${id}`);\n  }\n\n  async createNote(note: CreateNoteRequest): Promise<NoteResponse> {\n    return this.request('/api/notes', { method: 'POST', body: note });\n  }\n\n  async updateNote(id: string, updates: UpdateNoteRequest): Promise<NoteResponse> {\n    return this.request(`/api/notes/${id}`, { method: 'PATCH', body: updates });\n  }\n\n  async deleteNote(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/notes/${id}`, { method: 'DELETE' });\n  }\n\n  async searchNotes(query: string): Promise<AnyApiResponse> {\n    return this.request('/api/notes/search', { params: { q: query } });\n  }\n\n  // Tag API methods\n  async getTags(): Promise<AnyApiResponse> {\n    return this.request('/api/tags');\n  }\n\n  async getTag(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tags/${id}`);\n  }\n\n  async createTag(tag: CreateTagRequest): Promise<TagResponse> {\n    return this.request('/api/tags', { method: 'POST', body: tag });\n  }\n\n  async addTagsToTask(taskId: string, tags: string[]): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${taskId}/tags`, {\n      method: 'POST',\n      body: { tags },\n    });\n  }\n\n  async removeTagFromTask(taskId: string, tag: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${taskId}/tags/${tag}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async updateTag(id: string, updates: UpdateTagRequest): Promise<TagResponse> {\n    return this.request(`/api/tags/${id}`, { method: 'PATCH', body: updates });\n  }\n\n  async deleteTag(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tags/${id}`, { method: 'DELETE' });\n  }\n\n  async searchTags(query: string): Promise<AnyApiResponse> {\n    return this.request('/api/tags/search', { params: { q: query } });\n  }\n\n  async mergeTags(fromId: string, toId: string): Promise<AnyApiResponse> {\n    return this.request(`/api/tags/${fromId}/merge`, {\n      method: 'POST',\n      body: { targetTagId: toId },\n    });\n  }\n\n  // Priority API methods\n  async getPriorities(): Promise<AnyApiResponse> {\n    return this.request('/api/priorities');\n  }\n\n  async getNextTask(): Promise<AnyApiResponse> {\n    return this.request('/api/priorities/next');\n  }\n\n  async recalculatePriorities(): Promise<AnyApiResponse> {\n    return this.request('/api/priorities/calculate', { method: 'POST' });\n  }\n\n  async updateTaskPriority(id: string, priority: number): Promise<AnyApiResponse> {\n    return this.request(`/api/tasks/${id}/priority`, {\n      method: 'PATCH',\n      body: { priority },\n    });\n  }\n\n  // Context API methods\n  async getContext(): Promise<AnyApiResponse> {\n    return this.request('/api/context');\n  }\n\n  async getTaskContext(id: string): Promise<AnyApiResponse> {\n    return this.request(`/api/context/task/${id}`);\n  }\n\n  async getProjectSummary(): Promise<AnyApiResponse> {\n    return this.request('/api/context/summary');\n  }\n\n  // Search API methods\n  async searchTasks(query: string, params?: Record<string, string>): Promise<AnyApiResponse> {\n    return this.request('/api/search/tasks', {\n      params: { q: query, ...params },\n    });\n  }\n\n  /**\n   * Convenience method for GET requests\n   */\n  async get<T = AnyApiResponse>(\n    endpoint: string,\n    options?: Omit<RequestOptions, 'method'>\n  ): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'GET' });\n  }\n\n  /**\n   * Convenience method for POST requests\n   */\n  async post<T = AnyApiResponse>(\n    endpoint: string,\n    body?: unknown,\n    options?: Omit<RequestOptions, 'method' | 'body'>\n  ): Promise<T> {\n    return this.request<T>(endpoint, { ...options, method: 'POST', body });\n  }\n\n  /**\n   * Update API key and base URL\n   */\n  updateConfig(): void {\n    this.baseUrl = this.config.getServerUrl();\n    this.apiKey = this.config.getApiKey() ?? undefined;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/backup.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":16,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":18,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1703,1705],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":90,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":124,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":164,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":171,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":168,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":179,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":179,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":181,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":214,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":221,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":218,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":281,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":281,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8431,8433],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":281,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":281,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":329,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":364,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":356,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":356,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11313,11315],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .confirmed on an `any` value.","line":366,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":371,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":371,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .targetTime on an `any` value.","line":371,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":371,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":389,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":396,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":466,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":525,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[15682,15684],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":479,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":479,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[16048,16050],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":491,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":491,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[16602,16604],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":497,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":497,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[16799,16801],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":503,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":503,"endColumn":51,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[17002,17002],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":527,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":527,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":532,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":532,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[17930,17932],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":534,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":534,"endColumn":55,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[18040,18040],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":576,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":576,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":578,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":578,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":583,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":583,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":599,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":599,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport type { CliComponents, BackupInfo, BackupSchedule } from '../types';\n\ninterface CreateBackupOptions {\n  compress?: boolean;\n  verify?: boolean;\n  description?: string;\n}\n\ninterface ListBackupOptions {\n  limit?: string;\n  sort?: string;\n  order?: string;\n}\n\ninterface DeleteBackupOptions {\n  force?: boolean;\n}\n\ninterface ExportBackupOptions {\n  format?: string;\n}\n\ninterface RestoreBackupOptions {\n  noVerify?: boolean;\n  preserveExisting?: boolean;\n  confirmed?: boolean;\n  targetTime?: string;\n}\n\ninterface CreateScheduleOptions {\n  cron?: string;\n  type?: string;\n  description?: string;\n  retention?: string;\n  'no-compression'?: boolean;\n  'no-verification'?: boolean;\n  disabled?: boolean;\n}\n\ninterface ListScheduleOptions {\n  enabled?: boolean;\n  disabled?: boolean;\n  limit?: string;\n}\n\nexport function registerBackupCommands(program: Command): void {\n  const backupCmd = program.command('backup').alias('bak').description('Manage database backups');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  backupCmd\n    .command('create [name]')\n    .description('Create a new backup')\n    .option('-c, --compress', 'compress backup file')\n    .option('-v, --verify', 'verify backup after creation')\n    .option('--description <desc>', 'backup description')\n    .action(async (name?: string, options: CreateBackupOptions = {}) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const backupData: Partial<BackupInfo> = {};\n\n        const backupName =\n          name ||\n          ((): string => {\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\n            return `backup-${timestamp}`;\n          })();\n\n        backupData.name = backupName;\n        backupData.compress = Boolean(options.compress);\n        backupData.verify = Boolean(options.verify);\n\n        if (options.description) {\n          backupData.description = String(options.description);\n        }\n\n        formatter.info(`Creating backup: ${backupName}...`);\n\n        const backup = await apiClient.request('/api/backup/create', {\n          method: 'POST',\n          body: backupData,\n        });\n\n        formatter.success(`Backup created successfully: ${backup.data.id}`);\n        formatter.output(backup.data, {\n          fields: ['id', 'name', 'size', 'compressed', 'verified', 'createdAt'],\n          headers: ['ID', 'Name', 'Size', 'Compressed', 'Verified', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to create backup: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('list')\n    .alias('ls')\n    .description('List all backups')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--sort <field>', 'sort by field', 'createdAt')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async (options: ListBackupOptions) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          limit: options.limit ?? '20',\n          sort: options.sort ?? 'createdAt',\n          order: options.order ?? 'desc',\n        };\n\n        const backups = await apiClient.request('/api/backup/list', {\n          params,\n        });\n\n        if (!backups.data || !Array.isArray(backups.data) || backups.data.length === 0) {\n          formatter.info('No backups found');\n          return;\n        }\n\n        formatter.output(backups.data, {\n          fields: ['id', 'name', 'size', 'compressed', 'verified', 'createdAt'],\n          headers: ['ID', 'Name', 'Size', 'Compressed', 'Verified', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list backups: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('restore <id>')\n    .description('Restore from a backup')\n    .option('-f, --force', 'skip confirmation')\n    .option('--verify', 'verify backup before restore')\n    .action(async (id: string, options: RestoreBackupOptions) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Get backup info\n        const backup = await apiClient.request(`/api/backup/${id}`);\n        if (!backup.data) {\n          formatter.error(`Backup ${id} not found`);\n          process.exit(1);\n        }\n\n        if (!options.force) {\n          formatter.warn('WARNING: This will replace all current data!');\n          formatter.output(backup.data, {\n            fields: ['id', 'name', 'size', 'createdAt'],\n            headers: ['ID', 'Name', 'Size', 'Created'],\n          });\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Restore from backup \"${backup.data.name}\"? This cannot be undone!`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Restore cancelled');\n            return;\n          }\n        }\n\n        const restoreData = { verify: options.verify || false };\n\n        formatter.info(`Restoring from backup: ${backup.data.name}...`);\n\n        const result = await apiClient.request(`/api/backup/${id}/restore`, {\n          method: 'POST',\n          body: restoreData,\n        });\n\n        formatter.success('Database restored successfully');\n        formatter.output(result);\n      } catch (error) {\n        formatter.error(\n          `Failed to restore backup: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('delete <id>')\n    .alias('rm')\n    .description('Delete a backup')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (id: string, options: DeleteBackupOptions) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const backup = await apiClient.request(`/api/backup/${id}`);\n          if (!backup.data) {\n            formatter.error(`Backup ${id} not found`);\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Delete backup \"${backup.data.name}\"?`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Delete cancelled');\n            return;\n          }\n        }\n\n        await apiClient.request(`/api/backup/${id}`, { method: 'DELETE' });\n        formatter.success(`Backup ${id} deleted successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to delete backup: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('verify <id>')\n    .description('Verify backup integrity')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info(`Verifying backup: ${id}...`);\n\n        const result = await apiClient.request(`/api/backup/${id}/verify`, {\n          method: 'POST',\n        });\n\n        if (result.valid) {\n          formatter.success('Backup verification passed');\n        } else {\n          formatter.error('Backup verification failed');\n        }\n\n        formatter.output(result);\n      } catch (error) {\n        formatter.error(\n          `Failed to verify backup: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('export <id> [path]')\n    .description('Export backup to file')\n    .option('-f, --format <format>', 'export format (json|sql|csv)', 'json')\n    .action(async (id: string, exportPath?: string, options: ExportBackupOptions = {}) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const backup = await apiClient.request(`/api/backup/${id}`);\n        if (!backup.data) {\n          formatter.error(`Backup ${id} not found`);\n          process.exit(1);\n        }\n\n        const finalExportPath = exportPath || `${backup.data.name}.${options.format ?? 'json'}`;\n\n        formatter.info(`Exporting backup to: ${finalExportPath}...`);\n\n        const data = (await apiClient.request(`/api/backup/${id}/export`, {\n          params: { format: options.format ?? 'json' },\n        })) as unknown;\n\n        // Ensure directory exists\n        const dir = path.dirname(finalExportPath);\n        if (!fs.existsSync(dir)) {\n          fs.mkdirSync(dir, { recursive: true });\n        }\n\n        // Write file\n        if (options.format === 'json') {\n          fs.writeFileSync(finalExportPath, JSON.stringify(data, null, 2));\n        } else {\n          fs.writeFileSync(finalExportPath, data as string);\n        }\n\n        const stats = fs.statSync(finalExportPath);\n        formatter.success(`Backup exported successfully to ${finalExportPath}`);\n        formatter.info(`File size: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);\n      } catch (error) {\n        formatter.error(\n          `Failed to export backup: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('restore-to-time [targetTime]')\n    .description('Restore database to specific point in time')\n    .option('--no-verify', 'skip backup verification before restoration')\n    .option('--preserve-existing', 'create backup of current state before restoration')\n    .action(async (targetTime?: string, options: RestoreBackupOptions = {}) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        let restoreTime = targetTime;\n\n        // Interactive mode if no target time provided\n        if (!restoreTime) {\n          const now = new Date();\n          const defaultTime = new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString(); // 24 hours ago\n\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'targetTime',\n              message: 'Target restoration time (ISO format):',\n              default: defaultTime,\n              validate: (input: string): string | boolean => {\n                const date = new Date(input);\n                if (Number.isNaN(date.getTime())) {\n                  return 'Invalid date format. Use ISO format (e.g., 2025-07-26T10:30:00Z)';\n                }\n                if (date > now) {\n                  return 'Target time cannot be in the future';\n                }\n                return true;\n              },\n            },\n            {\n              type: 'confirm',\n              name: 'verify',\n              message: 'Verify backups before restoration?',\n              default: !options.noVerify,\n            },\n            {\n              type: 'confirm',\n              name: 'preserveExisting',\n              message: 'Create backup of current state before restoration?',\n              default: options.preserveExisting || false,\n            },\n            {\n              type: 'confirm',\n              name: 'confirmed',\n              message: 'This will replace the current database. Are you sure?',\n              default: false,\n            },\n          ]);\n\n          if (!answers.confirmed) {\n            formatter.info('Point-in-time restoration cancelled');\n            return;\n          }\n\n          restoreTime = answers.targetTime;\n          // Note: Can't modify options object directly due to readonly, these values are handled in the API call\n        } else {\n          // Validate provided time\n          const targetDate = new Date(restoreTime);\n          if (Number.isNaN(targetDate.getTime())) {\n            formatter.error(\n              'Invalid target time format. Use ISO format (e.g., 2025-07-26T10:30:00Z)'\n            );\n            process.exit(1);\n          }\n\n          if (targetDate > new Date()) {\n            formatter.error('Target time cannot be in the future');\n            process.exit(1);\n          }\n\n          // Confirmation for non-interactive mode\n          const { confirmed } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirmed',\n              message: `Restore database to ${restoreTime}? This will replace the current database.`,\n              default: false,\n            },\n          ]);\n\n          if (!confirmed) {\n            formatter.info('Point-in-time restoration cancelled');\n            return;\n          }\n        }\n\n        formatter.info(`Starting point-in-time restoration to: ${restoreTime}...`);\n\n        const result = await apiClient.request('/api/backup/restore-to-time', {\n          method: 'POST',\n          body: JSON.stringify({\n            targetTime: restoreTime,\n            verify: !options.noVerify,\n            preserveExisting: options.preserveExisting,\n          }),\n        });\n\n        formatter.success('Point-in-time restoration completed successfully');\n        formatter.info(`Database restored to: ${restoreTime}`);\n\n        if (result.backupsApplied) {\n          formatter.info(`Applied ${result.backupsApplied} backup(s)`);\n        }\n      } catch (error) {\n        formatter.error('Point-in-time restoration failed');\n        if (error instanceof Error) {\n          formatter.error(error.message);\n        }\n        process.exit(1);\n      }\n    });\n\n  // Schedule management commands\n  backupCmd\n    .command('schedule')\n    .description('Manage backup schedules')\n    .action((): void => {\n      const { formatter } = getComponents();\n      formatter.info('Available schedule commands:');\n      formatter.info('  backup schedule create    - Create a new backup schedule');\n      formatter.info('  backup schedule list      - List all backup schedules');\n      formatter.info('  backup schedule show <id> - Show schedule details');\n      formatter.info('  backup schedule update <id> - Update a schedule');\n      formatter.info('  backup schedule delete <id> - Delete a schedule');\n      formatter.info('  backup schedule run <id>  - Execute a schedule manually');\n      formatter.info('  backup schedule start     - Start the backup scheduler');\n      formatter.info('  backup schedule stop      - Stop the backup scheduler');\n      formatter.info('  backup schedule cleanup   - Clean up old backups');\n    });\n\n  backupCmd\n    .command('schedule create [name]')\n    .description('Create a new backup schedule')\n    .option('--cron <expression>', 'cron expression (e.g., \"0 2 * * *\" for daily at 2 AM)')\n    .option('--type <type>', 'backup type (full, incremental)', 'full')\n    .option('--description <desc>', 'schedule description')\n    .option('--retention <days>', 'retention period in days', '30')\n    .option('--no-compression', 'disable compression')\n    .option('--no-verification', 'disable verification')\n    .option('--disabled', 'create schedule as disabled')\n    .action(async (name?: string, options: CreateScheduleOptions = {}) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        let scheduleData: Partial<BackupSchedule> = {};\n\n        // Interactive mode if no name provided\n        if (!name || !options.cron) {\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'name',\n              message: 'Schedule name:',\n              default: name || `schedule-${Date.now()}`,\n              validate: (input: string): string | boolean =>\n                input.trim().length > 0 || 'Name is required',\n            },\n            {\n              type: 'input',\n              name: 'cronExpression',\n              message: 'Cron expression (e.g., \"0 2 * * *\" for daily at 2 AM):',\n              default: options.cron || '0 2 * * *',\n              validate: (input: string): string | boolean => {\n                // Basic validation - in production you'd want more thorough validation\n                const parts = input.trim().split(' ');\n                return parts.length === 5 || 'Invalid cron expression format (should have 5 parts)';\n              },\n            },\n            {\n              type: 'list',\n              name: 'backupType',\n              message: 'Backup type:',\n              choices: ['full', 'incremental'],\n              default: options.type || 'full',\n            },\n            {\n              type: 'input',\n              name: 'description',\n              message: 'Description (optional):',\n              default: options.description || '',\n            },\n            {\n              type: 'number',\n              name: 'retentionDays',\n              message: 'Retention period (days):',\n              default: parseInt(options.retention) || 30,\n              validate: (input: number): string | boolean =>\n                input > 0 || 'Retention days must be positive',\n            },\n            {\n              type: 'confirm',\n              name: 'compressionEnabled',\n              message: 'Enable compression?',\n              default: !options['no-compression'],\n            },\n            {\n              type: 'confirm',\n              name: 'verificationEnabled',\n              message: 'Enable verification?',\n              default: !options['no-verification'],\n            },\n            {\n              type: 'confirm',\n              name: 'enabled',\n              message: 'Enable schedule immediately?',\n              default: !options.disabled,\n            },\n          ]);\n\n          scheduleData = answers;\n        } else {\n          scheduleData = {\n            name,\n            cronExpression: options.cron,\n            backupType: options.type || 'full',\n            description: options.description,\n            retentionDays: parseInt(options.retention) || 30,\n            compressionEnabled: !options['no-compression'],\n            verificationEnabled: !options['no-verification'],\n            enabled: !options.disabled,\n          };\n        }\n\n        formatter.info(`Creating backup schedule: ${scheduleData.name}...`);\n\n        const schedule = await apiClient.request('/api/schedule/create', {\n          method: 'POST',\n          body: JSON.stringify(scheduleData),\n        });\n\n        formatter.success('Backup schedule created successfully');\n        formatter.output(schedule.data);\n      } catch (error) {\n        formatter.error('Failed to create backup schedule');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule list')\n    .description('List all backup schedules')\n    .option('--enabled', 'show only enabled schedules')\n    .option('--disabled', 'show only disabled schedules')\n    .option('--limit <count>', 'maximum number of schedules to show', '20')\n    .action(async (options: ListScheduleOptions = {}) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {};\n\n        if (options.enabled) params.enabled = 'true';\n        if (options.disabled) params.enabled = 'false';\n        if (options.limit) params.limit = options.limit;\n\n        const queryString = new URLSearchParams(params).toString();\n        const url = `/api/schedule/list${queryString ? `?${queryString}` : ''}`;\n\n        const response = await apiClient.request(url);\n        const schedules = response.data;\n\n        if (schedules.length === 0) {\n          formatter.info('No backup schedules found');\n          return;\n        }\n\n        formatter.success(`Found ${schedules.length} backup schedule(s)`);\n        formatter.output(schedules);\n      } catch (error) {\n        formatter.error('Failed to list backup schedules');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule show <id>')\n    .description('Show backup schedule details')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const response = await apiClient.request(`/api/schedule/${id}`);\n        const schedule = response.data;\n\n        formatter.output(schedule);\n      } catch (error) {\n        formatter.error('Failed to get backup schedule');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule run <id>')\n    .description('Execute a backup schedule manually')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info(`Executing backup schedule: ${id}...`);\n\n        await apiClient.request(`/api/schedule/${id}/execute`, {\n          method: 'POST',\n        });\n\n        formatter.success('Backup schedule executed successfully');\n      } catch (error) {\n        formatter.error('Failed to execute backup schedule');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule start')\n    .description('Start the backup scheduler')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Starting backup scheduler...');\n\n        await apiClient.request('/api/schedule/start', {\n          method: 'POST',\n        });\n\n        formatter.success('Backup scheduler started successfully');\n      } catch (error) {\n        formatter.error('Failed to start backup scheduler');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule stop')\n    .description('Stop the backup scheduler')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Stopping backup scheduler...');\n\n        await apiClient.request('/api/schedule/stop', {\n          method: 'POST',\n        });\n\n        formatter.success('Backup scheduler stopped successfully');\n      } catch (error) {\n        formatter.error('Failed to stop backup scheduler');\n        process.exit(1);\n      }\n    });\n\n  backupCmd\n    .command('schedule cleanup')\n    .description('Clean up old backups based on retention policies')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Cleaning up old backups...');\n\n        await apiClient.request('/api/schedule/cleanup', {\n          method: 'POST',\n        });\n\n        formatter.success('Backup cleanup completed successfully');\n      } catch (error) {\n        formatter.error('Failed to clean up old backups');\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/boards.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CreateBoardOptions' is defined but never used.","line":17,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UpdateBoardOptions' is defined but never used.","line":27,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BoardSetupData' is defined but never used.","line":88,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5378,5380],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":226,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":226,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6330,6332],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":231,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":231,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6513,6515],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":256,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":256,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":258,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":258,"endColumn":27},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":262,"column":37,"nodeType":"CallExpression","messageId":"missingRadix","endLine":262,"endColumn":62,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7549,7549],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":263,"column":32,"nodeType":"CallExpression","messageId":"missingRadix","endLine":263,"endColumn":57,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7613,7613],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":264,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":302,"endColumn":16},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'apiResponse' is already declared in the upper scope on line 221 column 15.","line":271,"column":27,"nodeType":"Identifier","messageId":"noShadow","endLine":271,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8225,8227],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":281,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":281,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8468,8470],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":320,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":320,"endColumn":65,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9799,9799],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":320,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":320,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9793,9795],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":321,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":321,"endColumn":64,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9864,9864],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":321,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":321,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9857,9859],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'onTaskSelect' has no 'await' expression.","line":322,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":322,"endColumn":53},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":327,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":327,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10152,10154],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'onColumnSelect' has no 'await' expression.","line":335,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":335,"endColumn":44},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":344,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":419,"endColumn":14},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'apiResponse' is already declared in the upper scope on line 221 column 15.","line":352,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":352,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":357,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":357,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11564,11566],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":362,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":362,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11817,11819],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":428,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":428,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":449,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":449,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":458,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":458,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":467,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":467,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":482,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":482,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":483,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":483,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":487,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":487,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":487,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":487,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":488,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":488,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":488,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":488,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":497,"column":34,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":497,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":527,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":527,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":528,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":541,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":533,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":533,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":539,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":539,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":542,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":542,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":545,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":545,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":545,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":545,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":546,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":546,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":546,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":546,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":574,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":574,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":581,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":588,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":682,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":682,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":682,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":682,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":682,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":682,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":683,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":683,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":683,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":683,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":683,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":683,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .public on an `any` value.","line":684,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":684,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .template on an `any` value.","line":687,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":687,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [options.template] resolves to an any value.","line":717,"column":26,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":717,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .template on an `any` value.","line":717,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":717,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .template on an `any` value.","line":719,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":719,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":724,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":724,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [options.template] resolves to an any value.","line":724,"column":40,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":724,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .template on an `any` value.","line":724,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":724,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":733,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":733,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .template on an `any` value.","line":733,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":733,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setDefault on an `any` value.","line":777,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":777,"endColumn":31}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport * as React from 'react';\nimport { render } from 'ink';\nimport chalk from 'chalk';\nimport type { CliComponents } from '../types';\nimport { BoardView } from '../ui/components/BoardView';\nimport type { Board, Column } from '../ui/components/BoardView';\nimport type { Task } from '../ui/components/TaskList';\nimport { spinner } from '../utils/spinner';\n\ninterface ListBoardOptions {\n  active?: boolean;\n  archived?: boolean;\n}\n\ninterface CreateBoardOptions {\n  description?: string;\n  template?: string;\n}\n\ninterface ShowBoardOptions {\n  tasks?: boolean;\n  stats?: boolean;\n}\n\ninterface UpdateBoardOptions {\n  name?: string;\n  description?: string;\n}\n\ninterface BoardData {\n  id: string;\n  name: string;\n  description?: string;\n  archived: boolean;\n  createdAt: string;\n  updatedAt?: string;\n  columns?: Column[];\n  tasks?: Task[];\n}\n\ninterface ApiColumnData {\n  id: string;\n  name: string;\n  wip_limit?: number;\n  tasks?: ApiTaskData[];\n}\n\ninterface ApiTaskData {\n  id: string;\n  title: string;\n  status: string;\n  priority: string;\n  assignee?: string;\n  tags?: string[];\n  due_date?: string;\n}\n\ninterface ApiBoardResponse {\n  id: string;\n  name: string;\n  description?: string;\n  columns?: ApiColumnData[];\n}\n\ninterface ViewBoardOptions {\n  interactive?: boolean;\n  wipLimits?: boolean;\n  refresh?: string;\n  maxHeight?: string;\n  columnWidth?: string;\n}\n\ninterface CreateBoardData {\n  name?: string;\n  description?: string;\n  useAsDefault?: boolean;\n}\n\ninterface QuickSetupDefaults {\n  name?: string;\n  description?: string;\n  isPublic?: boolean;\n  columns?: Array<{ name: string; order: number }>;\n}\n\ninterface BoardSetupData {\n  name: string;\n  description?: string;\n  isPublic: boolean;\n  columns: Array<{ name: string; order: number }>;\n}\n\nexport function registerBoardCommands(program: Command): void {\n  const boardCmd = program.command('board').alias('b').description('Manage boards');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  boardCmd\n    .command('list')\n    .alias('ls')\n    .description('List boards')\n    .option('--active', 'show only active boards')\n    .option('--archived', 'show only archived boards')\n    .action(async (options: ListBoardOptions) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const response = await apiClient.getBoards();\n        const boards = response.data as BoardData[];\n\n        if (!boards || boards.length === 0) {\n          formatter.info('No boards found');\n          return;\n        }\n\n        // Filter based on options\n        let filteredBoards = boards;\n        if (options.active) {\n          filteredBoards = boards.filter((board: BoardData) => !board.archived);\n        } else if (options.archived) {\n          filteredBoards = boards.filter((board: BoardData) => board.archived);\n        }\n\n        formatter.output(filteredBoards, {\n          fields: ['id', 'name', 'description', 'archived', 'createdAt'],\n          headers: ['ID', 'Name', 'Description', 'Archived', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list boards: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('show <id>')\n    .description('Show board details')\n    .option('--tasks', 'include tasks in board')\n    .option('--stats', 'include board statistics')\n    .action(async (id: string, options: ShowBoardOptions) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const response = await apiClient.getBoard(id);\n        const board = response.data as BoardData;\n\n        if (!board) {\n          formatter.error(`Board ${id} not found`);\n          process.exit(1);\n        }\n\n        formatter.output(board);\n\n        if (options.tasks && board.tasks) {\n          formatter.info('\\n--- Tasks ---');\n          formatter.output(board.tasks, {\n            fields: ['id', 'title', 'status', 'priority'],\n            headers: ['ID', 'Title', 'Status', 'Priority'],\n          });\n        }\n\n        if (options.stats) {\n          formatter.info('\\n--- Statistics ---');\n          try {\n            const statsResponse = await apiClient.getBoardStats(id);\n            formatter.output(statsResponse.data);\n          } catch (error) {\n            formatter.warn('Could not retrieve board statistics');\n          }\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('view [id]')\n    .description('Interactive board view with live updates')\n    .option('-i, --interactive', 'enable interactive mode (default)', true)\n    .option('--no-interactive', 'disable interactive mode')\n    .option('--wip-limits', 'show WIP limits', true)\n    .option('--refresh <seconds>', 'auto-refresh interval', '30')\n    .option('--max-height <number>', 'maximum column height', '8')\n    .option('--column-width <number>', 'column width', '25')\n    .action(async (id?: string, options?: ViewBoardOptions) => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        // Determine board ID\n        const boardId = id || config.getDefaultBoard();\n        if (!boardId) {\n          formatter.error(\n            'Board ID is required. Specify an ID or set default board with \"kanban board use <id>\"'\n          );\n          process.exit(1);\n        }\n\n        // Fetch board data with spinner\n        const boardData = await spinner.withSpinner(\n          `Loading board: ${boardId}`,\n          apiClient.getBoard(boardId),\n          {\n            successText: 'Board loaded successfully',\n            failText: 'Failed to load board',\n          }\n        );\n\n        if (!boardData) {\n          formatter.error(`Board ${boardId} not found`);\n          process.exit(1);\n        }\n\n        // Transform API data to component format\n        const apiResponse = boardData as ApiBoardResponse;\n        const board: Board = {\n          id: apiResponse.id,\n          name: apiResponse.name,\n          description: apiResponse.description,\n          columns: (apiResponse.columns || []).map(\n            (col: ApiColumnData): Column => ({\n              id: col.id,\n              name: col.name,\n              limit: col.wip_limit,\n              tasks: (col.tasks || []).map(\n                (task: ApiTaskData): Task => ({\n                  id: task.id,\n                  title: task.title,\n                  status: task.status,\n                  priority: task.priority,\n                  assignee: task.assignee,\n                  tags: task.tags,\n                  due_date: task.due_date,\n                })\n              ),\n            })\n          ),\n        };\n\n        if (!options?.interactive) {\n          // Non-interactive mode - just show board data\n          formatter.output(board);\n          return;\n        }\n\n        // Interactive mode with React component\n        let refreshInterval: NodeJS.Timeout | null = null;\n        let shouldRefresh = false;\n\n        const InteractiveBoardView = () => {\n          const [currentBoard, setCurrentBoard] = React.useState<Board>(board);\n          const [isLoading, setIsLoading] = React.useState(false);\n\n          // Auto-refresh functionality\n          React.useEffect(() => {\n            if (options?.refresh && parseInt(options.refresh) > 0) {\n              const interval = parseInt(options.refresh) * 1000;\n              refreshInterval = setInterval(async () => {\n                if (!shouldRefresh) return;\n\n                setIsLoading(true);\n                try {\n                  const refreshedData = await apiClient.getBoard(boardId);\n                  if (refreshedData) {\n                    const apiResponse = refreshedData as ApiBoardResponse;\n                    const refreshedBoard: Board = {\n                      id: apiResponse.id,\n                      name: apiResponse.name,\n                      description: apiResponse.description,\n                      columns: (apiResponse.columns || []).map(\n                        (col: ApiColumnData): Column => ({\n                          id: col.id,\n                          name: col.name,\n                          limit: col.wip_limit,\n                          tasks: (col.tasks || []).map(\n                            (task: ApiTaskData): Task => ({\n                              id: task.id,\n                              title: task.title,\n                              status: task.status,\n                              priority: task.priority,\n                              assignee: task.assignee,\n                              tags: task.tags,\n                              due_date: task.due_date,\n                            })\n                          ),\n                        })\n                      ),\n                    };\n                    setCurrentBoard(refreshedBoard);\n                  }\n                } catch (error) {\n                  // Silently fail refresh\n                } finally {\n                  setIsLoading(false);\n                }\n              }, interval);\n            }\n\n            return () => {\n              if (refreshInterval) {\n                clearInterval(refreshInterval);\n              }\n            };\n          }, []);\n\n          // Enable refresh after initial render\n          React.useEffect(() => {\n            shouldRefresh = true;\n          }, []);\n\n          return React.createElement(BoardView, {\n            board: currentBoard,\n            showWIPLimits: options?.wipLimits,\n            maxColumnHeight: parseInt(options?.maxHeight || '8'),\n            columnWidth: parseInt(options?.columnWidth || '25'),\n            onTaskSelect: async (task, _columnId) => {\n              try {\n                // Show task details\n                formatter.info(`\\nTask: ${task.title}`);\n                formatter.info(`Status: ${task.status}`);\n                formatter.info(`Priority: ${task.priority || 'None'}`);\n                if (task.assignee) formatter.info(`Assignee: ${task.assignee}`);\n                if (task.tags?.length) formatter.info(`Tags: ${task.tags.join(', ')}`);\n                if (task.due_date) formatter.info(`Due: ${task.due_date}`);\n              } catch (error) {\n                // Handle task selection error\n              }\n            },\n            onColumnSelect: async column => {\n              try {\n                formatter.info(`\\nColumn: ${column.name}`);\n                formatter.info(`Tasks: ${column.tasks.length}`);\n                if (column.limit) formatter.info(`WIP Limit: ${column.limit}`);\n              } catch (error) {\n                // Handle column selection error\n              }\n            },\n            onKeyPress: async (key, context) => {\n              switch (key) {\n                case 'r':\n                  // Manual refresh\n                  setIsLoading(true);\n                  try {\n                    const refreshedData = await apiClient.getBoard(boardId);\n                    if (refreshedData) {\n                      const apiResponse = refreshedData as ApiBoardResponse;\n                      const refreshedBoard: Board = {\n                        id: apiResponse.id,\n                        name: apiResponse.name,\n                        description: apiResponse.description,\n                        columns: (apiResponse.columns || []).map(\n                          (col: ApiColumnData): Column => ({\n                            id: col.id,\n                            name: col.name,\n                            limit: col.wip_limit,\n                            tasks: (col.tasks || []).map(\n                              (task: ApiTaskData): Task => ({\n                                id: task.id,\n                                title: task.title,\n                                status: task.status,\n                                priority: task.priority,\n                                assignee: task.assignee,\n                                tags: task.tags,\n                                due_date: task.due_date,\n                              })\n                            ),\n                          })\n                        ),\n                      };\n                      setCurrentBoard(refreshedBoard);\n                    }\n                  } catch (error) {\n                    // Handle refresh error\n                  } finally {\n                    setIsLoading(false);\n                  }\n                  break;\n                case 'n':\n                  // Create new task in selected column\n                  if (context.selectedColumn) {\n                    formatter.info(`\\nCreate new task in column: ${context.selectedColumn.name}`);\n                  }\n                  break;\n                case 'e':\n                  // Edit selected task\n                  if (context.selectedTask) {\n                    formatter.info(`\\nEdit task: ${context.selectedTask.title}`);\n                  }\n                  break;\n                case 'd':\n                  // Delete selected task\n                  if (context.selectedTask) {\n                    formatter.info(`\\nDelete task: ${context.selectedTask.title}`);\n                  }\n                  break;\n                case '?':\n                  // Show help\n                  formatter.info('\\nKeyboard shortcuts:');\n                  formatter.info('  ←/→ or h/l: Switch columns');\n                  formatter.info('  ↑/↓ or j/k: Navigate tasks');\n                  formatter.info('  Enter: Select task/column');\n                  formatter.info('  r: Refresh board');\n                  formatter.info('  n: New task in column');\n                  formatter.info('  e: Edit selected task');\n                  formatter.info('  d: Delete selected task');\n                  formatter.info('  ?: Show this help');\n                  formatter.info('  q: Quit');\n                  break;\n                default:\n                  // Handle unknown key\n                  break;\n              }\n            },\n          });\n        };\n\n        // Show loading indicator and instructions\n        formatter.info(`Starting interactive board view for: ${board.name}`);\n        formatter.info('Press ? for help, q to quit');\n\n        // Render the interactive board view\n        render(React.createElement(InteractiveBoardView));\n      } catch (error) {\n        formatter.error(\n          `Failed to start board view: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('create')\n    .alias('new')\n    .description('Create a new board')\n    .option('-n, --name <name>', 'board name')\n    .option('-d, --description <desc>', 'board description')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async options => {\n      const { config, apiClient, formatter } = getComponents();\n\n      let boardData: CreateBoardData = {};\n\n      if (options.interactive || !options.name) {\n        const questions: Array<{\n          type: string;\n          name: string;\n          message: string;\n          validate?: (input: string) => boolean | string;\n          default?: boolean;\n        }> = [];\n\n        if (!options.name) {\n          questions.push({\n            type: 'input',\n            name: 'name',\n            message: 'Board name:',\n            validate: (input: string) => input.length > 0 || 'Name is required',\n          });\n        }\n\n        if (!options.description) {\n          questions.push({\n            type: 'input',\n            name: 'description',\n            message: 'Board description (optional):',\n          });\n        }\n\n        questions.push({\n          type: 'confirm',\n          name: 'useAsDefault',\n          message: 'Set as default board?',\n          default: false,\n        });\n\n        const answers = await inquirer.prompt(questions);\n        boardData = { ...boardData, ...answers };\n      }\n\n      // Use command line options or answers\n      boardData.name = options.name || boardData.name;\n      boardData.description = options.description || boardData.description;\n\n      try {\n        const board = await apiClient.createBoard(boardData);\n        formatter.success(`Board created successfully: ${(board as { id: string }).id}`);\n        formatter.output(board);\n\n        // Set as default if requested\n        if (boardData.useAsDefault) {\n          config.setDefaultBoard(board.id);\n          formatter.info(`Set as default board`);\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to create board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('update <id>')\n    .description('Update a board')\n    .option('-n, --name <name>', 'board name')\n    .option('-d, --description <desc>', 'board description')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Get current board data\n        const currentBoard = await apiClient.getBoard(id);\n        if (!currentBoard) {\n          formatter.error(`Board ${id} not found`);\n          process.exit(1);\n        }\n\n        let updates: Record<string, unknown> = {};\n\n        if (options.interactive) {\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'name',\n              message: 'Board name:',\n              default: currentBoard.name,\n            },\n            {\n              type: 'input',\n              name: 'description',\n              message: 'Board description:',\n              default: currentBoard.description || '',\n            },\n          ]);\n          updates = answers;\n        } else {\n          // Use command line options\n          if (options.name) updates.name = options.name;\n          if (options.description) updates.description = options.description;\n        }\n\n        if (Object.keys(updates).length === 0) {\n          formatter.warn('No updates specified');\n          return;\n        }\n\n        const updatedBoard = await apiClient.updateBoard(id, updates);\n        formatter.success('Board updated successfully');\n        formatter.output(updatedBoard);\n      } catch (error) {\n        formatter.error(\n          `Failed to update board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('delete <id>')\n    .alias('rm')\n    .description('Delete a board')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const board = await apiClient.getBoard(id);\n          if (!board) {\n            formatter.error(`Board ${id} not found`);\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Delete board \"${board.name}\"? This will also delete all tasks in the board.`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Delete cancelled');\n            return;\n          }\n        }\n\n        await apiClient.deleteBoard(id);\n        formatter.success(`Board ${id} deleted successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to delete board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('use <id>')\n    .description('Set board as default')\n    .action(async (id: string) => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        // Verify board exists\n        const board = await apiClient.getBoard(id);\n        if (!board) {\n          formatter.error(`Board ${id} not found`);\n          process.exit(1);\n        }\n\n        config.setDefaultBoard(id);\n        formatter.success(`Default board set to \"${board.name}\" (${id})`);\n      } catch (error) {\n        formatter.error(\n          `Failed to set default board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('archive <id>')\n    .description('Archive a board')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.updateBoard(id, { archived: true });\n        formatter.success(`Board ${id} archived successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to archive board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('unarchive <id>')\n    .description('Unarchive a board')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.updateBoard(id, { archived: false });\n        formatter.success(`Board ${id} unarchived successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to unarchive board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  boardCmd\n    .command('quick-setup')\n    .alias('setup')\n    .description('Quick interactive board setup with templates')\n    .option('-n, --name <name>', 'board name')\n    .option('-d, --description <desc>', 'board description')\n    .option('--template <type>', 'use template (basic, scrum, bugs, content)')\n    .option('--public', 'make board public')\n    .option('--set-default', 'set as default board after creation')\n    .action(async options => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        // Import the quick setup function\n        const { quickBoardSetup, confirmAction } = await import('../prompts/board-prompts');\n\n        // Prepare defaults from command line options\n        const defaults: QuickSetupDefaults = {};\n        if (options.name) defaults.name = options.name;\n        if (options.description) defaults.description = options.description;\n        if (options.public) defaults.isPublic = true;\n\n        // If template is specified, we'll handle it differently\n        if (options.template) {\n          const templates = {\n            basic: [\n              { name: 'To Do', order: 0 },\n              { name: 'In Progress', order: 1 },\n              { name: 'Done', order: 2 },\n            ],\n            scrum: [\n              { name: 'Backlog', order: 0 },\n              { name: 'To Do', order: 1 },\n              { name: 'In Progress', order: 2 },\n              { name: 'Review', order: 3 },\n              { name: 'Done', order: 4 },\n            ],\n            bugs: [\n              { name: 'New', order: 0 },\n              { name: 'Confirmed', order: 1 },\n              { name: 'In Progress', order: 2 },\n              { name: 'Testing', order: 3 },\n              { name: 'Resolved', order: 4 },\n            ],\n            content: [\n              { name: 'Ideas', order: 0 },\n              { name: 'Writing', order: 1 },\n              { name: 'Editing', order: 2 },\n              { name: 'Review', order: 3 },\n              { name: 'Published', order: 4 },\n            ],\n          };\n\n          if (!templates[options.template]) {\n            formatter.error(\n              `Invalid template: ${options.template}. Available: ${Object.keys(templates).join(', ')}`\n            );\n            process.exit(1);\n          }\n\n          defaults.columns = templates[options.template];\n        }\n\n        formatter.info('Starting quick board setup...');\n\n        // Run the interactive setup\n        const boardData = await quickBoardSetup(defaults);\n\n        // Show confirmation if not using command line options\n        if (!options.name || !options.template) {\n          const confirmed = await confirmAction('Create board with these settings?', true);\n\n          if (!confirmed) {\n            formatter.warn('Board creation cancelled');\n            return;\n          }\n        }\n\n        // Transform data for API\n        const createData = {\n          name: boardData.name,\n          description: boardData.description,\n          isPublic: boardData.isPublic,\n          columns: boardData.columns.map(col => ({\n            name: col.name,\n            order: col.order,\n          })),\n        };\n\n        // Create the board with spinner\n        const board = await spinner.withSpinner(\n          `Creating board: ${boardData.name}`,\n          apiClient.createBoard(createData),\n          {\n            successText: 'Board created successfully! 🎉',\n            failText: 'Failed to create board',\n          }\n        );\n\n        formatter.success(\n          `Board \"${boardData.name}\" created with ID: ${(board as { id: string }).id}`\n        );\n\n        // Show board details\n        formatter.info('\\n📊 Board Summary:');\n        formatter.info(`Name: ${chalk.bold(boardData.name)}`);\n        if (boardData.description) {\n          formatter.info(`Description: ${boardData.description}`);\n        }\n        formatter.info(`Visibility: ${boardData.isPublic ? 'Public' : 'Private'}`);\n        formatter.info(`Columns: ${boardData.columns.map(c => c.name).join(' → ')}`);\n\n        // Set as default if requested\n        if (options.setDefault) {\n          config.setDefaultBoard((board as { id: string }).id);\n          formatter.success('Set as default board');\n        } else {\n          // Ask if they want to set it as default\n          const setAsDefault = await confirmAction('Set this board as your default?', false);\n\n          if (setAsDefault) {\n            config.setDefaultBoard((board as { id: string }).id);\n            formatter.success('Set as default board');\n          }\n        }\n\n        // Offer quick actions\n        formatter.info('\\n💡 Quick Actions:');\n        formatter.info(`  View board: kanban board view ${(board as { id: string }).id}`);\n        formatter.info(`  Create task: kanban task create --interactive`);\n        formatter.info(`  List tasks: kanban task list`);\n\n        formatter.output(board);\n      } catch (error) {\n        if (error.message === 'Board setup cancelled') {\n          formatter.warn('Board setup cancelled');\n          return;\n        }\n\n        formatter.error(\n          `Failed to setup board: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/config.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":15,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .path on an `any` value.","line":18,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[636,672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[791,863],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1136,1150],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":44,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":44,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":83,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":83,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":91,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":91,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":97,"column":26,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":107,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":108,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":115,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":125,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":164,"endColumn":9},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":131,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":131,"endColumn":21},{"ruleId":"no-new","severity":2,"message":"Do not use 'new' for side effects.","line":133,"column":15,"nodeType":"ExpressionStatement","messageId":"noNewStatement","endLine":133,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .serverUrl on an `any` value.","line":167,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .apiKey on an `any` value.","line":168,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .apiKey on an `any` value.","line":169,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":171,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .verbose on an `any` value.","line":172,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .gitEnabled on an `any` value.","line":173,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .apiKey on an `any` value.","line":181,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":27},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":207,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":207,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":233,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":234,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":241,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type { CliComponents } from '../types';\n\nexport function registerConfigCommands(program: Command): void {\n  const configCmd = program.command('config').description('Manage CLI configuration');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  configCmd\n    .command('show')\n    .description('Show current configuration')\n    .option('--path', 'show config file path')\n    .action(async options => {\n      const { config, formatter } = getComponents();\n\n      if (options.path) {\n        console.log(config.getConfigPath());\n        return;\n      }\n\n      if (!config.exists()) {\n        formatter.warn('No configuration file found');\n        console.log('Run \"kanban config init\" to create initial configuration');\n        return;\n      }\n\n      const configData = config.getAll();\n      const validation = config.validate();\n\n      if (!validation.valid) {\n        formatter.warn('Configuration has issues:');\n        validation.errors.forEach(error => formatter.error(error));\n        console.log();\n      }\n\n      formatter.output(configData);\n    });\n\n  configCmd\n    .command('set <key> <value>')\n    .description('Set configuration value')\n    .action(async (key: string, value: string) => {\n      const { config, formatter, apiClient } = getComponents();\n\n      try {\n        // Parse value based on type\n        let parsedValue: any = value;\n\n        if (value === 'true') parsedValue = true;\n        else if (value === 'false') parsedValue = false;\n        else if (/^\\d+$/.test(value)) parsedValue = parseInt(value, 10);\n        else if (/^\\d*\\.\\d+$/.test(value)) parsedValue = parseFloat(value);\n\n        config.set(key, parsedValue);\n        config.save();\n\n        // Update API client if server config changed\n        if (key.startsWith('server.') || key.startsWith('auth.')) {\n          apiClient.updateConfig();\n        }\n\n        formatter.success(`Set ${key} = ${parsedValue}`);\n\n        // Validate after setting\n        const validation = config.validate();\n        if (!validation.valid) {\n          formatter.warn('Configuration validation failed:');\n          validation.errors.forEach(error => formatter.error(error));\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to set configuration: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  configCmd\n    .command('get <key>')\n    .description('Get configuration value')\n    .action(async (key: string) => {\n      const { config, formatter } = getComponents();\n\n      if (!config.exists()) {\n        formatter.error('No configuration found');\n        process.exit(1);\n      }\n\n      const value = config.get(key);\n      if (value === undefined) {\n        formatter.error(`Configuration key \"${key}\" not found`);\n        process.exit(1);\n      }\n\n      formatter.output({ [key]: value });\n    });\n\n  configCmd\n    .command('init')\n    .description('Initialize configuration interactively')\n    .option('--force', 'overwrite existing configuration')\n    .action(async options => {\n      const { config, formatter, apiClient } = getComponents();\n\n      if (config.exists() && !options.force) {\n        const { overwrite } = await inquirer.prompt([\n          {\n            type: 'confirm',\n            name: 'overwrite',\n            message: 'Configuration already exists. Overwrite?',\n            default: false,\n          },\n        ]);\n\n        if (!overwrite) {\n          formatter.info('Configuration initialization cancelled');\n          return;\n        }\n      }\n\n      formatter.info('Initializing MCP Kanban CLI configuration...');\n\n      const answers = await inquirer.prompt([\n        {\n          type: 'input',\n          name: 'serverUrl',\n          message: 'Server URL:',\n          default: 'http://localhost:3000',\n          validate: (input: string) => {\n            try {\n              new URL(input);\n              return true;\n            } catch {\n              return 'Please enter a valid URL';\n            }\n          },\n        },\n        {\n          type: 'input',\n          name: 'apiKey',\n          message: 'API Key (optional):',\n        },\n        {\n          type: 'list',\n          name: 'format',\n          message: 'Default output format:',\n          choices: ['table', 'json', 'csv'],\n          default: 'table',\n        },\n        {\n          type: 'confirm',\n          name: 'verbose',\n          message: 'Enable verbose output by default?',\n          default: false,\n        },\n        {\n          type: 'confirm',\n          name: 'gitEnabled',\n          message: 'Enable Git integration?',\n          default: true,\n        },\n      ]);\n\n      // Update configuration\n      config.set('server.url', answers.serverUrl);\n      if (answers.apiKey) {\n        config.set('auth.apiKey', answers.apiKey);\n      }\n      config.set('defaults.format', answers.format);\n      config.set('defaults.verbose', answers.verbose);\n      config.set('git.enabled', answers.gitEnabled);\n\n      try {\n        config.save();\n        apiClient.updateConfig();\n        formatter.success('Configuration saved successfully');\n\n        // Test connection if API key provided\n        if (answers.apiKey) {\n          formatter.info('Testing connection...');\n          try {\n            const connected = await apiClient.testConnection();\n            if (connected) {\n              formatter.success('Successfully connected to server');\n            } else {\n              formatter.warn('Could not connect to server');\n            }\n          } catch (error) {\n            formatter.warn(\n              `Connection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n            );\n          }\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to save configuration: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  configCmd\n    .command('validate')\n    .description('Validate configuration')\n    .action(async () => {\n      const { config, formatter } = getComponents();\n\n      if (!config.exists()) {\n        formatter.error('No configuration found');\n        process.exit(1);\n      }\n\n      const validation = config.validate();\n\n      if (validation.valid) {\n        formatter.success('Configuration is valid');\n      } else {\n        formatter.error('Configuration validation failed:');\n        validation.errors.forEach(error => formatter.error(`  ${error}`));\n        process.exit(1);\n      }\n    });\n\n  configCmd\n    .command('reset')\n    .description('Reset configuration to defaults')\n    .option('--force', 'skip confirmation')\n    .action(async options => {\n      const { config, formatter } = getComponents();\n\n      if (!options.force) {\n        const { confirm } = await inquirer.prompt([\n          {\n            type: 'confirm',\n            name: 'confirm',\n            message: 'Are you sure you want to reset configuration to defaults?',\n            default: false,\n          },\n        ]);\n\n        if (!confirm) {\n          formatter.info('Reset cancelled');\n          return;\n        }\n      }\n\n      try {\n        config.reset();\n        config.save();\n        formatter.success('Configuration reset to defaults');\n      } catch (error) {\n        formatter.error(\n          `Failed to reset configuration: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  configCmd\n    .command('test')\n    .description('Test connection to server')\n    .action(async () => {\n      const { config, formatter, apiClient } = getComponents();\n\n      if (!config.exists()) {\n        formatter.error('No configuration found. Run \"kanban config init\" first');\n        process.exit(1);\n      }\n\n      const validation = config.validate();\n      if (!validation.valid) {\n        formatter.error('Configuration is invalid:');\n        validation.errors.forEach(error => formatter.error(`  ${error}`));\n        process.exit(1);\n      }\n\n      formatter.info(`Testing connection to ${config.getServerUrl()}...`);\n\n      try {\n        const connected = await apiClient.testConnection();\n\n        if (connected) {\n          formatter.success('✓ Connection successful');\n\n          // Get detailed health info\n          try {\n            const health = await apiClient.getHealth();\n            formatter.info('Server information:');\n            formatter.output(health);\n          } catch (error) {\n            formatter.warn('Could not get detailed server information');\n          }\n        } else {\n          formatter.error('✗ Connection failed');\n          process.exit(1);\n        }\n      } catch (error) {\n        formatter.error(\n          `✗ Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/context.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":20,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":20,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":27,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":29,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .detailed on an `any` value.","line":29,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .activeTasks on an `any` value.","line":33,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1221,1259],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .activeTasks on an `any` value.","line":35,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blockedTasks on an `any` value.","line":41,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1514,1553],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blockedTasks on an `any` value.","line":43,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .upcomingDeadlines on an `any` value.","line":49,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1797,1841],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .upcomingDeadlines on an `any` value.","line":51,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insights on an `any` value.","line":57,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2102,2139],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":59,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":59,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insights on an `any` value.","line":59,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2329,2378],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .summary on an `any` value.","line":67,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2425,2454],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .summary on an `any` value.","line":68,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .statistics on an `any` value.","line":71,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2516,2548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":73,"column":28,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":73,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .statistics on an `any` value.","line":73,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2638,2672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":74,"column":40,"nodeType":"Identifier","messageId":"invalidType","endLine":74,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .recommendations on an `any` value.","line":78,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2755,2792],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":80,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .recommendations on an `any` value.","line":80,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":104,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":104,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3591,3594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3591,3594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3716,3752],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .overview on an `any` value.","line":113,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3796,3826],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .overview on an `any` value.","line":114,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3837,3853],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .progress on an `any` value.","line":118,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3907,3944],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":120,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":120,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .progress on an `any` value.","line":120,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4028,4062],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":121,"column":38,"nodeType":"Identifier","messageId":"invalidType","endLine":121,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4087,4103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .recentActivity on an `any` value.","line":126,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4163,4198],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":128,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":128,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .recentActivity on an `any` value.","line":128,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4251,4254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4251,4254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":129,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .date on an `any` value.","line":129,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":71},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4361,4377],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includeMetrics on an `any` value.","line":134,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .metrics on an `any` value.","line":134,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4456,4495],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .metrics on an `any` value.","line":136,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .keyInsights on an `any` value.","line":139,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4597,4629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":141,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":141,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .keyInsights on an `any` value.","line":141,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":163,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":163,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5403,5406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5403,5406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5549,5610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":170,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":172,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5661,5698],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":173,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5709,5725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":177,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":177,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5826,5858],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":179,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6033,6049],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blockers on an `any` value.","line":186,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blockers on an `any` value.","line":186,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6142,6170],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":188,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":188,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blockers on an `any` value.","line":188,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6220,6223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6220,6223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":189,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":189,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6310,6326],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .related on an `any` value.","line":194,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .relatedTasks on an `any` value.","line":194,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6407,6440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .relatedTasks on an `any` value.","line":196,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":196,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6623,6639],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .history on an `any` value.","line":203,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .history on an `any` value.","line":203,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6715,6747],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":205,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":205,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .history on an `any` value.","line":205,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6794,6797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6794,6797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .date on an `any` value.","line":206,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":206,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6897,6913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .aiInsights on an `any` value.","line":211,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6973,7004],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":213,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .aiInsights on an `any` value.","line":213,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .suggestions on an `any` value.","line":218,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7187,7220],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":220,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":220,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .suggestions on an `any` value.","line":220,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":242,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":242,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7988,7991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7988,7991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insights on an `any` value.","line":244,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":244,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8116,8161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .productivity on an `any` value.","line":251,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .productivityInsights on an `any` value.","line":251,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8241,8282],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":253,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":253,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .productivityInsights on an `any` value.","line":253,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":253,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8424,8440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .bottlenecks on an `any` value.","line":259,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .bottlenecks on an `any` value.","line":259,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8520,8562],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":261,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":261,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .bottlenecks on an `any` value.","line":261,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8614,8617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8614,8617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":262,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .impact on an `any` value.","line":262,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":85},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8738,8754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8774,8810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":268,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":268,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insights on an `any` value.","line":268,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":268,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .actionableRecommendations on an `any` value.","line":272,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":272,"endColumn":46},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8981,9029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":274,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":274,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .actionableRecommendations on an `any` value.","line":274,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":274,"endColumn":44}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":127,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport type { CliComponents } from '../types';\n\nexport function registerContextCommands(program: Command): void {\n  const contextCmd = program.command('context').alias('ctx').description('AI context and insights');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  contextCmd\n    .command('show')\n    .description('Show current work context')\n    .option('-d, --detailed', 'show detailed context information')\n    .option('--format <type>', 'output format: summary, detailed, raw', 'summary')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Generating current work context...');\n        const context = (await apiClient.getContext()) as any;\n\n        if (!context) {\n          formatter.info('No context available');\n          return;\n        }\n\n        if (options.format === 'raw') {\n          formatter.output(context);\n        } else if (options.format === 'detailed' || options.detailed) {\n          // Display detailed context\n          formatter.success('Current Work Context');\n\n          if (context.activeTasks) {\n            console.log('\\n--- Active Tasks ---');\n            formatter.output(context.activeTasks, {\n              fields: ['id', 'title', 'priority', 'status'],\n              headers: ['ID', 'Title', 'Priority', 'Status'],\n            });\n          }\n\n          if (context.blockedTasks) {\n            console.log('\\n--- Blocked Tasks ---');\n            formatter.output(context.blockedTasks, {\n              fields: ['id', 'title', 'blockedBy'],\n              headers: ['ID', 'Title', 'Blocked By'],\n            });\n          }\n\n          if (context.upcomingDeadlines) {\n            console.log('\\n--- Upcoming Deadlines ---');\n            formatter.output(context.upcomingDeadlines, {\n              fields: ['id', 'title', 'dueDate', 'daysLeft'],\n              headers: ['ID', 'Title', 'Due Date', 'Days Left'],\n            });\n          }\n\n          if (context.insights) {\n            console.log('\\n--- AI Insights ---');\n            context.insights.forEach((insight: string) => {\n              formatter.info(`• ${insight}`);\n            });\n          }\n        } else {\n          // Summary format\n          console.log('📋 Current Work Context Summary\\n');\n\n          if (context.summary) {\n            console.log(context.summary);\n          }\n\n          if (context.statistics) {\n            console.log('\\n📊 Statistics:');\n            Object.entries(context.statistics).forEach(([key, value]) => {\n              console.log(`  ${key}: ${value}`);\n            });\n          }\n\n          if (context.recommendations) {\n            console.log('\\n💡 Recommendations:');\n            context.recommendations.forEach((rec: string) => {\n              formatter.info(`• ${rec}`);\n            });\n          }\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get context: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  contextCmd\n    .command('summary')\n    .alias('project')\n    .description('Get project summary')\n    .option('--include-metrics', 'include performance metrics')\n    .option('--timeframe <days>', 'timeframe for analysis (days)', '30')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Generating project summary...');\n        const summary = (await apiClient.getProjectSummary()) as any;\n\n        if (!summary) {\n          formatter.info('No project summary available');\n          return;\n        }\n\n        console.log('📊 Project Summary\\n');\n\n        if (summary.overview) {\n          console.log(summary.overview);\n          console.log('');\n        }\n\n        if (summary.progress) {\n          console.log('📈 Progress Overview:');\n          Object.entries(summary.progress).forEach(([key, value]) => {\n            console.log(`  ${key}: ${value}`);\n          });\n          console.log('');\n        }\n\n        if (summary.recentActivity) {\n          console.log('🔄 Recent Activity:');\n          summary.recentActivity.forEach((activity: any) => {\n            formatter.info(`• ${activity.description} (${activity.date})`);\n          });\n          console.log('');\n        }\n\n        if (options.includeMetrics && summary.metrics) {\n          console.log('📊 Performance Metrics:');\n          formatter.output(summary.metrics);\n        }\n\n        if (summary.keyInsights) {\n          console.log('🔍 Key Insights:');\n          summary.keyInsights.forEach((insight: string) => {\n            formatter.info(`• ${insight}`);\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get project summary: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  contextCmd\n    .command('task <id>')\n    .description('Get AI context for a specific task')\n    .option('--related', 'include related tasks')\n    .option('--history', 'include task history')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info(`Generating context for task ${id}...`);\n        const taskContext = (await apiClient.getTaskContext(id)) as any;\n\n        if (!taskContext) {\n          formatter.error(`No context available for task ${id}`);\n          process.exit(1);\n        }\n\n        console.log(`🎯 Task Context: ${taskContext.title || id}\\n`);\n\n        if (taskContext.description) {\n          console.log(taskContext.description);\n          console.log('');\n        }\n\n        if (taskContext.dependencies && taskContext.dependencies.length > 0) {\n          console.log('🔗 Dependencies:');\n          formatter.output(taskContext.dependencies, {\n            fields: ['id', 'title', 'status'],\n            headers: ['ID', 'Title', 'Status'],\n          });\n          console.log('');\n        }\n\n        if (taskContext.blockers && taskContext.blockers.length > 0) {\n          console.log('🚫 Blockers:');\n          taskContext.blockers.forEach((blocker: any) => {\n            formatter.warn(`• ${blocker.description}`);\n          });\n          console.log('');\n        }\n\n        if (options.related && taskContext.relatedTasks) {\n          console.log('🔄 Related Tasks:');\n          formatter.output(taskContext.relatedTasks, {\n            fields: ['id', 'title', 'similarity'],\n            headers: ['ID', 'Title', 'Similarity'],\n          });\n          console.log('');\n        }\n\n        if (options.history && taskContext.history) {\n          console.log('📜 Task History:');\n          taskContext.history.forEach((event: any) => {\n            formatter.info(`• ${event.date}: ${event.description}`);\n          });\n          console.log('');\n        }\n\n        if (taskContext.aiInsights) {\n          console.log('🤖 AI Insights:');\n          taskContext.aiInsights.forEach((insight: string) => {\n            formatter.info(`• ${insight}`);\n          });\n        }\n\n        if (taskContext.suggestions) {\n          console.log('\\n💡 Suggestions:');\n          taskContext.suggestions.forEach((suggestion: string) => {\n            formatter.success(`• ${suggestion}`);\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get task context: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  contextCmd\n    .command('insights')\n    .description('Get AI insights about work patterns')\n    .option('--productivity', 'focus on productivity insights')\n    .option('--bottlenecks', 'identify bottlenecks')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Analyzing work patterns...');\n        const context = (await apiClient.getContext()) as any;\n\n        if (!context?.insights) {\n          formatter.info('No insights available');\n          return;\n        }\n\n        console.log('🔍 AI Work Pattern Insights\\n');\n\n        if (options.productivity && context.productivityInsights) {\n          console.log('📈 Productivity Insights:');\n          context.productivityInsights.forEach((insight: string) => {\n            formatter.success(`• ${insight}`);\n          });\n          console.log('');\n        }\n\n        if (options.bottlenecks && context.bottlenecks) {\n          console.log('🚧 Identified Bottlenecks:');\n          context.bottlenecks.forEach((bottleneck: any) => {\n            formatter.warn(`• ${bottleneck.description} (Impact: ${bottleneck.impact})`);\n          });\n          console.log('');\n        }\n\n        console.log('💡 General Insights:');\n        context.insights.forEach((insight: string) => {\n          formatter.info(`• ${insight}`);\n        });\n\n        if (context.actionableRecommendations) {\n          console.log('\\n🎯 Actionable Recommendations:');\n          context.actionableRecommendations.forEach((rec: string) => {\n            formatter.success(`• ${rec}`);\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get insights: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/dashboard-demo.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":12,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":12,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .listThemes on an `any` value.","line":14,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":14,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[589,649],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[699,746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[763,856],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[881,937],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":24,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":24,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .layout on an `any` value.","line":24,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":34},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'displayOverviewDemo' was used before it was defined.","line":28,"column":9,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":28,"endColumn":28},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'displayVelocityDemo' was used before it was defined.","line":31,"column":9,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":31,"endColumn":28},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'displayPersonalDemo' was used before it was defined.","line":34,"column":9,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":34,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1241,1357],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1369,1515],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1564,1620],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1645,1694],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1697,1730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1733,1801],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1804,1844],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1847,1883],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1911,1962],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1965,2005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2008,2045],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2048,2087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2090,2127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2152,2201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2204,2263],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2266,2329],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2332,2393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2396,2455],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2458,2512],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2557,2614],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2637,2699],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2702,2753],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2756,2807],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2810,2852],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2870,2919],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2922,2982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2985,3045],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3048,3107],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3110,3160],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3183,3230],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3233,3276],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3279,3320],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3323,3369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3372,3415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3460,3519],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3546,3597],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3600,3640],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3643,3690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3693,3746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3769,3819],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3822,3877],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3880,3923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3926,3967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3970,4013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4036,4083],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4086,4132],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4135,4187],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4190,4224],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4227,4278],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4301,4351],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4354,4419],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Command } from 'commander';\nimport chalk from 'chalk';\nimport { getThemeNames } from '../ui/themes/dashboard-themes';\n\n/**\n * Simple dashboard demo command (without blessed-contrib dependencies)\n */\nexport const dashboardDemoCommand = new Command('dashboard-demo')\n  .description('Demo the dashboard functionality (text-based)')\n  .option('-l, --layout <layout>', 'Layout to display: overview, velocity, or personal', 'overview')\n  .option('--list-themes', 'List available themes')\n  .action(async options => {\n    // Handle list themes option\n    if (options.listThemes) {\n      console.log(chalk.cyan('\\n🎨 Available Dashboard Themes:'));\n      getThemeNames().forEach(theme => {\n        console.log(`  ${chalk.yellow('•')} ${theme}`);\n      });\n      console.log(chalk.gray('\\nUse these theme names with \"kanban dashboard --theme <theme>\"\\n'));\n      return;\n    }\n    console.log(chalk.cyan('\\n🚀 Kanban Dashboard Demo\\n'));\n\n    const layout = options.layout || 'overview';\n\n    switch (layout) {\n      case 'overview':\n        displayOverviewDemo();\n        break;\n      case 'velocity':\n        displayVelocityDemo();\n        break;\n      case 'personal':\n        displayPersonalDemo();\n        break;\n      default:\n        console.log(\n          chalk.yellow(`Unknown layout: ${layout}. Available: overview, velocity, personal`)\n        );\n    }\n\n    console.log(\n      chalk.gray(\n        '\\nNote: This is a text-based demo. Use \"kanban dashboard\" for full interactive experience.'\n      )\n    );\n  });\n\nfunction displayOverviewDemo(): void {\n  console.log(chalk.bold.blue('📊 Overview Dashboard\\n'));\n\n  // Task statistics\n  console.log(chalk.yellow('📋 Task Statistics:'));\n  console.log('  Total Tasks: 45');\n  console.log('  Todo: 18 | In Progress: 12 | Done: 13 | Blocked: 2');\n  console.log('  Completion Rate: 68.8%');\n  console.log('  Overdue: 3 tasks\\n');\n\n  // Priority breakdown\n  console.log(chalk.yellow('⚡ Priority Breakdown:'));\n  console.log('  P1 (Critical): 8 tasks');\n  console.log('  P2 (High): 15 tasks');\n  console.log('  P3 (Medium): 18 tasks');\n  console.log('  P4 (Low): 4 tasks\\n');\n\n  // Recent activity\n  console.log(chalk.yellow('🕒 Recent Activity:'));\n  console.log('  14:32 - Task completed: User Auth (Alice)');\n  console.log('  14:15 - New task created: Fix login bug (Bob)');\n  console.log('  13:45 - Task moved to In Progress (Charlie)');\n  console.log('  13:20 - Comment added to TASK-123 (Diana)');\n  console.log('  12:55 - Task assigned to Alice (Bob)');\n}\n\nfunction displayVelocityDemo(): void {\n  console.log(chalk.bold.green('📈 Velocity Dashboard\\n'));\n\n  // Team velocity\n  console.log(chalk.yellow('📊 Team Velocity (Last 8 Weeks):'));\n  console.log('  W1: 12 | W2: 15 | W3: 18 | W4: 14');\n  console.log('  W5: 20 | W6: 16 | W7: 22 | W8: 19');\n  console.log('  Average: 17 tasks/week\\n');\n\n  // Burndown\n  console.log(chalk.yellow('🔥 Sprint Burndown:'));\n  console.log('  Day 1: 45/45 | Day 2: 42/40 | Day 3: 38/35');\n  console.log('  Day 4: 35/30 | Day 5: 30/25 | Day 6: 28/20');\n  console.log('  Day 7: 25/15 | Day 8: 20/10 | Day 9: 15/5');\n  console.log('  Day 10: 12/0 (Remaining/Ideal)\\n');\n\n  // Team capacity\n  console.log(chalk.yellow('👥 Team Capacity:'));\n  console.log('  Alice: 8 tasks (85% load)');\n  console.log('  Bob: 6 tasks (70% load)');\n  console.log('  Charlie: 10 tasks (95% load)');\n  console.log('  Diana: 7 tasks (75% load)');\n}\n\nfunction displayPersonalDemo(): void {\n  console.log(chalk.bold.magenta('👤 Personal Dashboard\\n'));\n\n  // Personal progress\n  console.log(chalk.yellow('📈 Personal Progress:'));\n  console.log('  Sprint Completion: 85%');\n  console.log('  Tasks Completed This Week: 12');\n  console.log('  Average Daily Focus Time: 3 hours\\n');\n\n  // Current tasks\n  console.log(chalk.yellow('📝 My Current Tasks:'));\n  console.log('  [In Progress] Complete user auth (P1)');\n  console.log('  [Todo] Fix login bug (P1)');\n  console.log('  [Done] Update docs (P3)');\n  console.log('  [Todo] Code review (P2)\\n');\n\n  // Today's focus\n  console.log(chalk.yellow(\"🎯 Today's Focus:\"));\n  console.log('  • Complete OAuth integration');\n  console.log('  • Write unit tests for auth module');\n  console.log('  • Review PR #123');\n  console.log('  • Prepare demo for stakeholders\\n');\n\n  // Time tracking\n  console.log(chalk.yellow(\"⏰ This Week's Hours:\"));\n  console.log('  Mon: 8h | Tue: 7h | Wed: 9h | Thu: 6h | Fri: 8h');\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/dashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiClient' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CliComponents' is defined but never used.","line":6,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":18,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":18,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .listThemes on an `any` value.","line":21,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[947,1005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1059,1106],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":31,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":31,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .theme on an `any` value.","line":31,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1277,1337],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .theme on an `any` value.","line":32,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1346,1421],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1453,1513],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":40,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":40,"endColumn":51,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1587,1587],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":40,"column":35,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":40,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .refresh on an `any` value.","line":40,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":41,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .theme on an `any` value.","line":41,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .autoRefresh on an `any` value.","line":42,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .layout on an `any` value.","line":51,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `\"overview\" | \"velocity\" | \"personal\"`.","line":55,"column":34,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":55,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .layout on an `any` value.","line":55,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2125,2206],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .layout on an `any` value.","line":58,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":58,"endColumn":70},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2323,2403],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2432,2569],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":79,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":79,"endColumn":22},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":89,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":89,"endColumn":22},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":99,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":99,"endColumn":22}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Command } from 'commander';\nimport chalk from 'chalk';\nimport { DashboardManager } from '../utils/dashboard-manager';\nimport type { ApiClient } from '../client';\nimport { getThemeNames } from '../ui/themes/dashboard-themes';\nimport type { CliComponents } from '../types';\n\n/**\n * Dashboard command for launching terminal dashboards\n */\nexport const dashboardCommand = new Command('dashboard')\n  .description('Launch interactive terminal dashboard')\n  .option('-l, --layout <layout>', 'Initial layout: overview, velocity, or personal', 'overview')\n  .option('-r, --refresh <seconds>', 'Auto-refresh interval in seconds', '30')\n  .option('-t, --theme <theme>', `Dashboard theme: ${getThemeNames().join(', ')}`, 'dark')\n  .option('--no-auto-refresh', 'Disable auto-refresh')\n  .option('--list-themes', 'List available themes')\n  .action(async options => {\n    try {\n      // Handle list themes option\n      if (options.listThemes) {\n        console.log(chalk.cyan('🎨 Available Dashboard Themes:'));\n        getThemeNames().forEach(theme => {\n          console.log(`  ${chalk.yellow('•')} ${theme}`);\n        });\n        return;\n      }\n\n      // Validate theme\n      const availableThemes = getThemeNames();\n      if (!availableThemes.includes(options.theme)) {\n        console.error(chalk.red(`Invalid theme: ${options.theme}`));\n        console.log(chalk.yellow('Available themes:'), availableThemes.join(', '));\n        return;\n      }\n\n      console.log(chalk.cyan('🚀 Launching Kanban Dashboard...'));\n\n      const config = {\n        refreshInterval: parseInt(options.refresh) * 1000,\n        theme: options.theme,\n        autoRefresh: options.autoRefresh !== false,\n        showHelp: true,\n      };\n\n      // Get API client from global components if available\n      const apiClient = global.cliComponents?.apiClient;\n      const dashboard = new DashboardManager(config, apiClient);\n\n      // Set initial layout\n      switch (options.layout) {\n        case 'overview':\n        case 'velocity':\n        case 'personal':\n          dashboard.switchLayout(options.layout);\n          break;\n        default:\n          console.warn(chalk.yellow(`Unknown layout: ${options.layout}. Using overview.`));\n          dashboard.switchLayout('overview');\n      }\n\n      // Start the dashboard\n      dashboard.start();\n\n      console.log(chalk.green('Dashboard started! Press \"h\" for help, \"q\" to quit.'));\n    } catch (error) {\n      console.error(\n        chalk.red('Failed to start dashboard:'),\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      process.exit(1);\n    }\n  });\n\n// Subcommands for specific dashboard types\ndashboardCommand\n  .command('overview')\n  .description('Launch overview dashboard with task statistics')\n  .action(async () => {\n    const apiClient = global.cliComponents?.apiClient;\n    const dashboard = new DashboardManager({}, apiClient);\n    dashboard.switchLayout('overview');\n    dashboard.start();\n  });\n\ndashboardCommand\n  .command('velocity')\n  .description('Launch velocity dashboard with team performance metrics')\n  .action(async () => {\n    const apiClient = global.cliComponents?.apiClient;\n    const dashboard = new DashboardManager({}, apiClient);\n    dashboard.switchLayout('velocity');\n    dashboard.start();\n  });\n\ndashboardCommand\n  .command('personal')\n  .description('Launch personal productivity dashboard')\n  .action(async () => {\n    const apiClient = global.cliComponents?.apiClient;\n    const dashboard = new DashboardManager({}, apiClient);\n    dashboard.switchLayout('personal');\n    dashboard.start();\n  });\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/database.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseOptimizationResult' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseVacuumResult' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseAnalysisResult' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseStats' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseIntegrityResult' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DatabaseRepairResult' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Migration' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MigrationResult' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":33,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .verbose on an `any` value.","line":33,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":57,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":57,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":58,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tables on an `any` value.","line":129,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":129,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .indexes on an `any` value.","line":130,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .performance on an `any` value.","line":131,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tables on an `any` value.","line":146,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4546,4588],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .indexes on an `any` value.","line":155,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4869,4911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .performance on an `any` value.","line":164,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":53},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5192,5237],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":191,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .repair on an `any` value.","line":191,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":205,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":205,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6476,6514],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":229,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":232,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":239,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":248,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":248,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .backup on an `any` value.","line":248,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .to on an `any` value.","line":309,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":309,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":310,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":310,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .to on an `any` value.","line":310,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":310,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":342,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":345,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":352,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .to on an `any` value.","line":361,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":362,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":362,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .to on an `any` value.","line":362,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type {\n  CliComponents,\n  DatabaseOptimizationResult,\n  DatabaseVacuumResult,\n  DatabaseAnalysisResult,\n  DatabaseStats,\n  DatabaseIntegrityResult,\n  DatabaseRepairResult,\n  Migration,\n  MigrationResult,\n} from '../types';\n\nexport function registerDatabaseCommands(program: Command): void {\n  const dbCmd = program.command('db').description('Database management commands');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  dbCmd\n    .command('optimize')\n    .description('Optimize database performance')\n    .option('-v, --verbose', 'verbose output')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Optimizing database...');\n\n        const result = await apiClient.request('/api/database/optimize', {\n          method: 'POST',\n          body: { verbose: options.verbose || false },\n        });\n\n        formatter.success('Database optimization completed');\n        formatter.output(result, {\n          fields: ['operation', 'duration', 'before', 'after', 'improvement'],\n          headers: ['Operation', 'Duration', 'Before', 'After', 'Improvement'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to optimize database: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dbCmd\n    .command('vacuum')\n    .description('Vacuum database to reclaim space')\n    .option('-f, --force', 'skip confirmation')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: 'Vacuum database? This may take some time.',\n              default: true,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Vacuum cancelled');\n            return;\n          }\n        }\n\n        formatter.info('Vacuuming database...');\n\n        const result = await apiClient.request('/api/database/vacuum', {\n          method: 'POST',\n        });\n\n        formatter.success('Database vacuum completed');\n        formatter.output(result, {\n          fields: ['sizeBefore', 'sizeAfter', 'spaceReclaimed', 'duration'],\n          headers: ['Size Before', 'Size After', 'Space Reclaimed', 'Duration'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to vacuum database: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dbCmd\n    .command('analyze')\n    .description('Analyze database and update statistics')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Analyzing database...');\n\n        const result = await apiClient.request('/api/database/analyze', {\n          method: 'POST',\n        });\n\n        formatter.success('Database analysis completed');\n        formatter.output(result, {\n          fields: ['table', 'rowCount', 'indexCount', 'avgRowSize', 'totalSize'],\n          headers: ['Table', 'Rows', 'Indexes', 'Avg Row Size', 'Total Size'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to analyze database: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dbCmd\n    .command('stats')\n    .description('Show database statistics')\n    .option('--tables', 'include table statistics')\n    .option('--indexes', 'include index statistics')\n    .option('--performance', 'include performance metrics')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {};\n        if (options.tables) params.tables = 'true';\n        if (options.indexes) params.indexes = 'true';\n        if (options.performance) params.performance = 'true';\n\n        const stats = await apiClient.request('/api/database/stats', { params });\n\n        formatter.info('Database Statistics:');\n\n        // General stats\n        if (stats.general) {\n          formatter.output(stats.general, {\n            fields: ['metric', 'value'],\n            headers: ['Metric', 'Value'],\n          });\n        }\n\n        // Table stats\n        if (stats.tables && options.tables) {\n          console.log('\\n--- Table Statistics ---');\n          formatter.output(stats.tables, {\n            fields: ['name', 'rowCount', 'size', 'lastModified'],\n            headers: ['Table', 'Rows', 'Size', 'Last Modified'],\n          });\n        }\n\n        // Index stats\n        if (stats.indexes && options.indexes) {\n          console.log('\\n--- Index Statistics ---');\n          formatter.output(stats.indexes, {\n            fields: ['name', 'table', 'size', 'usage'],\n            headers: ['Index', 'Table', 'Size', 'Usage'],\n          });\n        }\n\n        // Performance metrics\n        if (stats.performance && options.performance) {\n          console.log('\\n--- Performance Metrics ---');\n          formatter.output(stats.performance, {\n            fields: ['metric', 'value', 'unit'],\n            headers: ['Metric', 'Value', 'Unit'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get database stats: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dbCmd\n    .command('check')\n    .description('Check database integrity')\n    .option('--repair', 'attempt to repair corruption if found')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Checking database integrity...');\n\n        const result = await apiClient.request('/api/database/check', {\n          method: 'POST',\n          body: { repair: options.repair || false },\n        });\n\n        if (result.healthy) {\n          formatter.success('Database integrity check passed');\n        } else {\n          formatter.error('Database integrity issues found');\n        }\n\n        formatter.output(result, {\n          fields: ['check', 'status', 'details'],\n          headers: ['Check', 'Status', 'Details'],\n        });\n\n        if (result.issues && result.issues.length > 0) {\n          console.log('\\n--- Issues Found ---');\n          formatter.output(result.issues, {\n            fields: ['type', 'severity', 'message', 'suggestion'],\n            headers: ['Type', 'Severity', 'Message', 'Suggestion'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to check database: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dbCmd\n    .command('repair')\n    .description('Repair database corruption')\n    .option('-f, --force', 'skip confirmation')\n    .option('--backup', 'create backup before repair')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          formatter.warn('WARNING: Database repair may cause data loss!');\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: 'Proceed with database repair?',\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Repair cancelled');\n            return;\n          }\n        }\n\n        const repairData = {\n          createBackup: options.backup || false,\n        };\n\n        formatter.info('Repairing database...');\n\n        const result = await apiClient.request('/api/database/repair', {\n          method: 'POST',\n          body: repairData,\n        });\n\n        formatter.success('Database repair completed');\n        formatter.output(result, {\n          fields: ['operation', 'status', 'recordsFixed', 'backupCreated'],\n          headers: ['Operation', 'Status', 'Records Fixed', 'Backup Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to repair database: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Migration commands\n  const migrateCmd = dbCmd.command('migrate').description('Database migration management');\n\n  migrateCmd\n    .command('status')\n    .description('Show migration status')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const migrations = await apiClient.request('/api/database/migrations/status');\n\n        if (!migrations || migrations.length === 0) {\n          formatter.info('No migrations found');\n          return;\n        }\n\n        formatter.output(migrations, {\n          fields: ['name', 'version', 'status', 'appliedAt'],\n          headers: ['Migration', 'Version', 'Status', 'Applied At'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to get migration status: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  migrateCmd\n    .command('up')\n    .description('Run pending migrations')\n    .option('--to <version>', 'migrate to specific version')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const migrateData: { targetVersion?: string } = {};\n        if (options.to) {\n          migrateData.targetVersion = options.to;\n        }\n\n        formatter.info('Running migrations...');\n\n        const result = await apiClient.request('/api/database/migrations/up', {\n          method: 'POST',\n          body: migrateData,\n        });\n\n        formatter.success('Migrations completed');\n        formatter.output(result, {\n          fields: ['migration', 'status', 'duration'],\n          headers: ['Migration', 'Status', 'Duration'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to run migrations: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  migrateCmd\n    .command('down')\n    .description('Rollback migrations')\n    .option('--to <version>', 'rollback to specific version')\n    .option('-f, --force', 'skip confirmation')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          formatter.warn('WARNING: Rolling back migrations may cause data loss!');\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: 'Proceed with migration rollback?',\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Rollback cancelled');\n            return;\n          }\n        }\n\n        const rollbackData: { targetVersion?: string } = {};\n        if (options.to) {\n          rollbackData.targetVersion = options.to;\n        }\n\n        formatter.info('Rolling back migrations...');\n\n        const result = await apiClient.request('/api/database/migrations/down', {\n          method: 'POST',\n          body: rollbackData,\n        });\n\n        formatter.success('Migration rollback completed');\n        formatter.output(result, {\n          fields: ['migration', 'status', 'duration'],\n          headers: ['Migration', 'Status', 'Duration'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to rollback migrations: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  migrateCmd\n    .command('create <name>')\n    .description('Create a new migration')\n    .action(async (name: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const migration = await apiClient.request('/api/database/migrations/create', {\n          method: 'POST',\n          body: { name },\n        });\n\n        formatter.success(`Migration created: ${migration.filename}`);\n        formatter.output(migration, {\n          fields: ['name', 'version', 'filename', 'createdAt'],\n          headers: ['Name', 'Version', 'Filename', 'Created At'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to create migration: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/export.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExportResponse' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":37,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boards on an `any` value.","line":37,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":38,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":38,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":38,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":38,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":39,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":39,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":39,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":40,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":40,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .notes on an `any` value.","line":40,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boardIds on an `any` value.","line":43,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":44,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":44,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boardIds on an `any` value.","line":44,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":50,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":50,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pretty on an `any` value.","line":51,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":85,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boards on an `any` value.","line":85,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":86,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":86,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":87,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":87,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":88,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .notes on an `any` value.","line":88,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":117,"column":39,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":117,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | Blob`.","line":128,"column":47,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":128,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .conflict on an `any` value.","line":128,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":128,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .validateOnly on an `any` value.","line":130,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .validateOnly on an `any` value.","line":134,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .validateOnly on an `any` value.","line":137,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":33}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type {\n  CliComponents,\n  ExportParams,\n  ExportResponse,\n  ImportValidationResponse,\n  ImportResponse,\n} from '../types';\n\nexport function registerExportCommands(program: Command): void {\n  const exportCmd = program.command('export').description('Export kanban data');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n  const importCmd = program.command('import').description('Import kanban data');\n\n  // Export to JSON\n  exportCmd\n    .command('json [file]')\n    .description('Export data to JSON format')\n    .option('--boards', 'Include boards', true)\n    .option('--tasks', 'Include tasks', true)\n    .option('--tags', 'Include tags', true)\n    .option('--notes', 'Include notes', true)\n    .option('--board-ids <ids...>', 'Filter by board IDs')\n    .option('--pretty', 'Pretty print JSON', true)\n    .action(async (file, options) => {\n      try {\n        const { apiClient, formatter } = getComponents();\n\n        formatter.info('Exporting data to JSON...');\n\n        const params: ExportParams = {\n          format: 'json',\n          includeBoards: options.boards,\n          includeTasks: options.tasks,\n          includeTags: options.tags,\n          includeNotes: options.notes,\n        };\n\n        if (options.boardIds) {\n          params.boardIds = options.boardIds;\n        }\n\n        const response = await apiClient.get('/export', { params });\n\n        if (file) {\n          const outputPath = path.resolve(file);\n          const jsonData = options.pretty\n            ? JSON.stringify(response.data, null, 2)\n            : JSON.stringify(response.data);\n\n          await fs.writeFile(outputPath, jsonData);\n          formatter.success(`Data exported to ${outputPath}`);\n        } else {\n          formatter.output(JSON.stringify(response.data, null, 2));\n        }\n      } catch (error) {\n        const { formatter } = getComponents();\n        formatter.error(\n          `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Export to CSV\n  exportCmd\n    .command('csv <directory>')\n    .description('Export data to CSV files')\n    .option('--boards', 'Include boards', true)\n    .option('--tasks', 'Include tasks', true)\n    .option('--tags', 'Include tags', true)\n    .option('--notes', 'Include notes', true)\n    .action(async (_directory, options) => {\n      try {\n        const { apiClient, formatter } = getComponents();\n\n        formatter.info('Exporting data to CSV...');\n\n        const params: ExportParams = {\n          format: 'csv',\n          includeBoards: options.boards,\n          includeTasks: options.tasks,\n          includeTags: options.tags,\n          includeNotes: options.notes,\n        };\n\n        const response = await apiClient.get('/export', { params });\n\n        formatter.success('CSV export completed');\n        formatter.info(`Files: ${response.filePath}`);\n        formatter.info(`Items: ${response.itemCount}`);\n      } catch (error) {\n        const { formatter } = getComponents();\n        formatter.error(\n          `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Import from JSON\n  importCmd\n    .command('json <file>')\n    .description('Import data from JSON file')\n    .option('--validate-only', 'Only validate without importing')\n    .option('--conflict <resolution>', 'Conflict resolution (skip/overwrite/rename)', 'skip')\n    .action(async (file, options) => {\n      try {\n        const { apiClient, formatter } = getComponents();\n\n        formatter.info('Reading JSON file...');\n\n        const filePath = path.resolve(file);\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n\n        // Parse to validate JSON\n        JSON.parse(fileContent);\n\n        formatter.info('Uploading for import...');\n\n        const formData = new FormData();\n        formData.append('file', new Blob([fileContent]), path.basename(filePath));\n        formData.append('format', 'json');\n        formData.append('conflictResolution', options.conflict);\n\n        if (options.validateOnly) {\n          formData.append('validateOnly', 'true');\n        }\n\n        const endpoint = options.validateOnly ? '/import/validate' : '/import';\n        const response = await apiClient.post(endpoint, formData);\n\n        if (options.validateOnly) {\n          const validationData = response.data as ImportValidationResponse;\n          formatter.success('Validation completed');\n          formatter.info(`Valid: ${validationData.valid}`);\n          formatter.info(`Would import: ${validationData.wouldImport} items`);\n          formatter.info(`Would skip: ${validationData.wouldSkip} items`);\n\n          if (validationData.errors.length > 0) {\n            formatter.error('Validation errors:');\n            validationData.errors.forEach((err: string) => {\n              formatter.error(`  • ${err}`);\n            });\n          }\n        } else {\n          const importData = response.data as ImportResponse;\n          formatter.success('Import completed');\n          formatter.info(`Imported: ${importData.imported} items`);\n          formatter.info(`Skipped: ${importData.skipped} items`);\n\n          if (importData.errors.length > 0) {\n            formatter.error('Import errors:');\n            importData.errors.forEach((err: string) => {\n              formatter.error(`  • ${err}`);\n            });\n          }\n        }\n      } catch (error) {\n        const { formatter } = getComponents();\n        formatter.error(\n          `Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/interactive-view.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[443,446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[443,446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":18,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":18,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":18,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":20,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ctrl on an `any` value.","line":21,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":22,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":46,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":56,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":56,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":61,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":61,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":109,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":114,"column":20,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":114,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":114,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":126,"column":20,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":126,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":126,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":171,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sampleData on an `any` value.","line":262,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":38},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'fetchRealData' was used before it was defined.","line":262,"column":70,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":262,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .mode on an `any` value.","line":264,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .mode on an `any` value.","line":264,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7327,7401],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7442,7505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7512,7569],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":272,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":272,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .mode on an `any` value.","line":272,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":272,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7687,7755],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":280,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":280,"endColumn":29},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'fetchRealData' has no 'await' expression.","line":280,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":280,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { render, useApp, useInput } from 'ink';\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport TaskList, { type Task } from '../ui/components/TaskList';\nimport BoardView, { type Board, type Column } from '../ui/components/BoardView';\nimport StatusIndicator from '../ui/components/StatusIndicator';\n\ninterface InteractiveViewProps {\n  mode: 'tasks' | 'board';\n  data: any;\n}\n\nconst InteractiveView: React.FC<InteractiveViewProps> = ({ mode, data }) => {\n  const [currentView, setCurrentView] = useState<'tasks' | 'board' | 'help'>(mode);\n  const [statusMessage, setStatusMessage] = useState<string>('');\n  const [statusType, setStatusType] = useState<'info' | 'success' | 'error' | 'loading'>('info');\n  const { exit } = useApp();\n\n  useInput((input, key) => {\n    if (input === 'q' && !key.ctrl) {\n      exit();\n    } else if (input === '1') {\n      setCurrentView('tasks');\n      setStatusMessage('Switched to Task List view');\n      setStatusType('info');\n    } else if (input === '2') {\n      setCurrentView('board');\n      setStatusMessage('Switched to Board view');\n      setStatusType('info');\n    } else if (input === '?' || input === 'h') {\n      setCurrentView('help');\n      setStatusMessage('Showing help');\n      setStatusType('info');\n    } else if (input === 'r') {\n      setStatusMessage('Refreshing data...');\n      setStatusType('loading');\n      // In a real app, this would fetch fresh data\n      setTimeout(() => {\n        setStatusMessage('Data refreshed');\n        setStatusType('success');\n      }, 1000);\n    }\n  });\n\n  const handleTaskSelect = (task: Task) => {\n    setStatusMessage(`Selected task: ${task.title}`);\n    setStatusType('success');\n  };\n\n  const handleBoardTaskSelect = (task: Task, columnId: string) => {\n    setStatusMessage(`Selected task: ${task.title} in column ${columnId}`);\n    setStatusType('success');\n  };\n\n  const handleColumnSelect = (column: Column) => {\n    setStatusMessage(`Selected column: ${column.name} (${column.tasks.length} tasks)`);\n    setStatusType('info');\n  };\n\n  const renderHelp = () => (\n    <div>\n      <h2>{chalk.cyan('🎮 Interactive View Help')}</h2>\n      <br />\n\n      <h3>{chalk.yellow('Global Controls:')}</h3>\n      <p>\n        • <strong>1</strong> - Switch to Task List view\n      </p>\n      <p>\n        • <strong>2</strong> - Switch to Board view\n      </p>\n      <p>\n        • <strong>h</strong> or <strong>?</strong> - Show this help\n      </p>\n      <p>\n        • <strong>r</strong> - Refresh data\n      </p>\n      <p>\n        • <strong>q</strong> - Quit\n      </p>\n      <br />\n\n      <h3>{chalk.yellow('Task List Controls:')}</h3>\n      <p>\n        • <strong>↑/↓</strong> or <strong>j/k</strong> - Navigate tasks\n      </p>\n      <p>\n        • <strong>Enter</strong> - Select task\n      </p>\n      <br />\n\n      <h3>{chalk.yellow('Board Controls:')}</h3>\n      <p>\n        • <strong>←/→</strong> or <strong>h/l</strong> - Switch columns\n      </p>\n      <p>\n        • <strong>↑/↓</strong> or <strong>j/k</strong> - Navigate tasks\n      </p>\n      <p>\n        • <strong>Enter</strong> - Select task or column\n      </p>\n      <br />\n\n      <p>{chalk.gray('Press any key to return to previous view')}</p>\n    </div>\n  );\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'tasks':\n        return (\n          <TaskList\n            tasks={data.tasks || []}\n            title=\"Interactive Task List\"\n            onTaskSelect={handleTaskSelect}\n            showSelection={true}\n            maxHeight={15}\n            showStats={true}\n          />\n        );\n\n      case 'board':\n        return (\n          <BoardView\n            board={data.board || { id: '1', name: 'Sample Board', columns: [] }}\n            onTaskSelect={handleBoardTaskSelect}\n            onColumnSelect={handleColumnSelect}\n            showWIPLimits={true}\n            maxColumnHeight={10}\n            columnWidth={25}\n          />\n        );\n\n      case 'help':\n        return renderHelp();\n\n      default:\n        return <div>Unknown view</div>;\n    }\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <div style={{ marginBottom: 1 }}>\n        <h1>{chalk.bold.cyan('🚀 Kanban CLI Interactive Mode')}</h1>\n        <p>{chalk.gray(`Current view: ${currentView} | Press 'h' for help | Press 'q' to quit`)}</p>\n      </div>\n\n      {/* Status message */}\n      {statusMessage && (\n        <div style={{ marginBottom: 1 }}>\n          <StatusIndicator status={statusType} message={statusMessage} />\n        </div>\n      )}\n\n      {/* Main content */}\n      {renderCurrentView()}\n\n      {/* Footer */}\n      <div style={{ marginTop: 1 }}>\n        <p>{chalk.gray('─'.repeat(80))}</p>\n        <p>{chalk.gray('Interactive Kanban CLI - Press h for help, q to quit')}</p>\n      </div>\n    </div>\n  );\n};\n\n// Sample data generator\nconst generateSampleData = () => {\n  const sampleTasks: Task[] = [\n    {\n      id: 'TASK-001',\n      title: 'Implement user authentication',\n      status: 'in_progress',\n      priority: 'P1',\n      assignee: 'alice',\n      tags: ['backend', 'security'],\n      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n      id: 'TASK-002',\n      title: 'Design landing page',\n      status: 'todo',\n      priority: 'P2',\n      assignee: 'bob',\n      tags: ['frontend', 'design'],\n    },\n    {\n      id: 'TASK-003',\n      title: 'Set up CI/CD pipeline',\n      status: 'done',\n      priority: 'P1',\n      assignee: 'charlie',\n      tags: ['devops', 'automation'],\n    },\n    {\n      id: 'TASK-004',\n      title: 'Write API documentation',\n      status: 'blocked',\n      priority: 'P3',\n      assignee: 'diana',\n      tags: ['documentation', 'api'],\n    },\n    {\n      id: 'TASK-005',\n      title: 'Optimize database queries',\n      status: 'todo',\n      priority: 'P2',\n      assignee: 'eve',\n      tags: ['backend', 'performance'],\n    },\n  ];\n\n  const sampleBoard: Board = {\n    id: 'board-1',\n    name: 'Development Sprint',\n    description: 'Current sprint board for the development team',\n    columns: [\n      {\n        id: 'col-1',\n        name: 'Backlog',\n        tasks: sampleTasks.filter(t => t.status === 'todo'),\n        limit: 5,\n      },\n      {\n        id: 'col-2',\n        name: 'In Progress',\n        tasks: sampleTasks.filter(t => t.status === 'in_progress'),\n        limit: 3,\n      },\n      {\n        id: 'col-3',\n        name: 'Blocked',\n        tasks: sampleTasks.filter(t => t.status === 'blocked'),\n        limit: 2,\n      },\n      {\n        id: 'col-4',\n        name: 'Done',\n        tasks: sampleTasks.filter(t => t.status === 'done'),\n      },\n    ],\n  };\n\n  return {\n    tasks: sampleTasks,\n    board: sampleBoard,\n  };\n};\n\n// CLI command implementation\nexport const interactiveViewCommand = new Command('interactive')\n  .alias('ui')\n  .description('Launch interactive UI for tasks and boards')\n  .option('-m, --mode <mode>', 'Initial view mode: tasks or board', 'tasks')\n  .option('--sample-data', 'Use sample data for demo', false)\n  .action(async options => {\n    try {\n      // In a real implementation, this would fetch data from the API\n      const data = options.sampleData ? generateSampleData() : await fetchRealData();\n\n      if (options.mode !== 'tasks' && options.mode !== 'board') {\n        console.error(chalk.red('Error: Mode must be either \"tasks\" or \"board\"'));\n        process.exit(1);\n      }\n\n      console.log(chalk.cyan('\\n🚀 Starting interactive mode...\\n'));\n      console.log(chalk.gray('Press h for help, q to quit\\n'));\n\n      render(<InteractiveView mode={options.mode as 'tasks' | 'board'} data={data} />);\n    } catch (error) {\n      console.error(chalk.red('Error starting interactive mode:'), error);\n      process.exit(1);\n    }\n  });\n\n// Placeholder for real data fetching\nasync function fetchRealData() {\n  // This would connect to the actual API\n  // For now, return sample data\n  return generateSampleData();\n}\n\nexport default interactiveViewCommand;\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/notes.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":26,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":26,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":27,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sort on an `any` value.","line":27,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":28,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":28,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":31,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":31,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":31,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":31,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":32,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":32,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":32,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":32,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":33,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":35,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1318,1321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1318,1321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":37,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":61,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2076,2079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2076,2079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2910,2913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2910,2913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":92,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":92,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2997,3000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2997,3000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":95,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":104,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":112,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":112,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":122,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pin on an `any` value.","line":130,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":139,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":139,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":140,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":140,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":144,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":144,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":144,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":144,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":144,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":145,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":145,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":145,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":145,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":145,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":146,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":146,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":146,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":146,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":146,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":147,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":147,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .taskId on an `any` value.","line":147,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":147,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .taskId on an `any` value.","line":147,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":148,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":148,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":148,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pin on an `any` value.","line":148,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":148,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":151,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":151,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `CreateNoteRequest`.","line":151,"column":50,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":151,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4680,4683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4680,4683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":152,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":177,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5601,5604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5601,5604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5744,5747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5744,5747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":185,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":186,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":191,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":191,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":197,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":197,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":197,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":204,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":204,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":204,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":210,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":210,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":210,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":210,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":213,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":213,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":216,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":216,"column":30,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":216,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":216,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":216,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":217,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":217,"column":32,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":217,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":217,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .content on an `any` value.","line":217,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":218,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":218,"column":33,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":218,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":218,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":218,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":219,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":219,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":219,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .taskId on an `any` value.","line":219,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":219,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pin on an `any` value.","line":220,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":220,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .unpin on an `any` value.","line":221,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pinned on an `any` value.","line":221,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":224,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":224,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":229,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":229,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `UpdateNoteRequest`.","line":229,"column":61,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":229,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7306,7309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7306,7309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":249,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":250,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":250,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7940,7943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7940,7943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":256,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":263,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":260,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":260,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":292,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":292,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":292,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":292,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":292,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":293,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":293,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":293,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":293,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":295,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":295,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9321,9324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9321,9324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":297,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":102,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type { CliComponents } from '../types';\n\nexport function registerNoteCommands(program: Command): void {\n  const noteCmd = program.command('note').alias('n').description('Manage notes');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  noteCmd\n    .command('list')\n    .alias('ls')\n    .description('List notes')\n    .option('-c, --category <category>', 'filter by category')\n    .option('-t, --task <taskId>', 'filter by task ID')\n    .option('--pinned', 'show only pinned notes')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--sort <field>', 'sort by field', 'createdAt')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          limit: options.limit,\n          sort: options.sort,\n          order: options.order,\n        };\n\n        if (options.category) params.category = options.category;\n        if (options.task) params.taskId = options.task;\n        if (options.pinned) params.pinned = 'true';\n\n        const notes = (await apiClient.getNotes(params)) as any;\n\n        if (!notes || notes.length === 0) {\n          formatter.info('No notes found');\n          return;\n        }\n\n        formatter.output(notes, {\n          fields: ['id', 'title', 'category', 'pinned', 'taskId', 'createdAt'],\n          headers: ['ID', 'Title', 'Category', 'Pinned', 'Task ID', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list notes: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('show <id>')\n    .description('Show note details')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const note = (await apiClient.getNote(id)) as any;\n\n        if (!note) {\n          formatter.error(`Note ${id} not found`);\n          process.exit(1);\n        }\n\n        formatter.output(note);\n      } catch (error) {\n        formatter.error(\n          `Failed to get note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('add')\n    .alias('create')\n    .description('Add a new note')\n    .option('-t, --title <title>', 'note title')\n    .option('-c, --content <content>', 'note content')\n    .option('--category <category>', 'note category')\n    .option('--task <taskId>', 'link to task ID')\n    .option('--pin', 'pin the note')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      let noteData: any = {};\n\n      if (options.interactive || !options.title) {\n        const questions: any[] = [];\n\n        if (!options.title) {\n          questions.push({\n            type: 'input',\n            name: 'title',\n            message: 'Note title:',\n            validate: (input: string) => input.length > 0 || 'Title is required',\n          });\n        }\n\n        if (!options.content) {\n          questions.push({\n            type: 'editor',\n            name: 'content',\n            message: 'Note content:',\n          });\n        }\n\n        if (!options.category) {\n          questions.push({\n            type: 'list',\n            name: 'category',\n            message: 'Note category:',\n            choices: ['general', 'meeting', 'idea', 'bug', 'feature', 'docs'],\n            default: 'general',\n          });\n        }\n\n        if (!options.task) {\n          questions.push({\n            type: 'input',\n            name: 'taskId',\n            message: 'Link to task ID (optional):',\n          });\n        }\n\n        if (!options.pin) {\n          questions.push({\n            type: 'confirm',\n            name: 'pinned',\n            message: 'Pin this note?',\n            default: false,\n          });\n        }\n\n        const answers = await inquirer.prompt(questions);\n        noteData = { ...noteData, ...answers };\n      }\n\n      // Use command line options or answers\n      noteData.title = options.title || noteData.title;\n      noteData.content = options.content || noteData.content;\n      noteData.category = options.category || noteData.category || 'general';\n      noteData.taskId = options.task || noteData.taskId;\n      noteData.pinned = options.pin || noteData.pinned || false;\n\n      try {\n        const note = (await apiClient.createNote(noteData)) as any;\n        formatter.success(`Note created successfully: ${note.id}`);\n        formatter.output(note);\n      } catch (error) {\n        formatter.error(\n          `Failed to create note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('update <id>')\n    .description('Update a note')\n    .option('-t, --title <title>', 'note title')\n    .option('-c, --content <content>', 'note content')\n    .option('--category <category>', 'note category')\n    .option('--task <taskId>', 'link to task ID')\n    .option('--pin', 'pin the note')\n    .option('--unpin', 'unpin the note')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Get current note data\n        const currentNote = (await apiClient.getNote(id)) as any;\n        if (!currentNote) {\n          formatter.error(`Note ${id} not found`);\n          process.exit(1);\n        }\n\n        let updates: any = {};\n\n        if (options.interactive) {\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'title',\n              message: 'Note title:',\n              default: currentNote.title,\n            },\n            {\n              type: 'editor',\n              name: 'content',\n              message: 'Note content:',\n              default: currentNote.content || '',\n            },\n            {\n              type: 'list',\n              name: 'category',\n              message: 'Note category:',\n              choices: ['general', 'meeting', 'idea', 'bug', 'feature', 'docs'],\n              default: currentNote.category || 'general',\n            },\n            {\n              type: 'confirm',\n              name: 'pinned',\n              message: 'Pin this note?',\n              default: currentNote.pinned || false,\n            },\n          ]);\n          updates = answers;\n        } else {\n          // Use command line options\n          if (options.title) updates.title = options.title;\n          if (options.content) updates.content = options.content;\n          if (options.category) updates.category = options.category;\n          if (options.task) updates.taskId = options.task;\n          if (options.pin) updates.pinned = true;\n          if (options.unpin) updates.pinned = false;\n        }\n\n        if (Object.keys(updates).length === 0) {\n          formatter.warn('No updates specified');\n          return;\n        }\n\n        const updatedNote = (await apiClient.updateNote(id, updates)) as any;\n        formatter.success('Note updated successfully');\n        formatter.output(updatedNote);\n      } catch (error) {\n        formatter.error(\n          `Failed to update note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('delete <id>')\n    .alias('rm')\n    .description('Delete a note')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const note = (await apiClient.getNote(id)) as any;\n          if (!note) {\n            formatter.error(`Note ${id} not found`);\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Delete note \"${note.title}\"?`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Delete cancelled');\n            return;\n          }\n        }\n\n        await apiClient.deleteNote(id);\n        formatter.success(`Note ${id} deleted successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to delete note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('search <query>')\n    .alias('find')\n    .description('Search notes')\n    .option('-c, --category <category>', 'filter by category')\n    .option('-l, --limit <number>', 'limit number of results', '10')\n    .action(async (query: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const searchParams: Record<string, string> = {};\n        if (options.category) searchParams.category = options.category;\n        if (options.limit) searchParams.limit = options.limit;\n\n        const notes = (await apiClient.searchNotes(query)) as any;\n\n        if (!notes || notes.length === 0) {\n          formatter.info(`No notes found matching \"${query}\"`);\n          return;\n        }\n\n        formatter.output(notes, {\n          fields: ['id', 'title', 'category', 'content'],\n          headers: ['ID', 'Title', 'Category', 'Content'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to search notes: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('pin <id>')\n    .description('Pin a note')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.updateNote(id, { pinned: true });\n        formatter.success(`Note ${id} pinned successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to pin note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  noteCmd\n    .command('unpin <id>')\n    .description('Unpin a note')\n    .action(async (id: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.updateNote(id, { pinned: false });\n        formatter.success(`Note ${id} unpinned successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to unpin note: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/priority.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":19,"column":32,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":19,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .count on an `any` value.","line":19,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .explain on an `any` value.","line":32,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityReasoning on an `any` value.","line":32,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":69},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1111,1155],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1168,1217],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityReasoning on an `any` value.","line":34,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1354,1357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1354,1357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":39,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":69,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":69,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":71,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2580,2583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2580,2583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":77,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2658,2661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2658,2661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2692,2695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2692,2695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":79,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":79,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":83,"column":62,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":83,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":83,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":109,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":110,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":110,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3733,3736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3733,3736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":110,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":110,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3782,3785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3782,3785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .updated on an `any` value.","line":113,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3845,3848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3845,3848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .updated on an `any` value.","line":114,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4626,4629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4626,4629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .reason on an `any` value.","line":140,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":141,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":141,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityReason on an `any` value.","line":141,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .reason on an `any` value.","line":141,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .reason on an `any` value.","line":147,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .reason on an `any` value.","line":148,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":165,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5451,5454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5451,5454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":171,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":171,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":171,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `number`.","line":172,"column":38,"nodeType":"BinaryExpression","messageId":"unsafeArgument","endLine":172,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":193,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":193,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6337,6340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6337,6340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":199,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":199,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":199,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":46}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport type { CliComponents } from '../types';\n\nexport function registerPriorityCommands(program: Command): void {\n  const priorityCmd = program.command('priority').alias('p').description('Manage task priorities');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  priorityCmd\n    .command('next')\n    .description('Get next prioritized task')\n    .option('-c, --count <number>', 'number of tasks to show', '1')\n    .option('--explain', 'show priority reasoning')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const count = parseInt(options.count, 10);\n\n        if (count === 1) {\n          const nextTask = await apiClient.getNextTask();\n\n          if (!nextTask) {\n            formatter.info('No prioritized tasks available');\n            return;\n          }\n\n          formatter.success('Next prioritized task:');\n          formatter.output(nextTask);\n\n          if (options.explain && (nextTask as any).priorityReasoning) {\n            console.log('\\n--- Priority Reasoning ---');\n            console.log((nextTask as any).priorityReasoning);\n          }\n        } else {\n          const priorities = await apiClient.getPriorities();\n\n          if (!priorities || (priorities as any).length === 0) {\n            formatter.info('No prioritized tasks available');\n            return;\n          }\n\n          const topTasks = (priorities as any[]).slice(0, count);\n          formatter.success(`Top ${count} prioritized tasks:`);\n          formatter.output(topTasks, {\n            fields: ['id', 'title', 'priority', 'status', 'dueDate'],\n            headers: ['ID', 'Title', 'Priority', 'Status', 'Due Date'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get next task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  priorityCmd\n    .command('list')\n    .alias('ls')\n    .description('List all tasks by priority')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--status <status>', 'filter by status')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const priorities = (await apiClient.getPriorities()) as any;\n\n        if (!priorities || priorities.length === 0) {\n          formatter.info('No prioritized tasks available');\n          return;\n        }\n\n        let filteredTasks = priorities as any[];\n        if (options.status) {\n          filteredTasks = (priorities as any[]).filter(\n            (task: any) => task.status === options.status\n          );\n        }\n\n        const limitedTasks = filteredTasks.slice(0, parseInt(options.limit, 10));\n\n        formatter.output(limitedTasks, {\n          fields: ['id', 'title', 'priority', 'status', 'dueDate', 'dependencies'],\n          headers: ['ID', 'Title', 'Priority', 'Status', 'Due Date', 'Dependencies'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list priorities: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  priorityCmd\n    .command('recalc')\n    .alias('calculate')\n    .description('Recalculate all task priorities')\n    .action(async () => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        formatter.info('Recalculating task priorities...');\n        const result = await apiClient.recalculatePriorities();\n\n        formatter.success('Priority recalculation completed');\n        if ((result as any).message) {\n          formatter.info((result as any).message);\n        }\n\n        if ((result as any).updated) {\n          formatter.info(`Updated ${(result as any).updated} task priorities`);\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to recalculate priorities: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  priorityCmd\n    .command('set <taskId> <priority>')\n    .description('Set task priority (1-10)')\n    .option('--reason <reason>', 'reason for priority change')\n    .action(async (taskId: string, priority: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const priorityNum = parseInt(priority, 10);\n\n        if (priorityNum < 1 || priorityNum > 10) {\n          formatter.error('Priority must be between 1 and 10');\n          process.exit(1);\n        }\n\n        const updateData: any = { priority: priorityNum };\n        if (options.reason) {\n          updateData.priorityReason = options.reason;\n        }\n\n        await apiClient.updateTaskPriority(taskId, priorityNum);\n        formatter.success(`Task ${taskId} priority set to ${priorityNum}`);\n\n        if (options.reason) {\n          formatter.info(`Reason: ${options.reason}`);\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to set task priority: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  priorityCmd\n    .command('boost <taskId>')\n    .description('Boost task priority by 1')\n    .action(async (taskId: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const task = (await apiClient.getTask(taskId)) as any;\n        if (!task) {\n          formatter.error(`Task ${taskId} not found`);\n          process.exit(1);\n        }\n\n        const currentPriority = task.priority || 5;\n        const newPriority = Math.min(currentPriority + 1, 10);\n\n        await apiClient.updateTaskPriority(taskId, newPriority);\n        formatter.success(\n          `Task ${taskId} priority boosted from ${currentPriority} to ${newPriority}`\n        );\n      } catch (error) {\n        formatter.error(\n          `Failed to boost task priority: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  priorityCmd\n    .command('lower <taskId>')\n    .description('Lower task priority by 1')\n    .action(async (taskId: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const task = (await apiClient.getTask(taskId)) as any;\n        if (!task) {\n          formatter.error(`Task ${taskId} not found`);\n          process.exit(1);\n        }\n\n        const currentPriority = task.priority || 5;\n        const newPriority = Math.max(currentPriority - 1, 1);\n\n        await apiClient.updateTaskPriority(taskId, newPriority);\n        formatter.success(\n          `Task ${taskId} priority lowered from ${currentPriority} to ${newPriority}`\n        );\n      } catch (error) {\n        formatter.error(\n          `Failed to lower task priority: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/process-todos.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1103,1162],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1203,1257],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1599,1659],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1688,1824],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Command } from 'commander';\nimport chalk from 'chalk';\nimport { existsSync } from 'fs';\nimport { todoProcessor } from '../utils/todo-processor';\n\ninterface ProcessTodosOptions {\n  concurrent: boolean;\n  maxConcurrent: string;\n  groupByPhase: boolean;\n  showDependencies: boolean;\n  generateReport: boolean;\n  dryRun: boolean;\n}\n\nexport const processTodosCommand = new Command('process-todos')\n  .description('Process TODO items with visual feedback')\n  .argument('<file>', 'Path to TODO.md file')\n  .option('-c, --concurrent', 'Run independent tasks concurrently', false)\n  .option('-m, --max-concurrent <number>', 'Maximum concurrent tasks', '5')\n  .option('-g, --group-by-phase', 'Group tasks by phase', false)\n  .option('-d, --show-dependencies', 'Show task dependencies', false)\n  .option('-r, --generate-report', 'Generate implementation report', false)\n  .option('--dry-run', 'Simulate execution without making changes', false)\n  .action(async (file: string, options: ProcessTodosOptions): Promise<void> => {\n    try {\n      // Validate file exists\n      if (!existsSync(file)) {\n        console.error(chalk.red(`Error: File not found: ${file}`));\n        process.exit(1);\n      }\n\n      console.log(chalk.cyan('\\n🚀 Processing TODOs...\\n'));\n\n      await todoProcessor.processTodos(file, {\n        concurrent: options.concurrent,\n        maxConcurrent: parseInt(options.maxConcurrent, 10),\n        groupByPhase: options.groupByPhase,\n        showDependencies: options.showDependencies,\n        generateReport: options.generateReport,\n        dryRun: options.dryRun,\n      });\n\n      console.log(chalk.green('\\n✅ TODO processing complete!\\n'));\n    } catch (error) {\n      console.error(\n        chalk.red('\\n❌ Error processing TODOs:'),\n        error instanceof Error ? error.message : String(error)\n      );\n      process.exit(1);\n    }\n  });\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/realtime.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":17,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":17,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":35,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":35,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe construction of an any type value.","line":35,"column":20,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":35,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1304,1307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1304,1307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":37,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .on on an `any` value.","line":37,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1498,1501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1498,1501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":43,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":44,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":44,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":44,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":44,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":47,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":48,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":48,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":48,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .task on an `any` value.","line":48,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .events on an `any` value.","line":51,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":52,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":52,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .events on an `any` value.","line":52,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":52,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":52,"column":36,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":52,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .events on an `any` value.","line":52,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":52,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":56,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":56,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .send on an `any` value.","line":56,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":59,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":66,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .on on an `any` value.","line":66,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":68,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":68,"endColumn":56},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'data' may evaluate to '[object Object]' when stringified.","line":68,"column":40,"nodeType":"Identifier","messageId":"baseToString","endLine":68,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":70,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":71,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":71,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":74,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2443,2505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .format on an `any` value.","line":76,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":40},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'getEventIcon' was used before it was defined.","line":80,"column":30,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":80,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":80,"column":43,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":80,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":80,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":53},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'getEventColor' was used before it was defined.","line":81,"column":31,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":81,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":81,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":81,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":81,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2807,2947],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":83,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":83,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":83,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":83,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":78},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'formatEventMessage' was used before it was defined.","line":83,"column":82,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":83,"endColumn":100},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":86,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":87,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":63},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'data' may evaluate to '[object Object]' when stringified.","line":90,"column":56,"nodeType":"Identifier","messageId":"baseToString","endLine":90,"endColumn":60},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"Data\" of template literal expression.","line":90,"column":56,"nodeType":"Identifier","messageId":"invalidType","endLine":90,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":94,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":94,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .on on an `any` value.","line":94,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3252,3255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3252,3255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":95,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":99,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .on on an `any` value.","line":99,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3396,3399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3396,3399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3409,3412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3409,3412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":111,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":111,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .close on an `any` value.","line":111,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":111,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":135,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":135,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .lines on an `any` value.","line":135,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":136,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .level on an `any` value.","line":136,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .component on an `any` value.","line":139,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":139,"column":32,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":139,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .component on an `any` value.","line":139,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .since on an `any` value.","line":140,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":140,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":140,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .since on an `any` value.","line":140,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .follow on an `any` value.","line":142,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":146,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":146,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":148,"column":21,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":148,"endColumn":92},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5092,5095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5092,5095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":150,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":151,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":151,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .forEach on an `any` value.","line":151,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5178,5181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5178,5181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":152,"column":46,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":152,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .timestamp on an `any` value.","line":152,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":153,"column":25,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":153,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":153,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":153,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":153,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":153,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .level on an `any` value.","line":153,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .padEnd on an `any` value.","line":153,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .component on an `any` value.","line":154,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .component on an `any` value.","line":154,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":70},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5434,5499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":155,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":80},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":164,"column":40,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":164,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":177,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":177,"endColumn":81},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6154,6157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6154,6157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":179,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":212,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":212,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7142,7175],"text":"(icons[eventType] ?? icons.default)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":212,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":212,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7176,7178],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7469,7472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7469,7472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .type on an `any` value.","line":221,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":223,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":225,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":227,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":227,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":229,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":231,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":233,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":233,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":235,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":237,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":237,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":239,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":241,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":243,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .data on an `any` value.","line":243,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":54}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":100,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport * as WebSocket from 'ws';\nimport type { CliComponents } from '../types';\n\nexport function registerRealtimeCommands(program: Command): void {\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  program\n    .command('watch')\n    .alias('w')\n    .description('Watch for real-time updates')\n    .option('-b, --board <id>', 'watch specific board')\n    .option('-t, --task <id>', 'watch specific task')\n    .option('--events <types>', 'event types to watch (comma-separated)')\n    .option('--format <format>', 'output format (json|table|compact)', 'compact')\n    .action(async options => {\n      const { config, formatter } = getComponents();\n\n      try {\n        const serverUrl = config.getServerUrl();\n        const apiKey = config.getApiKey();\n\n        if (!apiKey) {\n          formatter.error('API key required. Run \"kanban config set api.key <key>\"');\n          process.exit(1);\n        }\n\n        // Convert HTTP URL to WebSocket URL\n        const wsUrl = serverUrl.replace(/^https?:\\/\\//, 'ws://').replace(/^ws:\\/\\//, 'wss://');\n        const wsEndpoint = `${wsUrl}/ws?apiKey=${apiKey}`;\n\n        formatter.info('Connecting to real-time updates...');\n\n        const ws = new (WebSocket as any)(wsEndpoint);\n\n        ws.on('open', () => {\n          formatter.success('Connected to real-time updates');\n\n          // Subscribe to events based on options\n          const subscriptions: any = {};\n\n          if (options.board) {\n            subscriptions.board = options.board;\n          }\n\n          if (options.task) {\n            subscriptions.task = options.task;\n          }\n\n          if (options.events) {\n            subscriptions.events = options.events.split(',').map((e: string) => e.trim());\n          }\n\n          // Send subscription message\n          ws.send(\n            JSON.stringify({\n              type: 'subscribe',\n              data: subscriptions,\n            })\n          );\n\n          formatter.info('Watching for updates... (Press Ctrl+C to stop)');\n        });\n\n        ws.on('message', (data: WebSocket.Data) => {\n          try {\n            const message = JSON.parse(data.toString());\n\n            if (message.type === 'event') {\n              const event = message.data;\n              const timestamp = new Date().toLocaleTimeString();\n\n              if (options.format === 'json') {\n                console.log(JSON.stringify({ timestamp, ...event }, null, 2));\n              } else if (options.format === 'table') {\n                formatter.output([{ timestamp, ...event }]);\n              } else {\n                // Compact format\n                const icon = getEventIcon(event.type);\n                const color = getEventColor(event.type);\n                console.log(\n                  `${timestamp} ${icon} ${color(event.type)}: ${event.message || formatEventMessage(event)}`\n                );\n              }\n            } else if (message.type === 'error') {\n              formatter.error(`WebSocket error: ${message.data.message}`);\n            }\n          } catch (error) {\n            formatter.warn(`Failed to parse message: ${data}`);\n          }\n        });\n\n        ws.on('error', (error: any) => {\n          formatter.error(`WebSocket error: ${error.message}`);\n          process.exit(1);\n        });\n\n        ws.on('close', (code: any, reason: any) => {\n          if (code === 1000) {\n            formatter.info('Connection closed normally');\n          } else {\n            formatter.error(`Connection closed: ${code} ${reason}`);\n            process.exit(1);\n          }\n        });\n\n        // Handle graceful shutdown\n        process.on('SIGINT', () => {\n          formatter.info('\\nClosing connection...');\n          ws.close();\n          process.exit(0);\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to start watching: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  program\n    .command('logs')\n    .description('View system logs')\n    .option('-f, --follow', 'follow log output')\n    .option('-n, --lines <number>', 'number of lines to show', '50')\n    .option('--level <level>', 'minimum log level (debug|info|warn|error)', 'info')\n    .option('--component <name>', 'filter by component')\n    .option('--since <time>', 'show logs since time (e.g., \"1h\", \"30m\", \"2024-01-01\")')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          lines: options.lines,\n          level: options.level,\n        };\n\n        if (options.component) params.component = options.component;\n        if (options.since) params.since = options.since;\n\n        if (options.follow) {\n          // Stream logs in real-time\n          formatter.info('Following logs... (Press Ctrl+C to stop)');\n\n          const streamLogs = async () => {\n            try {\n              const logs = (await apiClient.request('/api/logs/stream', { params })) as any;\n\n              if (logs && logs.length > 0) {\n                logs.forEach((log: any) => {\n                  const timestamp = new Date(log.timestamp).toLocaleTimeString();\n                  const level = log.level.toUpperCase().padEnd(5);\n                  const component = log.component ? `[${log.component}]` : '';\n                  console.log(`${timestamp} ${level} ${component} ${log.message}`);\n                });\n              }\n            } catch (error) {\n              // Ignore errors in streaming mode, will retry\n            }\n          };\n\n          // Poll for new logs every second\n          const interval = setInterval(streamLogs, 1000);\n\n          // Handle graceful shutdown\n          process.on('SIGINT', () => {\n            clearInterval(interval);\n            formatter.info('\\nStopped following logs');\n            process.exit(0);\n          });\n\n          // Initial load\n          await streamLogs();\n        } else {\n          // One-time log fetch\n          const logs = (await apiClient.request('/api/logs', { params })) as any;\n\n          if (!logs || logs.length === 0) {\n            formatter.info('No logs found');\n            return;\n          }\n\n          formatter.output(logs, {\n            fields: ['timestamp', 'level', 'component', 'message'],\n            headers: ['Timestamp', 'Level', 'Component', 'Message'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get logs: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Utility functions for event formatting\n  function getEventIcon(eventType: string): string {\n    const icons: Record<string, string> = {\n      'task:created': '✨',\n      'task:updated': '📝',\n      'task:moved': '🔄',\n      'task:deleted': '🗑️',\n      'task:completed': '✅',\n      'note:added': '📄',\n      'note:updated': '📝',\n      'priority:changed': '⚡',\n      'dependency:blocked': '🚫',\n      'subtask:completed': '✓',\n      default: '📋',\n    };\n    return icons[eventType] || icons.default || '📋';\n  }\n\n  function getEventColor(_eventType: string): (text: string) => string {\n    // This would typically use chalk, but keeping it simple for now\n    return (text: string) => text; // In real implementation, apply colors based on event type\n  }\n\n  function formatEventMessage(event: any): string {\n    switch (event.type) {\n      case 'task:created':\n        return `Task \"${event.data.title}\" created`;\n      case 'task:updated':\n        return `Task \"${event.data.title}\" updated`;\n      case 'task:moved':\n        return `Task \"${event.data.title}\" moved to ${event.data.columnName}`;\n      case 'task:deleted':\n        return `Task \"${event.data.title}\" deleted`;\n      case 'task:completed':\n        return `Task \"${event.data.title}\" completed`;\n      case 'note:added':\n        return `Note \"${event.data.title}\" added to task ${event.data.taskId}`;\n      case 'note:updated':\n        return `Note \"${event.data.title}\" updated`;\n      case 'priority:changed':\n        return `Task \"${event.data.title}\" priority changed to ${event.data.newPriority}`;\n      case 'dependency:blocked':\n        return `Task \"${event.data.title}\" blocked by dependency`;\n      case 'subtask:completed':\n        return `Subtask \"${event.data.title}\" completed`;\n      default:\n        return event.data ? JSON.stringify(event.data) : 'Unknown event';\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/search.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":25,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":25,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":25,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":26,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":26,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sort on an `any` value.","line":26,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":27,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":27,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":30,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":30,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":30,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":30,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":31,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":31,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":31,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":31,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":32,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":32,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":32,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":32,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":35,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1579,1582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1579,1582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":41,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1735,1738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1735,1738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":46,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":72,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":72,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":73,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sort on an `any` value.","line":73,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":74,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":74,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":74,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":77,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":77,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":77,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .category on an `any` value.","line":77,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2973,2976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2973,2976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":81,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3129,3132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3129,3132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":86,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3918,3921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3918,3921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":109,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":109,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4073,4076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4073,4076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":114,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4980,4983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4980,4983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .notesOnly on an `any` value.","line":141,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tagsOnly on an `any` value.","line":141,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":142,"column":62,"nodeType":"Property","messageId":"anyAssignment","endLine":142,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":142,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasksOnly on an `any` value.","line":146,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tagsOnly on an `any` value.","line":146,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasksOnly on an `any` value.","line":151,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .notesOnly on an `any` value.","line":151,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":161,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":161,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5864,5930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":219,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":219,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":219,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":222,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":222,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":222,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":222,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":223,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":223,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":223,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":223,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":224,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":224,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":224,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":224,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":225,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":225,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":225,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":225,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityMin on an `any` value.","line":226,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":226,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":226,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityMin on an `any` value.","line":226,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":226,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityMax on an `any` value.","line":227,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":227,"column":34,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":227,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priorityMax on an `any` value.","line":227,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdAfter on an `any` value.","line":228,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":228,"column":35,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":228,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdAfter on an `any` value.","line":228,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdBefore on an `any` value.","line":229,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":229,"column":36,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":229,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdBefore on an `any` value.","line":229,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":229,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueAfter on an `any` value.","line":230,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":230,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":230,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueAfter on an `any` value.","line":230,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueBefore on an `any` value.","line":231,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":231,"column":32,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":231,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueBefore on an `any` value.","line":231,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":233,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":233,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8804,8807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8804,8807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":235,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":240,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport type { CliComponents } from '../types';\n\nexport function registerSearchCommands(program: Command): void {\n  const searchCmd = program.command('search').alias('s').description('Search tasks and content');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  searchCmd\n    .command('tasks <query>')\n    .description('Search tasks')\n    .option('-b, --board <id>', 'search within specific board')\n    .option('-s, --status <status>', 'filter by status')\n    .option('-t, --tags <tags>', 'filter by tags (comma-separated)')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--sort <field>', 'sort by field', 'relevance')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async (query: string, options) => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          q: query,\n          limit: options.limit,\n          sort: options.sort,\n          order: options.order,\n        };\n\n        if (options.board) params.board = options.board;\n        if (options.status) params.status = options.status;\n        if (options.tags) params.tags = options.tags;\n\n        // Use default board if no board specified\n        if (!options.board && config.getDefaultBoard()) {\n          params.board = config.getDefaultBoard()!;\n        }\n\n        const results = await apiClient.searchTasks(query, params);\n\n        if (!results || (results as any).length === 0) {\n          formatter.info(`No tasks found for \"${query}\"`);\n          return;\n        }\n\n        formatter.success(`Found ${(results as any).length} tasks matching \"${query}\"`);\n        formatter.output(results, {\n          fields: ['id', 'title', 'status', 'priority', 'relevance', 'board'],\n          headers: ['ID', 'Title', 'Status', 'Priority', 'Relevance', 'Board'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to search tasks: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  searchCmd\n    .command('notes <query>')\n    .description('Search notes')\n    .option('-c, --category <category>', 'filter by category')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--sort <field>', 'sort by field', 'relevance')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async (query: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          q: query,\n          limit: options.limit,\n          sort: options.sort,\n          order: options.order,\n        };\n\n        if (options.category) params.category = options.category;\n\n        const results = await apiClient.searchNotes(query);\n\n        if (!results || (results as any).length === 0) {\n          formatter.info(`No notes found for \"${query}\"`);\n          return;\n        }\n\n        formatter.success(`Found ${(results as any).length} notes matching \"${query}\"`);\n        formatter.output(results, {\n          fields: ['id', 'title', 'category', 'relevance', 'createdAt'],\n          headers: ['ID', 'Title', 'Category', 'Relevance', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to search notes: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  searchCmd\n    .command('tags <query>')\n    .description('Search tags')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .action(async (query: string, _options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const results = await apiClient.searchTags(query);\n\n        if (!results || (results as any).length === 0) {\n          formatter.info(`No tags found for \"${query}\"`);\n          return;\n        }\n\n        formatter.success(`Found ${(results as any).length} tags matching \"${query}\"`);\n        formatter.output(results, {\n          fields: ['id', 'name', 'description', 'taskCount', 'parentId'],\n          headers: ['ID', 'Name', 'Description', 'Tasks', 'Parent'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to search tags: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  searchCmd\n    .command('all <query>')\n    .description('Search all content (tasks, notes, tags)')\n    .option('-l, --limit <number>', 'limit number of results per type', '10')\n    .option('--tasks-only', 'search only tasks')\n    .option('--notes-only', 'search only notes')\n    .option('--tags-only', 'search only tags')\n    .action(async (query: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const searchPromises: Promise<any>[] = [];\n        const searchTypes: string[] = [];\n\n        if (!options.notesOnly && !options.tagsOnly) {\n          searchPromises.push(apiClient.searchTasks(query, { limit: options.limit }));\n          searchTypes.push('tasks');\n        }\n\n        if (!options.tasksOnly && !options.tagsOnly) {\n          searchPromises.push(apiClient.searchNotes(query));\n          searchTypes.push('notes');\n        }\n\n        if (!options.tasksOnly && !options.notesOnly) {\n          searchPromises.push(apiClient.searchTags(query));\n          searchTypes.push('tags');\n        }\n\n        const results = await Promise.all(searchPromises);\n\n        let totalResults = 0;\n        results.forEach((result, index) => {\n          const type = searchTypes[index];\n          const count = result ? result.length : 0;\n          totalResults += count;\n\n          if (count > 0 && type) {\n            console.log(`\\n--- ${type.toUpperCase()} (${count} results) ---`);\n\n            if (type === 'tasks') {\n              formatter.output(result, {\n                fields: ['id', 'title', 'status', 'priority'],\n                headers: ['ID', 'Title', 'Status', 'Priority'],\n              });\n            } else if (type === 'notes') {\n              formatter.output(result, {\n                fields: ['id', 'title', 'category'],\n                headers: ['ID', 'Title', 'Category'],\n              });\n            } else if (type === 'tags') {\n              formatter.output(result, {\n                fields: ['id', 'name', 'taskCount'],\n                headers: ['ID', 'Name', 'Tasks'],\n              });\n            }\n          }\n        });\n\n        if (totalResults === 0) {\n          formatter.info(`No results found for \"${query}\"`);\n        } else {\n          formatter.success(`Found ${totalResults} total results for \"${query}\"`);\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to search: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Advanced search with filters\n  searchCmd\n    .command('advanced')\n    .description('Advanced search with multiple filters')\n    .option('--title <query>', 'search in titles')\n    .option('--description <query>', 'search in descriptions')\n    .option('--tags <tags>', 'filter by tags (comma-separated)')\n    .option('--status <status>', 'filter by status')\n    .option('--priority-min <number>', 'minimum priority')\n    .option('--priority-max <number>', 'maximum priority')\n    .option('--created-after <date>', 'created after date (YYYY-MM-DD)')\n    .option('--created-before <date>', 'created before date (YYYY-MM-DD)')\n    .option('--due-after <date>', 'due after date (YYYY-MM-DD)')\n    .option('--due-before <date>', 'due before date (YYYY-MM-DD)')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          limit: options.limit,\n        };\n\n        if (options.title) params.title = options.title;\n        if (options.description) params.description = options.description;\n        if (options.tags) params.tags = options.tags;\n        if (options.status) params.status = options.status;\n        if (options.priorityMin) params.priorityMin = options.priorityMin;\n        if (options.priorityMax) params.priorityMax = options.priorityMax;\n        if (options.createdAfter) params.createdAfter = options.createdAfter;\n        if (options.createdBefore) params.createdBefore = options.createdBefore;\n        if (options.dueAfter) params.dueAfter = options.dueAfter;\n        if (options.dueBefore) params.dueBefore = options.dueBefore;\n\n        const results = (await apiClient.request('/api/search/advanced', { params })) as any;\n\n        if (!results || results.length === 0) {\n          formatter.info('No results found with the specified filters');\n          return;\n        }\n\n        formatter.success(`Found ${results.length} results with advanced filters`);\n        formatter.output(results, {\n          fields: ['id', 'title', 'status', 'priority', 'dueDate', 'createdAt'],\n          headers: ['ID', 'Title', 'Status', 'Priority', 'Due Date', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to perform advanced search: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/subtasks.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":27,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":70},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":35,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boardId on an `any` value.","line":35,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":36,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .columnId on an `any` value.","line":36,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":39,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":39,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1397,1400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1397,1400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":42,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":51,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":59,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":70,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":27},{"ruleId":"no-restricted-globals","severity":2,"message":"Unexpected use of 'isNaN'. Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan","line":78,"column":25,"nodeType":"Identifier","messageId":"customMessage","endLine":78,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":83,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":83,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":84,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":84,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":88,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":88,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":88,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":88,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":88,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":89,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":89,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":89,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":89,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":89,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":90,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":90,"column":41,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":90,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":90,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":90,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":92,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":92,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":93,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":93,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":93,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":93,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":93,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":96,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `CreateTaskRequest`.","line":96,"column":53,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":96,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3286,3289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3286,3289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":97,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":118,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":118,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":121,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":122,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":122,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":122,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":125,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4206,4209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4206,4209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":127,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .blocked on an `any` value.","line":199,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":201,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":97},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6724,6727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6724,6727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":203,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":215,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":217,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7308,7311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7308,7311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":219,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":246,"column":32,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":246,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .depth on an `any` value.","line":246,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":247,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":249,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8415,8418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8415,8418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8691,8694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8691,8694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":259,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":259,"endColumn":53},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":261,"column":26,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":261,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":261,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":261,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":261,"endColumn":73},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8897,8974],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":262,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":262,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":262,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":264,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":264,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":264,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":265,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":265,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dependencies on an `any` value.","line":265,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":265,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9087,9090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9087,9090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":67,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type { CliComponents } from '../types';\n\nexport function registerSubtaskCommands(program: Command): void {\n  const subtaskCmd = program\n    .command('subtask')\n    .alias('sub')\n    .description('Manage subtasks and dependencies');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  subtaskCmd\n    .command('create <parentId>')\n    .description('Create a subtask for a parent task')\n    .option('-t, --title <title>', 'subtask title')\n    .option('-d, --description <desc>', 'subtask description')\n    .option('-p, --priority <number>', 'priority (1-10)', '5')\n    .option('--due <date>', 'due date (YYYY-MM-DD)')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (parentId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Verify parent task exists\n        const parentTask = (await apiClient.getTask(parentId)) as any;\n        if (!parentTask) {\n          formatter.error(`Parent task ${parentId} not found`);\n          process.exit(1);\n        }\n\n        let subtaskData: any = {\n          parentId,\n          boardId: parentTask.boardId,\n          columnId: parentTask.columnId,\n        };\n\n        if (options.interactive || !options.title) {\n          const questions: any[] = [];\n\n          if (!options.title) {\n            questions.push({\n              type: 'input',\n              name: 'title',\n              message: 'Subtask title:',\n              validate: (input: string) => input.length > 0 || 'Title is required',\n            });\n          }\n\n          if (!options.description) {\n            questions.push({\n              type: 'input',\n              name: 'description',\n              message: 'Subtask description (optional):',\n            });\n          }\n\n          if (!options.priority) {\n            questions.push({\n              type: 'number',\n              name: 'priority',\n              message: 'Priority (1-10):',\n              default: 5,\n              validate: (input: number) =>\n                (input >= 1 && input <= 10) || 'Priority must be between 1 and 10',\n            });\n          }\n\n          if (!options.due) {\n            questions.push({\n              type: 'input',\n              name: 'dueDate',\n              message: 'Due date (YYYY-MM-DD, optional):',\n              validate: (input: string) => {\n                if (!input) return true;\n                const date = new Date(input);\n                return !isNaN(date.getTime()) || 'Invalid date format';\n              },\n            });\n          }\n\n          const answers = await inquirer.prompt(questions);\n          subtaskData = { ...subtaskData, ...answers };\n        }\n\n        // Use command line options or answers\n        subtaskData.title = options.title || subtaskData.title;\n        subtaskData.description = options.description || subtaskData.description;\n        subtaskData.priority = parseInt(options.priority || subtaskData.priority, 10);\n\n        if (options.due || subtaskData.dueDate) {\n          subtaskData.dueDate = options.due || subtaskData.dueDate;\n        }\n\n        const subtask = (await apiClient.createTask(subtaskData)) as any;\n        formatter.success(`Subtask created successfully: ${subtask.id}`);\n        formatter.output(subtask);\n      } catch (error) {\n        formatter.error(\n          `Failed to create subtask: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  subtaskCmd\n    .command('list <parentId>')\n    .description('List subtasks for a parent task')\n    .option('--status <status>', 'filter by status')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .action(async (parentId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          parent: parentId,\n          limit: options.limit,\n        };\n\n        if (options.status) {\n          params.status = options.status;\n        }\n\n        const subtasks = (await apiClient.getTasks(params)) as any;\n\n        if (!subtasks || subtasks.length === 0) {\n          formatter.info(`No subtasks found for task ${parentId}`);\n          return;\n        }\n\n        formatter.output(subtasks, {\n          fields: ['id', 'title', 'status', 'priority', 'dueDate', 'createdAt'],\n          headers: ['ID', 'Title', 'Status', 'Priority', 'Due Date', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list subtasks: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  // Dependency commands\n  const dependCmd = subtaskCmd\n    .command('depend')\n    .alias('dep')\n    .description('Manage task dependencies');\n\n  dependCmd\n    .command('add <taskId> <dependsOnId>')\n    .description('Add a dependency (taskId depends on dependsOnId)')\n    .action(async (taskId: string, dependsOnId: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.request(`/api/tasks/${taskId}/dependencies`, {\n          method: 'POST',\n          body: { dependsOn: dependsOnId },\n        });\n        formatter.success(`Task ${taskId} now depends on task ${dependsOnId}`);\n      } catch (error) {\n        formatter.error(\n          `Failed to add dependency: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dependCmd\n    .command('remove <taskId> <dependsOnId>')\n    .description('Remove a dependency')\n    .action(async (taskId: string, dependsOnId: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.request(`/api/tasks/${taskId}/dependencies/${dependsOnId}`, {\n          method: 'DELETE',\n        });\n        formatter.success(\n          `Removed dependency: task ${taskId} no longer depends on task ${dependsOnId}`\n        );\n      } catch (error) {\n        formatter.error(\n          `Failed to remove dependency: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dependCmd\n    .command('list <taskId>')\n    .description('List task dependencies')\n    .option('--blocked', 'show tasks blocked by this task')\n    .action(async (taskId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (options.blocked) {\n          // Show tasks that are blocked by this task\n          const blockedTasks = (await apiClient.request(`/api/tasks/${taskId}/blocking`)) as any;\n\n          if (!blockedTasks || blockedTasks.length === 0) {\n            formatter.info(`No tasks are blocked by task ${taskId}`);\n            return;\n          }\n\n          formatter.info(`Tasks blocked by ${taskId}:`);\n          formatter.output(blockedTasks, {\n            fields: ['id', 'title', 'status', 'priority'],\n            headers: ['ID', 'Title', 'Status', 'Priority'],\n          });\n        } else {\n          // Show dependencies of this task\n          const dependencies = (await apiClient.request(\n            `/api/tasks/${taskId}/dependencies`\n          )) as any;\n\n          if (!dependencies || dependencies.length === 0) {\n            formatter.info(`Task ${taskId} has no dependencies`);\n            return;\n          }\n\n          formatter.info(`Dependencies for task ${taskId}:`);\n          formatter.output(dependencies, {\n            fields: ['id', 'title', 'status', 'priority'],\n            headers: ['ID', 'Title', 'Status', 'Priority'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to list dependencies: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  dependCmd\n    .command('visualize <taskId>')\n    .description('Visualize dependency graph for a task')\n    .option('--depth <number>', 'depth of dependency tree', '3')\n    .action(async (taskId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const depth = parseInt(options.depth, 10);\n        const graph = (await apiClient.request(`/api/tasks/${taskId}/dependency-graph`, {\n          params: { depth: depth.toString() },\n        })) as any;\n\n        if (!graph) {\n          formatter.info(`No dependency graph available for task ${taskId}`);\n          return;\n        }\n\n        formatter.info(`Dependency graph for task ${taskId}:`);\n\n        // Simple text-based visualization\n        const printNode = (node: any, indent = 0) => {\n          const prefix = '  '.repeat(indent) + (indent > 0 ? '└─ ' : '');\n          const status = node.status === 'completed' ? '✓' : node.status === 'blocked' ? '⚠' : '○';\n          console.log(`${prefix}${status} ${node.id}: ${node.title} (${node.status})`);\n\n          if (node.dependencies && node.dependencies.length > 0) {\n            node.dependencies.forEach((dep: any) => printNode(dep, indent + 1));\n          }\n        };\n\n        printNode(graph);\n      } catch (error) {\n        formatter.error(\n          `Failed to visualize dependencies: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/tags.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":22,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":22,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":24,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tree on an `any` value.","line":29,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":32,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":32,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .filter on an `any` value.","line":32,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parentId on an `any` value.","line":32,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":67},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'displayTagTree' was used before it was defined.","line":33,"column":11,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":33,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `any[]`.","line":33,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":33,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `any[]`.","line":33,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":33,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .usage on an `any` value.","line":36,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .usage on an `any` value.","line":40,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":44,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":44,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .slice on an `any` value.","line":44,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":38},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":44,"column":42,"nodeType":"CallExpression","messageId":"missingRadix","endLine":44,"endColumn":65,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1628,1628],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":44,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":44,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":44,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":65,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2186,2189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2186,2189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":74,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":74,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2384,2429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tasks on an `any` value.","line":76,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3264,3267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3264,3267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":102,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3339,3342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3339,3342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":108,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":108,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":108,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":114,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":114,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":115,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":124,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":124,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parent on an `any` value.","line":124,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":128,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":129,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":129,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":131,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":131,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":131,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":131,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":132,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":132,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":132,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":132,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":133,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":133,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parentId on an `any` value.","line":133,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parent on an `any` value.","line":133,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":137,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":137,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `CreateTagRequest`.","line":137,"column":48,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":137,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4448,4451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4448,4451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":138,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":161,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":161,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5293,5296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5293,5296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5434,5437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5434,5437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":169,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":170,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":193,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":175,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":175,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":175,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":175,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":181,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":181,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":181,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":187,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":187,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":188,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":188,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":194,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":194,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":197,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":197,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":197,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":197,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":197,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":197,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":198,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":198,"column":36,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":198,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":198,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":198,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":199,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":199,"column":30,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":199,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":199,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":199,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parent on an `any` value.","line":200,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":200,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":200,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parentId on an `any` value.","line":200,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parent on an `any` value.","line":200,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":203,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":203,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":208,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":208,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `UpdateTagRequest`.","line":208,"column":59,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":208,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6841,6844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6841,6844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":228,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":229,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":229,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7468,7471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7468,7471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":235,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":242,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":239,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":304,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":304,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9726,9729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9726,9729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":306,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":311,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":311,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .slice on an `any` value.","line":311,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":36},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":311,"column":40,"nodeType":"CallExpression","messageId":"missingRadix","endLine":311,"endColumn":63,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9927,9927],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":311,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":311,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":311,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":311,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":331,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":331,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":332,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":332,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":332,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10625,10628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10625,10628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":333,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":333,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":333,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10688,10691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10688,10691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":340,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":347,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":344,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":344,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":344,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":344,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":344,"column":103,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":344,"endColumn":107},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11632,11635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11632,11635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11650,11653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11650,11653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":375,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":375,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":375,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":375,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .color on an `any` value.","line":375,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":375,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":69},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11850,11919],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":376,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11994,11997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11994,11997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .parentId on an `any` value.","line":379,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":379,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":379,"endColumn":70}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":107,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type { CliComponents } from '../types';\n\nexport function registerTagCommands(program: Command): void {\n  const tagCmd = program.command('tag').description('Manage tags');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  tagCmd\n    .command('list')\n    .alias('ls')\n    .description('List tags')\n    .option('--usage', 'include usage statistics')\n    .option('--tree', 'show hierarchical tree structure')\n    .option('-l, --limit <number>', 'limit number of results', '50')\n    .action(async options => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const tags = (await apiClient.getTags()) as any;\n\n        if (!tags || tags.length === 0) {\n          formatter.info('No tags found');\n          return;\n        }\n\n        if (options.tree) {\n          // Display as hierarchical tree\n          formatter.info('Hierarchical tag structure:');\n          const rootTags = tags.filter((tag: any) => !tag.parentId);\n          displayTagTree(rootTags, tags, formatter, 0);\n        } else {\n          // Regular table display\n          const fields = options.usage\n            ? ['id', 'name', 'color', 'description', 'taskCount', 'parentId']\n            : ['id', 'name', 'color', 'description', 'parentId'];\n\n          const headers = options.usage\n            ? ['ID', 'Name', 'Color', 'Description', 'Task Count', 'Parent']\n            : ['ID', 'Name', 'Color', 'Description', 'Parent'];\n\n          formatter.output(tags.slice(0, parseInt(options.limit)), {\n            fields,\n            headers,\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to list tags: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('show <id>')\n    .description('Show tag details')\n    .option('--tasks', 'include tasks with this tag')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const tag = (await apiClient.getTag(id)) as any;\n\n        if (!tag) {\n          formatter.error(`Tag ${id} not found`);\n          process.exit(1);\n        }\n\n        formatter.output(tag);\n\n        if (options.tasks && tag.tasks) {\n          console.log('\\n--- Tasks with this tag ---');\n          formatter.output(tag.tasks, {\n            fields: ['id', 'title', 'status', 'priority'],\n            headers: ['ID', 'Title', 'Status', 'Priority'],\n          });\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get tag: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('create <name>')\n    .alias('new')\n    .description('Create a new tag')\n    .option('-d, --description <desc>', 'tag description')\n    .option('-c, --color <color>', 'tag color (hex code)')\n    .option('-p, --parent <parentId>', 'parent tag ID for hierarchy')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (name: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      let tagData: any = { name };\n\n      if (options.interactive) {\n        const questions: any[] = [\n          {\n            type: 'input',\n            name: 'description',\n            message: 'Tag description (optional):',\n            default: options.description || '',\n          },\n          {\n            type: 'input',\n            name: 'color',\n            message: 'Tag color (hex code, optional):',\n            default: options.color || '#007acc',\n            validate: (input: string) => {\n              if (!input) return true;\n              return /^#[0-9A-Fa-f]{6}$/.test(input) || 'Invalid hex color format (use #RRGGBB)';\n            },\n          },\n          {\n            type: 'input',\n            name: 'parentId',\n            message: 'Parent tag ID (optional, for hierarchy):',\n            default: options.parent || '',\n          },\n        ];\n\n        const answers = await inquirer.prompt(questions);\n        tagData = { ...tagData, ...answers };\n      } else {\n        tagData.description = options.description;\n        tagData.color = options.color;\n        tagData.parentId = options.parent;\n      }\n\n      try {\n        const tag = (await apiClient.createTag(tagData)) as any;\n        formatter.success(`Tag created successfully: ${tag.id}`);\n        formatter.output(tag);\n      } catch (error) {\n        formatter.error(\n          `Failed to create tag: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('update <id>')\n    .description('Update a tag')\n    .option('-n, --name <name>', 'tag name')\n    .option('-d, --description <desc>', 'tag description')\n    .option('-c, --color <color>', 'tag color (hex code)')\n    .option('-p, --parent <parentId>', 'parent tag ID')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Get current tag data\n        const currentTag = (await apiClient.getTag(id)) as any;\n        if (!currentTag) {\n          formatter.error(`Tag ${id} not found`);\n          process.exit(1);\n        }\n\n        let updates: any = {};\n\n        if (options.interactive) {\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'name',\n              message: 'Tag name:',\n              default: currentTag.name,\n            },\n            {\n              type: 'input',\n              name: 'description',\n              message: 'Tag description:',\n              default: currentTag.description || '',\n            },\n            {\n              type: 'input',\n              name: 'color',\n              message: 'Tag color (hex code):',\n              default: currentTag.color || '#007acc',\n              validate: (input: string) => {\n                if (!input) return true;\n                return /^#[0-9A-Fa-f]{6}$/.test(input) || 'Invalid hex color format (use #RRGGBB)';\n              },\n            },\n          ]);\n          updates = answers;\n        } else {\n          // Use command line options\n          if (options.name) updates.name = options.name;\n          if (options.description) updates.description = options.description;\n          if (options.color) updates.color = options.color;\n          if (options.parent) updates.parentId = options.parent;\n        }\n\n        if (Object.keys(updates).length === 0) {\n          formatter.warn('No updates specified');\n          return;\n        }\n\n        const updatedTag = (await apiClient.updateTag(id, updates)) as any;\n        formatter.success('Tag updated successfully');\n        formatter.output(updatedTag);\n      } catch (error) {\n        formatter.error(\n          `Failed to update tag: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('delete <id>')\n    .alias('rm')\n    .description('Delete a tag')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const tag = (await apiClient.getTag(id)) as any;\n          if (!tag) {\n            formatter.error(`Tag ${id} not found`);\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Delete tag \"${tag.name}\"? This will remove it from all tasks.`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Delete cancelled');\n            return;\n          }\n        }\n\n        await apiClient.deleteTag(id);\n        formatter.success(`Tag ${id} deleted successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to delete tag: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('add <taskId> <tags...>')\n    .description('Add tags to a task')\n    .action(async (taskId: string, tags: string[]) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.addTagsToTask(taskId, tags);\n        formatter.success(`Added tags [${tags.join(', ')}] to task ${taskId}`);\n      } catch (error) {\n        formatter.error(\n          `Failed to add tags: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('remove <taskId> <tag>')\n    .alias('rm-from-task')\n    .description('Remove tag from a task')\n    .action(async (taskId: string, tag: string) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        await apiClient.removeTagFromTask(taskId, tag);\n        formatter.success(`Removed tag \"${tag}\" from task ${taskId}`);\n      } catch (error) {\n        formatter.error(\n          `Failed to remove tag: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('search <query>')\n    .alias('find')\n    .description('Search tags by name')\n    .option('-l, --limit <number>', 'limit number of results', '10')\n    .action(async (query: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const tags = (await apiClient.searchTags(query)) as any;\n\n        if (!tags || tags.length === 0) {\n          formatter.info(`No tags found matching \"${query}\"`);\n          return;\n        }\n\n        formatter.output(tags.slice(0, parseInt(options.limit)), {\n          fields: ['id', 'name', 'color', 'description'],\n          headers: ['ID', 'Name', 'Color', 'Description'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to search tags: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  tagCmd\n    .command('merge <fromId> <toId>')\n    .description('Merge one tag into another')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (fromId: string, toId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const fromTag = (await apiClient.getTag(fromId)) as any;\n          const toTag = (await apiClient.getTag(toId)) as any;\n\n          if (!fromTag || !toTag) {\n            formatter.error('One or both tags not found');\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Merge tag \"${fromTag.name}\" into \"${toTag.name}\"? This will delete \"${fromTag.name}\".`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Merge cancelled');\n            return;\n          }\n        }\n\n        await apiClient.mergeTags(fromId, toId);\n        formatter.success(`Merged tag ${fromId} into ${toId}`);\n      } catch (error) {\n        formatter.error(\n          `Failed to merge tags: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n\n// Helper function to display tag tree\nfunction displayTagTree(\n  tags: any[],\n  allTags: any[],\n  formatter: OutputFormatter,\n  depth: number\n): void {\n  tags.forEach(tag => {\n    const indent = '  '.repeat(depth);\n    const name = tag.color ? `${tag.name} (${tag.color})` : tag.name;\n    console.log(`${indent}${depth > 0 ? '└─ ' : ''}${name} (${tag.id})`);\n\n    // Find and display children\n    const children = allTags.filter((t: any) => t.parentId === tag.id);\n    if (children.length > 0) {\n      displayTagTree(children, allTags, formatter, depth + 1);\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/commands/tasks.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`chalk` import should occur before type import of `../types`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":27,"fix":{"range":[75,275],"text":"import chalk from 'chalk';\nimport type { CliComponents } from '../types';\nimport { createTaskPrompt, PromptCancelledError } from '../prompts/task-prompts';\nimport { spinner } from '../utils/spinner';\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chalk' is defined but never used.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":29,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":29,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":29,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":30,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sort on an `any` value.","line":30,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":31,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":31,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":34,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":34,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":34,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":34,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":34,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":35,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":35,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":35,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":35,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":35,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":36,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":36,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":36,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":36,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":36,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":39,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":43,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":43,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1658,1661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1658,1661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":45,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .context on an `any` value.","line":79,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2788,2824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3797,3800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3797,3800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":114,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":114,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":118,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":118,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":119,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":119,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":119,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":120,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":120,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":120,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":121,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":121,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":121,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":121,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":121,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":121,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":121,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":121,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":121,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":61},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··········`","line":125,"column":1,"nodeType":null,"messageId":"delete","endLine":125,"endColumn":11,"fix":{"range":[4256,4266],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":141,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":30},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `⏎`","line":142,"column":12,"nodeType":null,"messageId":"delete","endLine":143,"endColumn":1,"fix":{"range":[4954,4955],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":154,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":154,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":154,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":154,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":154,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":155,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":155,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":155,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":155,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":155,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":156,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":156,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boardId on an `any` value.","line":156,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":156,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":156,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":157,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":157,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .columnId on an `any` value.","line":157,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .column on an `any` value.","line":157,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .column on an `any` value.","line":157,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":158,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":158,"column":36,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":158,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":158,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":158,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":160,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":160,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":161,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":161,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":161,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":161,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":161,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":164,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":164,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":165,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":165,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":165,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":165,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":166,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":166,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":166,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":166,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":166,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":166,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":166,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .split on an `any` value.","line":166,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":166,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .boardId on an `any` value.","line":170,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":178,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `CreateTaskRequest`.","line":179,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":179,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .size on an `any` value.","line":187,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":26},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Estimated·size:·${taskData.size}·(${taskData.estimatedHours·||·'Unknown'}·hours)`` with `⏎············`Estimated·size:·${taskData.size}·(${taskData.estimatedHours·||·'Unknown'}·hours)`⏎··········`","line":188,"column":26,"nodeType":null,"messageId":"replace","endLine":188,"endColumn":108,"fix":{"range":[6482,6564],"text":"\n            `Estimated size: ${taskData.size} (${taskData.estimatedHours || 'Unknown'} hours)`\n          "}},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .size on an `any` value.","line":188,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .estimatedHours on an `any` value.","line":188,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":188,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":213,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":213,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7411,7414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7411,7414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7554,7557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7554,7557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interactive on an `any` value.","line":221,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":221,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":222,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":250,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":227,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":227,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":227,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":227,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":233,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":233,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":233,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":240,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":240,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":240,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":240,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":246,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":246,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":246,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":251,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":251,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":254,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":254,"column":30,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":254,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":254,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":254,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":255,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":255,"column":36,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":255,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":255,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":255,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":256,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":256,"column":31,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":256,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":256,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":256,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":256,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":257,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":257,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":257,"column":61,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":257,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":257,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":257,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":258,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":258,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":258,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .dueDate on an `any` value.","line":258,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":258,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":258,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":261,"column":25,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":261,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `UpdateTaskRequest`.","line":266,"column":60,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":266,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .force on an `any` value.","line":286,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":286,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":287,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":287,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9832,9835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9832,9835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":293,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":300,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":297,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .position on an `any` value.","line":326,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":326,"column":54,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":326,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .position on an `any` value.","line":326,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":353,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":353,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":353,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":353,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":354,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":354,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sort on an `any` value.","line":354,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":354,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":355,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":355,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":355,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":355,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":358,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":358,"column":28,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":358,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":358,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":359,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":359,"column":29,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":359,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":359,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":360,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":360,"column":27,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":360,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":360,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":360,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .board on an `any` value.","line":363,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":363,"endColumn":27},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··········'Loading·tasks...',⏎··········apiClient.getTasks(params),⏎·········` with `'Loading·tasks...',·apiClient.getTasks(params),`","line":367,"column":49,"nodeType":null,"messageId":"replace","endLine":370,"endColumn":10,"fix":{"range":[12493,12571],"text":"'Loading tasks...', apiClient.getTasks(params),"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":371,"column":1,"nodeType":null,"messageId":"delete","endLine":371,"endColumn":3,"fix":{"range":[12574,12576],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":372,"column":11,"nodeType":null,"messageId":"delete","endLine":372,"endColumn":13,"fix":{"range":[12638,12640],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··}⏎········` with `}`","line":373,"column":9,"nodeType":null,"messageId":"replace","endLine":374,"endColumn":9,"fix":{"range":[12682,12694],"text":"}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12730,12733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12730,12733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":376,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":383,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":383,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13120,13123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13120,13123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13138,13141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13138,13141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":388,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":388,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":388,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":388,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":389,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":389,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":389,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":389,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":390,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":390,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":390,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":391,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":391,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":391,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":392,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":392,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .assignee on an `any` value.","line":392,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":393,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":393,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":393,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":393,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":394,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":394,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":394,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":394,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTask' is assigned a value but never used.","line":397,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13404,13407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13404,13407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":400,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":400,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchMode' is assigned a value but never used.","line":403,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":403,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":406,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13839,13842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13839,13842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":406,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":407,"column":13,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":407,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":408,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":408,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13894,13950],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":408,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":408,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":408,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":408,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":409,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":409,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13963,14004],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":409,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":409,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14017,14072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":410,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":410,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .assignee on an `any` value.","line":411,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":411,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .assignee on an `any` value.","line":411,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":411,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":412,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":412,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":412,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":412,"column":60,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":412,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":412,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":412,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":413,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":413,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":413,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":413,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":416,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":431,"endColumn":15},{"ruleId":"default-case","severity":2,"message":"Expected a default case.","line":433,"column":13,"nodeType":"SwitchStatement","messageId":"missingDefaultCase","endLine":486,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":435,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":435,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":435,"column":61,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":435,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":435,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":68},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15322,15391],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":440,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":440,"endColumn":68},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":444,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":451,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":444,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":451,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":452,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":452,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":452,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":452,"column":51,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":452,"endColumn":59},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":456,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":463,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":456,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":463,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":464,"column":44,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":464,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":464,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":464,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":464,"column":55,"nodeType":"Property","messageId":"anyAssignment","endLine":464,"endColumn":72},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":468,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":475,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":468,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":475,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":472,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":472,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":477,"column":46,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":477,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":477,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":477,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTask' is defined but never used. Allowed unused args must match /^_/u.","line":493,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":493,"endColumn":71},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'selectedTask' is already declared in the upper scope on line 397 column 13.","line":493,"column":54,"nodeType":"Identifier","messageId":"noShadow","endLine":493,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":493,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":493,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17350,17353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17350,17353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":493,"column":73,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":493,"endColumn":75},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":497,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":503,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":497,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":503,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":504,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":504,"endColumn":37},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":507,"column":25,"nodeType":null,"messageId":"delete","endLine":507,"endColumn":26,"fix":{"range":[17832,17833],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":508,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":508,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":508,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":508,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLowerCase on an `any` value.","line":508,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":508,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includes on an `any` value.","line":508,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":508,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":508,"column":54,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":508,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLowerCase on an `any` value.","line":508,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":508,"endColumn":71},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":509,"column":24,"nodeType":null,"messageId":"preferOptionalChain","endLine":509,"endColumn":92,"fix":{"range":[17934,18002],"text":"t.assignee?.toLowerCase().includes(query.toLowerCase())"}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":509,"column":38,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":509,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":509,"column":38,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":509,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLowerCase on an `any` value.","line":509,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":509,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .includes on an `any` value.","line":509,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":509,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":509,"column":72,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":509,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLowerCase on an `any` value.","line":509,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":509,"endColumn":89},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":510,"column":24,"nodeType":null,"messageId":"preferOptionalChain","endLine":510,"endColumn":111,"fix":{"range":[18030,18117],"text":"t.tags?.some((tag: string) => tag.toLowerCase().includes(query.toLowerCase()))"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·t.tags.some((tag:·string)·=>·tag.toLowerCase().includes(query.toLowerCase())` with `⏎························t.tags.some((tag:·string)·=>⏎··························tag.toLowerCase().includes(query.toLowerCase())⏎························`","line":510,"column":33,"nodeType":null,"messageId":"replace","endLine":510,"endColumn":110,"fix":{"range":[18039,18116],"text":"\n                        t.tags.some((tag: string) =>\n                          tag.toLowerCase().includes(query.toLowerCase())\n                        "}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":510,"column":34,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":510,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .some on an `any` value.","line":510,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":510,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":510,"column":90,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":510,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":510,"column":90,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":510,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toLowerCase on an `any` value.","line":510,"column":96,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":510,"endColumn":107},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18524,18527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18524,18527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":521,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":521,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18542,18545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18542,18545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":522,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":522,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":522,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":522,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":523,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":523,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .title on an `any` value.","line":523,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":523,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":524,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":524,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":524,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":524,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":525,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":525,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":525,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":525,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":526,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":526,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .assignee on an `any` value.","line":526,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":526,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":527,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":527,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .tags on an `any` value.","line":527,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":527,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":528,"column":21,"nodeType":"Property","messageId":"anyAssignment","endLine":528,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":528,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":528,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":531,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":531,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18933,18969],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":533,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":533,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19022,19065],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":537,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":537,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19150,19191],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":538,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":538,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19208,19252],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":539,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":539,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19269,19305],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":540,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":540,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19322,19355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19372,19410],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":542,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":542,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19427,19473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":543,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":543,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19490,19525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":544,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":544,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19542,19567],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19958,20008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":568,"column":27,"nodeType":"Identifier","messageId":"voidReturnProperty","endLine":568,"endColumn":43},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":569,"column":25,"nodeType":"Identifier","messageId":"voidReturnProperty","endLine":569,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":581,"column":9,"nodeType":"Identifier","messageId":"unsafeCall","endLine":581,"endColumn":15},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `⏎`","line":581,"column":62,"nodeType":null,"messageId":"delete","endLine":582,"endColumn":1,"fix":{"range":[20962,20963],"text":""}}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":240,"fixableErrorCount":11,"fixableWarningCount":2,"source":"import type { Command } from 'commander';\nimport inquirer from 'inquirer';\nimport type { CliComponents } from '../types';\nimport { createTaskPrompt, PromptCancelledError } from '../prompts/task-prompts';\nimport { spinner } from '../utils/spinner';\nimport chalk from 'chalk';\n\nexport function registerTaskCommands(program: Command): void {\n  const taskCmd = program.command('task').alias('t').description('Manage tasks');\n\n  // Get global components with proper typing\n  const getComponents = (): CliComponents => global.cliComponents;\n\n  taskCmd\n    .command('list')\n    .alias('ls')\n    .description('List tasks')\n    .option('-b, --board <id>', 'filter by board ID')\n    .option('-s, --status <status>', 'filter by status')\n    .option('-t, --tags <tags>', 'filter by tags (comma-separated)')\n    .option('-l, --limit <number>', 'limit number of results', '20')\n    .option('--sort <field>', 'sort by field', 'priority')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async options => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        const params: Record<string, string> = {\n          limit: options.limit,\n          sort: options.sort,\n          order: options.order,\n        };\n\n        if (options.board) params.board = options.board;\n        if (options.status) params.status = options.status;\n        if (options.tags) params.tags = options.tags;\n\n        // Use default board if no board specified\n        if (!options.board && config.getDefaultBoard()) {\n          params.board = config.getDefaultBoard()!;\n        }\n\n        const tasks = (await apiClient.getTasks(params)) as any;\n\n        if (!tasks || tasks.length === 0) {\n          formatter.info('No tasks found');\n          return;\n        }\n\n        formatter.output(tasks, {\n          fields: ['id', 'title', 'status', 'priority', 'dueDate', 'createdAt'],\n          headers: ['ID', 'Title', 'Status', 'Priority', 'Due Date', 'Created'],\n        });\n      } catch (error) {\n        formatter.error(\n          `Failed to list tasks: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('show <id>')\n    .description('Show task details')\n    .option('--context', 'include AI context')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const task = await apiClient.getTask(id);\n\n        if (!task) {\n          formatter.error(`Task ${id} not found`);\n          process.exit(1);\n        }\n\n        formatter.output(task);\n\n        if (options.context) {\n          formatter.info('Getting AI context...');\n          try {\n            const context = await apiClient.getTaskContext(id);\n            console.log('\\n--- AI Context ---');\n            formatter.output(context);\n          } catch (error) {\n            formatter.warn('Could not retrieve AI context');\n          }\n        }\n      } catch (error) {\n        formatter.error(\n          `Failed to get task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('create')\n    .alias('new')\n    .description('Create a new task')\n    .option('-t, --title <title>', 'task title')\n    .option('-d, --description <desc>', 'task description')\n    .option('-b, --board <id>', 'board ID')\n    .option('-c, --column <id>', 'column ID')\n    .option('-p, --priority <number>', 'priority (1-10)', '5')\n    .option('--due <date>', 'due date (YYYY-MM-DD)')\n    .option('--tags <tags>', 'tags (comma-separated)')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async options => {\n      const { config, apiClient, formatter } = getComponents();\n\n      let taskData: any = {};\n\n      if (options.interactive || !options.title) {\n        // Enhanced interactive mode with AI size estimation\n        try {\n          const defaults = {\n            title: options.title,\n            description: options.description,\n            due_date: options.due,\n            tags: options.tags ? options.tags.split(',').map((t: string) => t.trim()) : undefined,\n          };\n\n          const promptResult = await createTaskPrompt(defaults);\n          \n          // Map prompt result to task data\n          taskData = {\n            title: promptResult.title,\n            description: promptResult.description,\n            priority: promptResult.priority,\n            size: promptResult.size,\n            assignee: promptResult.assignee,\n            dueDate: promptResult.due_date,\n            estimatedHours: promptResult.estimated_hours,\n            tags: promptResult.tags,\n          };\n\n          // Convert priority from P1-P5 to 1-10 scale\n          if (promptResult.priority) {\n            const priorityMap = { P1: 10, P2: 8, P3: 5, P4: 3, P5: 1 };\n            taskData.priority = priorityMap[promptResult.priority] || 5;\n          }\n\n        } catch (error) {\n          if (error instanceof PromptCancelledError) {\n            formatter.warn('Task creation cancelled');\n            return;\n          }\n          throw error;\n        }\n      }\n\n      // Use command line options or answers\n      taskData.title = options.title || taskData.title;\n      taskData.description = options.description || taskData.description;\n      taskData.boardId = options.board || taskData.board || config.getDefaultBoard();\n      taskData.columnId = options.column || taskData.column;\n      taskData.priority = parseInt(options.priority || taskData.priority, 10);\n\n      if (options.due || taskData.dueDate) {\n        taskData.dueDate = options.due || taskData.dueDate;\n      }\n\n      if (options.tags || taskData.tags) {\n        const tagsStr = options.tags || taskData.tags;\n        taskData.tags = tagsStr.split(',').map((tag: string) => tag.trim());\n      }\n\n      try {\n        if (!taskData.boardId) {\n          formatter.error(\n            'Board ID is required. Set default board with \"kanban config set defaults.board <id>\"'\n          );\n          process.exit(1);\n        }\n\n        const task = await spinner.withSpinner(\n          `Creating task: ${taskData.title}`,\n          apiClient.createTask(taskData),\n          {\n            successText: `✅ Task created successfully`,\n            failText: `❌ Failed to create task`,\n          }\n        );\n\n        formatter.success(`Task ID: ${task.id || 'Unknown'}`);\n        if (taskData.size) {\n          formatter.info(`Estimated size: ${taskData.size} (${taskData.estimatedHours || 'Unknown'} hours)`);\n        }\n        formatter.output(task);\n      } catch (error) {\n        formatter.error(\n          `Failed to create task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('update <id>')\n    .description('Update a task')\n    .option('-t, --title <title>', 'task title')\n    .option('-d, --description <desc>', 'task description')\n    .option('-s, --status <status>', 'task status')\n    .option('-p, --priority <number>', 'priority (1-10)')\n    .option('--due <date>', 'due date (YYYY-MM-DD)')\n    .option('-i, --interactive', 'interactive mode')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        // Get current task data\n        const currentTask = (await apiClient.getTask(id)) as any;\n        if (!currentTask) {\n          formatter.error(`Task ${id} not found`);\n          process.exit(1);\n        }\n\n        let updates: any = {};\n\n        if (options.interactive) {\n          const answers = await inquirer.prompt([\n            {\n              type: 'input',\n              name: 'title',\n              message: 'Task title:',\n              default: currentTask.title,\n            },\n            {\n              type: 'input',\n              name: 'description',\n              message: 'Task description:',\n              default: currentTask.description || '',\n            },\n            {\n              type: 'list',\n              name: 'status',\n              message: 'Status:',\n              choices: ['todo', 'in_progress', 'completed', 'blocked'],\n              default: currentTask.status,\n            },\n            {\n              type: 'number',\n              name: 'priority',\n              message: 'Priority (1-10):',\n              default: currentTask.priority || 5,\n              validate: (input: number) =>\n                (input >= 1 && input <= 10) || 'Priority must be between 1 and 10',\n            },\n          ]);\n          updates = answers;\n        } else {\n          // Use command line options\n          if (options.title) updates.title = options.title;\n          if (options.description) updates.description = options.description;\n          if (options.status) updates.status = options.status;\n          if (options.priority) updates.priority = parseInt(options.priority, 10);\n          if (options.due) updates.dueDate = options.due;\n        }\n\n        if (Object.keys(updates).length === 0) {\n          formatter.warn('No updates specified');\n          return;\n        }\n\n        const updatedTask = await apiClient.updateTask(id, updates);\n        formatter.success('Task updated successfully');\n        formatter.output(updatedTask);\n      } catch (error) {\n        formatter.error(\n          `Failed to update task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('delete <id>')\n    .alias('rm')\n    .description('Delete a task')\n    .option('-f, --force', 'skip confirmation')\n    .action(async (id: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        if (!options.force) {\n          const task = (await apiClient.getTask(id)) as any;\n          if (!task) {\n            formatter.error(`Task ${id} not found`);\n            process.exit(1);\n          }\n\n          const { confirm } = await inquirer.prompt([\n            {\n              type: 'confirm',\n              name: 'confirm',\n              message: `Delete task \"${task.title}\"?`,\n              default: false,\n            },\n          ]);\n\n          if (!confirm) {\n            formatter.info('Delete cancelled');\n            return;\n          }\n        }\n\n        await apiClient.deleteTask(id);\n        formatter.success(`Task ${id} deleted successfully`);\n      } catch (error) {\n        formatter.error(\n          `Failed to delete task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('move <id> <column>')\n    .description('Move task to different column')\n    .option('-p, --position <number>', 'position in column')\n    .action(async (id: string, columnId: string, options) => {\n      const { apiClient, formatter } = getComponents();\n\n      try {\n        const position = options.position ? parseInt(options.position, 10) : undefined;\n        await apiClient.moveTask(id, columnId, position);\n        formatter.success(`Task ${id} moved to column ${columnId}`);\n      } catch (error) {\n        formatter.error(\n          `Failed to move task: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n\n  taskCmd\n    .command('select')\n    .alias('choose')\n    .description('Interactive task selection and management')\n    .option('-b, --board <id>', 'filter by board ID')\n    .option('-s, --status <status>', 'filter by status')\n    .option('-t, --tags <tags>', 'filter by tags (comma-separated)')\n    .option('--limit <number>', 'limit number of results', '50')\n    .option('--sort <field>', 'sort by field', 'priority')\n    .option('--order <direction>', 'sort order (asc/desc)', 'desc')\n    .action(async options => {\n      const { config, apiClient, formatter } = getComponents();\n\n      try {\n        // Fetch tasks with spinner\n        const params: Record<string, string> = {\n          limit: options.limit,\n          sort: options.sort,\n          order: options.order,\n        };\n\n        if (options.board) params.board = options.board;\n        if (options.status) params.status = options.status;\n        if (options.tags) params.tags = options.tags;\n\n        // Use default board if no board specified\n        if (!options.board && config.getDefaultBoard()) {\n          params.board = config.getDefaultBoard()!;\n        }\n\n        const tasks = await spinner.withSpinner(\n          'Loading tasks...',\n          apiClient.getTasks(params),\n          {\n            successText: 'Tasks loaded successfully',\n            failText: 'Failed to load tasks',\n          }\n        );\n\n        if (!tasks || (tasks as any).length === 0) {\n          formatter.info('No tasks found');\n          return;\n        }\n\n        // Start interactive task selection\n        const React = await import('react');\n        const { render } = await import('ink');\n        const { TaskList } = await import('../ui/components/TaskList');\n\n        // Transform API tasks to component format\n        const taskList = (tasks as any[]).map((task: any) => ({\n          id: task.id,\n          title: task.title,\n          status: task.status,\n          priority: task.priority,\n          assignee: task.assignee,\n          tags: task.tags,\n          due_date: task.due_date,\n        }));\n\n        let selectedTask: any = null;\n        let shouldExit = false;\n\n        const InteractiveTaskSelector = () => {\n          const [currentTasks, setCurrentTasks] = React.useState(taskList);\n          const [statusFilter, setStatusFilter] = React.useState<string[]>([]);\n          const [searchMode, setSearchMode] = React.useState(false);\n          const [searchQuery, setSearchQuery] = React.useState('');\n\n          const handleTaskSelect = async (task: any) => {\n            selectedTask = task;\n            console.log(`\\n✅ Selected: ${task.title} [${task.id}]`);\n            console.log(`   Status: ${task.status}`);\n            console.log(`   Priority: ${task.priority || 'None'}`);\n            if (task.assignee) console.log(`   Assignee: ${task.assignee}`);\n            if (task.tags?.length) console.log(`   Tags: ${task.tags.join(', ')}`);\n            if (task.due_date) console.log(`   Due: ${task.due_date}`);\n\n            // Ask what to do with selected task\n            const { action } = await inquirer.prompt([\n              {\n                type: 'list',\n                name: 'action',\n                message: 'What would you like to do?',\n                choices: [\n                  { name: 'View details', value: 'view' },\n                  { name: 'Edit task', value: 'edit' },\n                  { name: 'Move to column', value: 'move' },\n                  { name: 'Update status', value: 'status' },\n                  { name: 'Delete task', value: 'delete' },\n                  { name: 'Select another task', value: 'continue' },\n                  { name: 'Exit', value: 'exit' },\n                ],\n              },\n            ]);\n\n            switch (action) {\n              case 'view':\n                const taskDetails = await apiClient.getTask(task.id);\n                formatter.output(taskDetails);\n                break;\n              case 'edit':\n                // Launch edit command\n                console.log(`\\n💡 Run: kanban task update ${task.id} --interactive`);\n                break;\n              case 'move':\n                // Launch move command\n                const { columnId } = await inquirer.prompt([\n                  {\n                    type: 'input',\n                    name: 'columnId',\n                    message: 'Enter column ID to move to:',\n                    validate: (input: string) => input.length > 0 || 'Column ID is required',\n                  },\n                ]);\n                await apiClient.moveTask(task.id, columnId);\n                formatter.success(`Task moved to column ${columnId}`);\n                break;\n              case 'status':\n                const { newStatus } = await inquirer.prompt([\n                  {\n                    type: 'list',\n                    name: 'newStatus',\n                    message: 'Select new status:',\n                    choices: ['todo', 'in_progress', 'completed', 'blocked'],\n                  },\n                ]);\n                await apiClient.updateTask(task.id, { status: newStatus });\n                formatter.success(`Task status updated to ${newStatus}`);\n                break;\n              case 'delete':\n                const { confirm } = await inquirer.prompt([\n                  {\n                    type: 'confirm',\n                    name: 'confirm',\n                    message: `Delete task \"${task.title}\"?`,\n                    default: false,\n                  },\n                ]);\n                if (confirm) {\n                  await apiClient.deleteTask(task.id);\n                  formatter.success('Task deleted successfully');\n                }\n                break;\n              case 'continue':\n                return;\n              case 'exit':\n                shouldExit = true;\n                break;\n            }\n\n            if (action !== 'continue') {\n              shouldExit = true;\n            }\n          };\n\n          const handleKeyPress = async (key: string, selectedTask: any) => {\n            switch (key) {\n              case 'search':\n                setSearchMode(true);\n                const { query } = await inquirer.prompt([\n                  {\n                    type: 'input',\n                    name: 'query',\n                    message: 'Search tasks:',\n                  },\n                ]);\n                setSearchQuery(query);\n                if (query) {\n                  const filtered = taskList.filter(\n                    t => \n                      t.title.toLowerCase().includes(query.toLowerCase()) ||\n                      (t.assignee && t.assignee.toLowerCase().includes(query.toLowerCase())) ||\n                      (t.tags && t.tags.some((tag: string) => tag.toLowerCase().includes(query.toLowerCase())))\n                  );\n                  setCurrentTasks(filtered);\n                } else {\n                  setCurrentTasks(taskList);\n                }\n                setSearchMode(false);\n                break;\n              case 'refresh':\n                try {\n                  const refreshedTasks = await apiClient.getTasks(params);\n                  const refreshedTaskList = (refreshedTasks as any[]).map((task: any) => ({\n                    id: task.id,\n                    title: task.title,\n                    status: task.status,\n                    priority: task.priority,\n                    assignee: task.assignee,\n                    tags: task.tags,\n                    due_date: task.due_date,\n                  }));\n                  setCurrentTasks(refreshedTaskList);\n                  console.log('\\n🔄 Tasks refreshed');\n                } catch (error) {\n                  console.log('\\n❌ Failed to refresh tasks');\n                }\n                break;\n              case 'help':\n                console.log('\\n📖 Task Selection Help:');\n                console.log('  ↑/↓ or j/k: Navigate tasks');\n                console.log('  Enter: Select task');\n                console.log('  /: Search tasks');\n                console.log('  r: Refresh task list');\n                console.log('  h/l or ←/→: Filter by status');\n                console.log('  ?: Show this help');\n                console.log('  q: Exit');\n                break;\n              default:\n                // Handle status filter changes\n                if (key.startsWith('filter:')) {\n                  const status = key.replace('filter:', '');\n                  const filtered = taskList.filter(t => t.status === status);\n                  setCurrentTasks(filtered);\n                  setStatusFilter([status]);\n                  console.log(`\\n🔍 Filtered by status: ${status}`);\n                }\n                break;\n            }\n          };\n\n          React.useEffect(() => {\n            if (shouldExit) {\n              process.exit(0);\n            }\n          }, [shouldExit]);\n\n          return React.createElement(TaskList, {\n            tasks: currentTasks,\n            title: `Task Selection ${statusFilter.length ? `(${statusFilter.join(', ')})` : ''}${searchQuery ? ` - Search: \"${searchQuery}\"` : ''}`,\n            onTaskSelect: handleTaskSelect,\n            onKeyPress: handleKeyPress,\n            showSelection: true,\n            maxHeight: 15,\n            showStats: true,\n          });\n        };\n\n        // Show instructions\n        formatter.info(`Starting interactive task selection (${taskList.length} tasks)`);\n        formatter.info('Use ↑/↓ to navigate, Enter to select, ? for help, q to quit');\n\n        // Render the interactive task selector\n        render(React.createElement(InteractiveTaskSelector));\n\n      } catch (error) {\n        formatter.error(\n          `Failed to start task selection: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n        process.exit(1);\n      }\n    });\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/config.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":71,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":75,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .server on an `any` value.","line":75,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":76,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":76,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .auth on an `any` value.","line":76,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":77,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":77,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .defaults on an `any` value.","line":77,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":78,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":78,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .git on an `any` value.","line":78,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1719,1795],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2353,2356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2353,2356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2429,2432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2429,2432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":111,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":116,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":115,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":115,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [part] on an `any` value.","line":115,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2741,2744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2741,2744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2806,2809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2806,2809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":128,"column":43,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":128,"endColumn":46},{"ruleId":"no-continue","severity":2,"message":"Unexpected use of continue statement.","line":130,"column":18,"nodeType":"ContinueStatement","messageId":"unexpected","endLine":130,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [part] on an `any` value.","line":131,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [part] on an `any` value.","line":132,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":134,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":134,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [part] on an `any` value.","line":134,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":139,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":139,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [lastPart] on an `any` value.","line":139,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":23},{"ruleId":"no-new","severity":2,"message":"Do not use 'new' for side effects.","line":212,"column":7,"nodeType":"ExpressionStatement","messageId":"noNewStatement","endLine":212,"endColumn":36}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { existsSync, readFileSync, writeFileSync, mkdirSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { homedir } from 'os';\nimport chalk from 'chalk';\n\ninterface ConfigData {\n  server: {\n    url: string;\n    port?: number;\n  };\n  auth: {\n    apiKey?: string;\n    token?: string;\n  };\n  defaults: {\n    board?: string;\n    format: 'table' | 'json' | 'csv';\n    verbose: boolean;\n  };\n  git: {\n    enabled: boolean;\n    autoTag: boolean;\n    branchMapping: boolean;\n  };\n}\n\nconst DEFAULT_CONFIG: ConfigData = {\n  server: {\n    url: 'http://localhost:3000',\n    port: 3000,\n  },\n  auth: {},\n  defaults: {\n    format: 'table',\n    verbose: false,\n  },\n  git: {\n    enabled: true,\n    autoTag: true,\n    branchMapping: true,\n  },\n};\n\nexport class ConfigManager {\n  private readonly configPath: string;\n\n  private config: ConfigData;\n\n  constructor() {\n    this.configPath = join(homedir(), '.config', 'mcp-kanban', 'config.json');\n    this.config = this.load();\n  }\n\n  /**\n   * Check if config file exists\n   */\n  exists(): boolean {\n    return existsSync(this.configPath);\n  }\n\n  /**\n   * Load configuration from file or return defaults\n   */\n  private load(): ConfigData {\n    if (!this.exists()) {\n      return { ...DEFAULT_CONFIG };\n    }\n\n    try {\n      const data = readFileSync(this.configPath, 'utf8');\n      const loaded = JSON.parse(data);\n\n      // Merge with defaults to ensure all fields exist\n      return {\n        server: { ...DEFAULT_CONFIG.server, ...loaded.server },\n        auth: { ...DEFAULT_CONFIG.auth, ...loaded.auth },\n        defaults: { ...DEFAULT_CONFIG.defaults, ...loaded.defaults },\n        git: { ...DEFAULT_CONFIG.git, ...loaded.git },\n      };\n    } catch (error) {\n      console.error(chalk.yellow('Warning: Invalid config file, using defaults'));\n      return { ...DEFAULT_CONFIG };\n    }\n  }\n\n  /**\n   * Save configuration to file\n   */\n  save(): void {\n    try {\n      const configDir = dirname(this.configPath);\n      if (!existsSync(configDir)) {\n        mkdirSync(configDir, { recursive: true });\n      }\n\n      writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));\n    } catch (error) {\n      throw new Error(\n        `Failed to save config: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get configuration value by path\n   */\n  get<T = any>(path: string): T {\n    const parts = path.split('.');\n    let current: any = this.config;\n\n    for (const part of parts) {\n      if (current === null || current === undefined || part === undefined) {\n        return undefined as T;\n      }\n      current = current[part];\n    }\n\n    return current as T;\n  }\n\n  /**\n   * Set configuration value by path\n   */\n  set(path: string, value: any): void {\n    const parts = path.split('.');\n    let current: any = this.config;\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      if (!part) continue;\n      if (!(part in current) || typeof current[part] !== 'object') {\n        current[part] = {};\n      }\n      current = current[part];\n    }\n\n    const lastPart = parts[parts.length - 1];\n    if (lastPart) {\n      current[lastPart] = value;\n    }\n  }\n\n  /**\n   * Get all configuration\n   */\n  getAll(): ConfigData {\n    return { ...this.config };\n  }\n\n  /**\n   * Reset to defaults\n   */\n  reset(): void {\n    this.config = { ...DEFAULT_CONFIG };\n  }\n\n  /**\n   * Get server URL\n   */\n  getServerUrl(): string {\n    return this.get<string>('server.url');\n  }\n\n  /**\n   * Get API key\n   */\n  getApiKey(): string | undefined {\n    return this.get<string>('auth.apiKey');\n  }\n\n  /**\n   * Set API key\n   */\n  setApiKey(apiKey: string): void {\n    this.set('auth.apiKey', apiKey);\n    this.save();\n  }\n\n  /**\n   * Get default board\n   */\n  getDefaultBoard(): string | undefined {\n    return this.get<string>('defaults.board');\n  }\n\n  /**\n   * Set default board\n   */\n  setDefaultBoard(boardId: string): void {\n    this.set('defaults.board', boardId);\n    this.save();\n  }\n\n  /**\n   * Get git configuration\n   */\n  getGitConfig(): ConfigData['git'] {\n    return this.get<ConfigData['git']>('git');\n  }\n\n  /**\n   * Validate configuration\n   */\n  validate(): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!this.getServerUrl()) {\n      errors.push('Server URL is required');\n    }\n\n    try {\n      new URL(this.getServerUrl());\n    } catch {\n      errors.push('Server URL must be a valid URL');\n    }\n\n    const format = this.get<string>('defaults.format');\n    if (format && !['table', 'json', 'csv'].includes(format)) {\n      errors.push('Format must be one of: table, json, csv');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Get config file path\n   */\n  getConfigPath(): string {\n    return this.configPath;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/estimation/__tests__/task-size-estimator.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":190,"column":56,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":190,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":221,"column":56,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":221,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit tests for TaskSizeEstimator\n */\n\nimport { TaskSizeEstimator } from '../task-size-estimator';\n\ndescribe('TaskSizeEstimator', () => {\n  let estimator: TaskSizeEstimator;\n\n  beforeEach(() => {\n    estimator = new TaskSizeEstimator();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default configuration', () => {\n      expect(estimator).toBeInstanceOf(TaskSizeEstimator);\n    });\n\n    it('should accept custom historical data', () => {\n      const historicalData = [\n        { title: 'Fix bug', size: 'S', actualHours: 2 },\n        { title: 'Add feature', size: 'M', actualHours: 8 },\n      ];\n\n      const customEstimator = new TaskSizeEstimator(historicalData);\n      expect(customEstimator).toBeInstanceOf(TaskSizeEstimator);\n    });\n  });\n\n  describe('estimateTime', () => {\n    it('should estimate time for simple tasks', () => {\n      const task = {\n        title: 'Fix typo in readme',\n        description: 'Simple text change',\n      };\n\n      const estimate = estimator.estimateTime(task);\n\n      expect(estimate).toHaveProperty('suggestedSize');\n      expect(estimate).toHaveProperty('estimatedHours');\n      expect(estimate).toHaveProperty('confidence');\n      expect(estimate).toHaveProperty('reasoning');\n      expect(estimate.confidence).toBeGreaterThan(0);\n      expect(estimate.confidence).toBeLessThanOrEqual(1);\n    });\n\n    it('should suggest XS for very simple tasks', () => {\n      const task = {\n        title: 'Fix typo',\n        description: 'Change one word',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.suggestedSize).toBe('XS');\n      expect(estimate.estimatedHours).toBeLessThanOrEqual(1);\n    });\n\n    it('should suggest larger sizes for complex tasks', () => {\n      const task = {\n        title: 'Implement user authentication system',\n        description:\n          'Build complete auth with JWT, OAuth, password reset, email verification, rate limiting, and security audit',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(['L', 'XL']).toContain(estimate.suggestedSize);\n      expect(estimate.estimatedHours).toBeGreaterThan(8);\n    });\n\n    it('should handle tasks with no description', () => {\n      const task = {\n        title: 'Update user profile',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate).toHaveProperty('suggestedSize');\n      expect(estimate.confidence).toBeGreaterThan(0);\n    });\n\n    it('should provide reasoning for estimates', () => {\n      const task = {\n        title: 'Add new API endpoint',\n        description: 'Create REST endpoint for user management',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.reasoning).toContain('API');\n      expect(estimate.reasoning.length).toBeGreaterThan(0);\n    });\n\n    it('should handle complex technical tasks', () => {\n      const task = {\n        title: 'Optimize database performance',\n        description: 'Add indexes, optimize queries, implement caching, database migrations',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(['M', 'L', 'XL']).toContain(estimate.suggestedSize);\n      expect(estimate.confidence).toBeGreaterThan(0.3);\n    });\n  });\n\n  describe('groupTasksBySize', () => {\n    it('should group tasks by estimated size', () => {\n      const tasks = [\n        { title: 'Fix typo', description: 'Simple change' },\n        { title: 'Add feature', description: 'Complex new functionality with API integration' },\n        { title: 'Update readme', description: 'Documentation update' },\n        { title: 'Refactor module', description: 'Major code restructuring' },\n      ];\n\n      const grouped = estimator.groupTasksBySize(tasks);\n\n      expect(grouped).toHaveProperty('XS');\n      expect(grouped).toHaveProperty('S');\n      expect(grouped).toHaveProperty('M');\n      expect(grouped).toHaveProperty('L');\n      expect(grouped).toHaveProperty('XL');\n\n      // Check that each group is an array\n      Object.values(grouped).forEach(group => {\n        expect(Array.isArray(group)).toBe(true);\n      });\n    });\n\n    it('should handle empty task array', () => {\n      const grouped = estimator.groupTasksBySize([]);\n\n      Object.values(grouped).forEach(group => {\n        expect(group).toHaveLength(0);\n      });\n    });\n\n    it('should include task details in grouped results', () => {\n      const tasks = [{ title: 'Simple task', description: 'Easy fix' }];\n\n      const grouped = estimator.groupTasksBySize(tasks);\n      const allTasks = Object.values(grouped).flat();\n\n      expect(allTasks.length).toBe(1);\n      expect(allTasks[0]).toHaveProperty('task');\n      expect(allTasks[0]).toHaveProperty('estimate');\n      expect(allTasks[0].task.title).toBe('Simple task');\n    });\n  });\n\n  describe('displayEstimates', () => {\n    let consoleSpy: jest.SpyInstance;\n\n    beforeEach(() => {\n      consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n    });\n\n    afterEach(() => {\n      consoleSpy.mockRestore();\n    });\n\n    it('should display estimates for task groups', () => {\n      const taskGroups = {\n        XS: [\n          {\n            task: { title: 'Fix typo', description: 'Simple change' },\n            estimate: {\n              suggestedSize: 'XS',\n              estimatedHours: 0.5,\n              confidence: 0.9,\n              reasoning: 'Simple text change',\n            },\n          },\n        ],\n        S: [],\n        M: [\n          {\n            task: { title: 'Add feature', description: 'New functionality' },\n            estimate: {\n              suggestedSize: 'M',\n              estimatedHours: 4,\n              confidence: 0.7,\n              reasoning: 'Moderate complexity',\n            },\n          },\n        ],\n        L: [],\n        XL: [],\n      };\n\n      estimator.displayEstimates(taskGroups);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const output = consoleSpy.mock.calls.map(call => call[0]).join('\\n');\n      expect(output).toContain('XS');\n      expect(output).toContain('Fix typo');\n      expect(output).toContain('M');\n      expect(output).toContain('Add feature');\n    });\n\n    it('should handle empty task groups', () => {\n      const emptyGroups = {\n        XS: [],\n        S: [],\n        M: [],\n        L: [],\n        XL: [],\n      };\n\n      expect(() => estimator.displayEstimates(emptyGroups)).not.toThrow();\n      expect(consoleSpy).toHaveBeenCalled();\n    });\n\n    it('should show summary statistics', () => {\n      const taskGroups = {\n        XS: [{ task: { title: 'Task 1' }, estimate: { estimatedHours: 1 } }],\n        S: [{ task: { title: 'Task 2' }, estimate: { estimatedHours: 2 } }],\n        M: [],\n        L: [],\n        XL: [],\n      };\n\n      estimator.displayEstimates(taskGroups);\n\n      const output = consoleSpy.mock.calls.map(call => call[0]).join('\\n');\n      expect(output).toContain('Total');\n      expect(output).toContain('2'); // Total tasks\n    });\n  });\n\n  describe('suggestTaskSize', () => {\n    it('should return valid size suggestions', () => {\n      const validSizes = ['XS', 'S', 'M', 'L', 'XL'];\n\n      const suggestions = [\n        estimator.suggestTaskSize('Fix typo'),\n        estimator.suggestTaskSize('Add new feature with database changes'),\n        estimator.suggestTaskSize('Refactor entire authentication system'),\n      ];\n\n      suggestions.forEach(suggestion => {\n        expect(validSizes).toContain(suggestion);\n      });\n    });\n\n    it('should handle empty titles', () => {\n      const suggestion = estimator.suggestTaskSize('');\n      expect(['XS', 'S', 'M', 'L', 'XL']).toContain(suggestion);\n    });\n\n    it('should be consistent for similar inputs', () => {\n      const title1 = 'Fix login bug';\n      const title2 = 'Fix login bug';\n\n      const suggestion1 = estimator.suggestTaskSize(title1);\n      const suggestion2 = estimator.suggestTaskSize(title2);\n\n      expect(suggestion1).toBe(suggestion2);\n    });\n\n    it('should recognize common patterns', () => {\n      const fixSuggestion = estimator.suggestTaskSize('Fix small CSS issue');\n      const implementSuggestion = estimator.suggestTaskSize(\n        'Implement complete user management system'\n      );\n\n      expect(['XS', 'S']).toContain(fixSuggestion);\n      expect(['L', 'XL']).toContain(implementSuggestion);\n    });\n  });\n\n  describe('complexity factors', () => {\n    it('should identify API-related complexity', () => {\n      const task = {\n        title: 'Create REST API',\n        description: 'Build endpoints with authentication',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.estimatedHours).toBeGreaterThan(2);\n    });\n\n    it('should identify database-related complexity', () => {\n      const task = {\n        title: 'Database migration',\n        description: 'Create new tables and relationships',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.estimatedHours).toBeGreaterThan(1);\n    });\n\n    it('should identify UI complexity', () => {\n      const task = {\n        title: 'Build responsive dashboard',\n        description: 'Create interactive charts and forms',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.estimatedHours).toBeGreaterThan(2);\n    });\n\n    it('should identify testing complexity', () => {\n      const task = {\n        title: 'Add comprehensive tests',\n        description: 'Unit tests, integration tests, e2e tests',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.estimatedHours).toBeGreaterThan(3);\n    });\n  });\n\n  describe('confidence scoring', () => {\n    it('should have high confidence for simple tasks', () => {\n      const task = {\n        title: 'Fix typo',\n        description: 'Change one word',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.confidence).toBeGreaterThan(0.8);\n    });\n\n    it('should have lower confidence for vague tasks', () => {\n      const task = {\n        title: 'Improve performance',\n        description: '',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.confidence).toBeLessThan(0.7);\n    });\n\n    it('should have moderate confidence for well-defined tasks', () => {\n      const task = {\n        title: 'Add user registration form',\n        description: 'Create form with validation and email confirmation',\n      };\n\n      const estimate = estimator.estimateTime(task);\n      expect(estimate.confidence).toBeGreaterThan(0.5);\n      expect(estimate.confidence).toBeLessThan(0.9);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/estimation/task-size-estimator.ts","messages":[{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'groupTasksBySize'.","line":103,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":103,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":106,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":112,"endColumn":6},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3275,3277],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3581,3635],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":127,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":146,"endColumn":6},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3760,3804],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3811,3881],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3888,3981],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3988,4054],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4061,4149],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4202,4242],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4300,4343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4371,4385],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4524,4564],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4569,4605],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4610,4682],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4687,4780],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4785,4873],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4999,5035],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":158,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":163,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'percentage' is assigned a value but never used.","line":159,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5154,5304],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'suggestTaskSize'.","line":169,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":169,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6312,6314],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":245,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":248,"endColumn":8},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":275,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":285,"endColumn":6},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":279,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":279,"endColumn":27},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":281,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":281,"endColumn":24},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":283,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":283,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9533,9535],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'size' is defined but never used. Allowed unused args must match /^_/u.","line":330,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":330,"endColumn":70},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":338,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":338,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10506,10508],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatSize'.","line":414,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":414,"endColumn":21},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatConfidence'.","line":435,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":435,"endColumn":27}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import chalk from 'chalk';\nimport { formatDuration, formatProgressBar, formatKeyValue } from '../utils/formatter';\nimport type { TaskSize } from '../prompts/validators';\n\nexport interface TaskEstimate {\n  size: TaskSize;\n  minHours: number;\n  maxHours: number;\n  avgHours: number;\n  confidence: 'low' | 'medium' | 'high';\n  reasoning: string[];\n}\n\nexport interface TaskForEstimation {\n  title: string;\n  description?: string;\n  tags?: string[];\n  subtaskCount?: number;\n  dependencyCount?: number;\n}\n\nexport interface EstimationConfig {\n  sizeHours: {\n    S: { min: number; max: number; avg: number };\n    M: { min: number; max: number; avg: number };\n    L: { min: number; max: number; avg: number };\n    XL: { min: number; max: number; avg: number };\n  };\n  complexityFactors: {\n    subtasks: number;\n    dependencies: number;\n    unknownTech: number;\n    testing: number;\n    documentation: number;\n  };\n  velocityMultiplier: number;\n}\n\n/**\n * Estimates task sizes and time requirements\n */\nexport class TaskSizeEstimator {\n  private readonly config: EstimationConfig;\n\n  private readonly historicalData: Map<string, { estimated: number; actual: number }>;\n\n  constructor(config?: Partial<EstimationConfig>) {\n    this.config = {\n      sizeHours: {\n        S: { min: 0.5, max: 2, avg: 1 },\n        M: { min: 2, max: 4, avg: 3 },\n        L: { min: 4, max: 8, avg: 6 },\n        XL: { min: 8, max: 16, avg: 12 },\n      },\n      complexityFactors: {\n        subtasks: 0.2, // 20% increase per subtask\n        dependencies: 0.15, // 15% increase per dependency\n        unknownTech: 0.5, // 50% increase for unknown technology\n        testing: 0.3, // 30% increase for testing requirements\n        documentation: 0.2, // 20% increase for documentation\n      },\n      velocityMultiplier: 1.0, // Adjusted based on team velocity\n      ...config,\n    };\n\n    this.historicalData = new Map();\n  }\n\n  /**\n   * Estimate time for a single task\n   */\n  estimateTime(task: TaskForEstimation): TaskEstimate {\n    const suggestedSize = this.suggestTaskSize(task);\n    const baseEstimate = this.config.sizeHours[suggestedSize];\n\n    // Calculate complexity multiplier\n    const complexityMultiplier = this.calculateComplexityMultiplier(task);\n\n    // Apply complexity and velocity\n    const minHours = baseEstimate.min * complexityMultiplier * this.config.velocityMultiplier;\n    const maxHours = baseEstimate.max * complexityMultiplier * this.config.velocityMultiplier;\n    const avgHours = baseEstimate.avg * complexityMultiplier * this.config.velocityMultiplier;\n\n    // Determine confidence based on various factors\n    const confidence = this.calculateConfidence(task, suggestedSize);\n\n    // Generate reasoning\n    const reasoning = this.generateReasoning(task, suggestedSize, complexityMultiplier);\n\n    return {\n      size: suggestedSize,\n      minHours: Math.round(minHours * 10) / 10,\n      maxHours: Math.round(maxHours * 10) / 10,\n      avgHours: Math.round(avgHours * 10) / 10,\n      confidence,\n      reasoning,\n    };\n  }\n\n  /**\n   * Group tasks by size\n   */\n  groupTasksBySize<T extends { size?: TaskSize }>(tasks: T[]): Map<TaskSize | 'Unknown', T[]> {\n    const groups = new Map<TaskSize | 'Unknown', T[]>();\n\n    for (const task of tasks) {\n      const size = task.size || 'Unknown';\n      if (!groups.has(size)) {\n        groups.set(size, []);\n      }\n      groups.get(size)!.push(task);\n    }\n\n    return groups;\n  }\n\n  /**\n   * Display estimates in a formatted way\n   */\n  displayEstimates(estimates: Array<{ task: TaskForEstimation; estimate: TaskEstimate }>): void {\n    console.log(chalk.cyan('\\n📊 Task Size Estimates\\n'));\n\n    let totalMin = 0;\n    let totalMax = 0;\n    let totalAvg = 0;\n\n    for (const { task, estimate } of estimates) {\n      console.log(chalk.bold(`📋 ${task.title}`));\n      console.log(formatKeyValue('  Size', this.formatSize(estimate.size)));\n      console.log(formatKeyValue('  Time Range', `${estimate.minHours}h - ${estimate.maxHours}h`));\n      console.log(formatKeyValue('  Average', `${estimate.avgHours}h`));\n      console.log(formatKeyValue('  Confidence', this.formatConfidence(estimate.confidence)));\n\n      if (estimate.reasoning.length > 0) {\n        console.log(chalk.gray('  Reasoning:'));\n        estimate.reasoning.forEach(reason => {\n          console.log(chalk.gray(`    • ${reason}`));\n        });\n      }\n\n      console.log();\n\n      totalMin += estimate.minHours;\n      totalMax += estimate.maxHours;\n      totalAvg += estimate.avgHours;\n    }\n\n    // Summary\n    console.log(chalk.gray('─'.repeat(50)));\n    console.log(chalk.bold('Summary:'));\n    console.log(formatKeyValue('Total Tasks', estimates.length.toString()));\n    console.log(formatKeyValue('Total Time', `${totalMin}h - ${totalMax}h (avg: ${totalAvg}h)`));\n    console.log(formatKeyValue('Duration', `${formatDuration(totalAvg * 60 * 60 * 1000)}`));\n\n    // Size distribution\n    const sizeGroups = this.groupTasksBySize(estimates.map(e => ({ size: e.estimate.size })));\n    console.log('\\nSize Distribution:');\n    for (const [size, tasks] of sizeGroups) {\n      const percentage = (tasks.length / estimates.length) * 100;\n      console.log(\n        `  ${this.formatSize(size as TaskSize)}: ${formatProgressBar(tasks.length, estimates.length, 20)} ${tasks.length} tasks`\n      );\n    }\n  }\n\n  /**\n   * Suggest task size based on heuristics\n   */\n  suggestTaskSize(task: TaskForEstimation): TaskSize {\n    let score = 0;\n\n    // Title length heuristic\n    if (task.title.length < 30) score += 1;\n    else if (task.title.length < 50) score += 2;\n    else score += 3;\n\n    // Description complexity\n    if (task.description) {\n      const wordCount = task.description.split(/\\s+/).length;\n      if (wordCount < 20) score += 1;\n      else if (wordCount < 50) score += 2;\n      else if (wordCount < 100) score += 3;\n      else score += 4;\n    }\n\n    // Subtasks\n    if (task.subtaskCount) {\n      if (task.subtaskCount <= 2) score += 1;\n      else if (task.subtaskCount <= 5) score += 2;\n      else score += 3;\n    }\n\n    // Dependencies\n    if (task.dependencyCount) {\n      if (task.dependencyCount === 1) score += 1;\n      else if (task.dependencyCount <= 3) score += 2;\n      else score += 3;\n    }\n\n    // Keywords in title/description\n    const text = `${task.title} ${task.description || ''}`.toLowerCase();\n    const complexKeywords = [\n      'refactor',\n      'migrate',\n      'redesign',\n      'architecture',\n      'integration',\n      'optimize',\n    ];\n    const simpleKeywords = ['fix', 'update', 'add', 'remove', 'change', 'typo'];\n\n    if (complexKeywords.some(keyword => text.includes(keyword))) {\n      score += 3;\n    } else if (simpleKeywords.some(keyword => text.includes(keyword))) {\n      score += 1;\n    }\n\n    // Tags\n    if (task.tags) {\n      const complexTags = ['backend', 'database', 'api', 'performance', 'security'];\n      const hasComplexTag = task.tags.some(tag =>\n        complexTags.some(complex => tag.toLowerCase().includes(complex))\n      );\n      if (hasComplexTag) score += 2;\n    }\n\n    // Map score to size\n    if (score <= 3) return 'S';\n    if (score <= 7) return 'M';\n    if (score <= 12) return 'L';\n    return 'XL';\n  }\n\n  /**\n   * Update velocity based on historical data\n   */\n  updateVelocity(taskId: string, estimatedHours: number, actualHours: number): void {\n    this.historicalData.set(taskId, { estimated: estimatedHours, actual: actualHours });\n\n    // Recalculate velocity multiplier based on historical data\n    if (this.historicalData.size >= 5) {\n      let totalEstimated = 0;\n      let totalActual = 0;\n\n      for (const { estimated, actual } of this.historicalData.values()) {\n        totalEstimated += estimated;\n        totalActual += actual;\n      }\n\n      // New velocity is the ratio of actual to estimated\n      this.config.velocityMultiplier = totalActual / totalEstimated;\n\n      // Clamp to reasonable values\n      this.config.velocityMultiplier = Math.max(0.5, Math.min(2.0, this.config.velocityMultiplier));\n    }\n  }\n\n  /**\n   * Get estimation accuracy report\n   */\n  getAccuracyReport(): {\n    accuracy: number;\n    overestimated: number;\n    underestimated: number;\n    samples: number;\n  } {\n    if (this.historicalData.size === 0) {\n      return { accuracy: 0, overestimated: 0, underestimated: 0, samples: 0 };\n    }\n\n    let correctEstimates = 0;\n    let overestimated = 0;\n    let underestimated = 0;\n\n    for (const { estimated, actual } of this.historicalData.values()) {\n      const variance = Math.abs(estimated - actual) / estimated;\n      if (variance <= 0.2) {\n        // Within 20% is considered accurate\n        correctEstimates++;\n      } else if (estimated > actual) {\n        overestimated++;\n      } else {\n        underestimated++;\n      }\n    }\n\n    return {\n      accuracy: (correctEstimates / this.historicalData.size) * 100,\n      overestimated: (overestimated / this.historicalData.size) * 100,\n      underestimated: (underestimated / this.historicalData.size) * 100,\n      samples: this.historicalData.size,\n    };\n  }\n\n  /**\n   * Calculate complexity multiplier\n   */\n  private calculateComplexityMultiplier(task: TaskForEstimation): number {\n    let multiplier = 1.0;\n\n    if (task.subtaskCount) {\n      multiplier += task.subtaskCount * this.config.complexityFactors.subtasks;\n    }\n\n    if (task.dependencyCount) {\n      multiplier += task.dependencyCount * this.config.complexityFactors.dependencies;\n    }\n\n    // Check for complexity indicators in text\n    const text = `${task.title} ${task.description || ''}`.toLowerCase();\n\n    if (text.includes('unknown') || text.includes('research') || text.includes('investigate')) {\n      multiplier += this.config.complexityFactors.unknownTech;\n    }\n\n    if (text.includes('test') || text.includes('testing') || text.includes('qa')) {\n      multiplier += this.config.complexityFactors.testing;\n    }\n\n    if (text.includes('document') || text.includes('docs') || text.includes('readme')) {\n      multiplier += this.config.complexityFactors.documentation;\n    }\n\n    return multiplier;\n  }\n\n  /**\n   * Calculate confidence level\n   */\n  private calculateConfidence(task: TaskForEstimation, size: TaskSize): 'low' | 'medium' | 'high' {\n    let confidenceScore = 5; // Start at medium\n\n    // More information increases confidence\n    if (task.description) confidenceScore += 1;\n    if (task.tags && task.tags.length > 0) confidenceScore += 1;\n\n    // Clear scope increases confidence\n    const text = `${task.title} ${task.description || ''}`.toLowerCase();\n    if (text.includes('specifically') || text.includes('exactly') || text.includes('only')) {\n      confidenceScore += 1;\n    }\n\n    // Uncertainty decreases confidence\n    if (text.includes('maybe') || text.includes('possibly') || text.includes('unknown')) {\n      confidenceScore -= 2;\n    }\n\n    // Many dependencies decrease confidence\n    if (task.dependencyCount && task.dependencyCount > 3) {\n      confidenceScore -= 1;\n    }\n\n    // Historical accuracy affects confidence\n    const accuracy = this.getAccuracyReport();\n    if (accuracy.samples > 10) {\n      if (accuracy.accuracy > 80) confidenceScore += 1;\n      else if (accuracy.accuracy < 50) confidenceScore -= 1;\n    }\n\n    if (confidenceScore >= 7) return 'high';\n    if (confidenceScore >= 4) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Generate reasoning for estimate\n   */\n  private generateReasoning(\n    task: TaskForEstimation,\n    size: TaskSize,\n    complexityMultiplier: number\n  ): string[] {\n    const reasons: string[] = [];\n\n    // Size reasoning\n    reasons.push(`Base size ${size} based on task complexity analysis`);\n\n    // Complexity factors\n    if (task.subtaskCount) {\n      reasons.push(\n        `${task.subtaskCount} subtask${task.subtaskCount > 1 ? 's' : ''} add complexity`\n      );\n    }\n\n    if (task.dependencyCount) {\n      reasons.push(`${task.dependencyCount} dependencies may cause delays`);\n    }\n\n    if (complexityMultiplier > 1.3) {\n      reasons.push(`Complexity multiplier of ${complexityMultiplier.toFixed(1)}x applied`);\n    }\n\n    // Historical data\n    if (this.historicalData.size > 5) {\n      const accuracy = this.getAccuracyReport();\n      if (accuracy.overestimated > 50) {\n        reasons.push('Historical data shows tendency to overestimate');\n      } else if (accuracy.underestimated > 50) {\n        reasons.push('Historical data shows tendency to underestimate');\n      }\n    }\n\n    // Velocity adjustment\n    if (this.config.velocityMultiplier !== 1.0) {\n      reasons.push(`Team velocity factor of ${this.config.velocityMultiplier.toFixed(1)}x applied`);\n    }\n\n    return reasons;\n  }\n\n  /**\n   * Format size for display\n   */\n  private formatSize(size: TaskSize): string {\n    const sizeColors = {\n      S: chalk.green,\n      M: chalk.yellow,\n      L: chalk.magenta,\n      XL: chalk.red,\n    };\n\n    const sizeLabels = {\n      S: 'Small',\n      M: 'Medium',\n      L: 'Large',\n      XL: 'Extra Large',\n    };\n\n    return sizeColors[size](`${size} (${sizeLabels[size]})`);\n  }\n\n  /**\n   * Format confidence for display\n   */\n  private formatConfidence(confidence: 'low' | 'medium' | 'high'): string {\n    const confidenceColors = {\n      low: chalk.red,\n      medium: chalk.yellow,\n      high: chalk.green,\n    };\n\n    return confidenceColors[confidence](confidence);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/formatter.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1313,1358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1445,1502],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1617,1678],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1820,1864],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2008,2064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'outputJson'.","line":105,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":105,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2157,2200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to function parameter 'data'.","line":114,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":114,"endColumn":11},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2540,2542],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":122,"column":51,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":122,"endColumn":59},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":123,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":123,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2603,2605],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2641,2672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3005,3035],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3413,3466],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3523,3525],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown>`.","line":156,"column":59,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":156,"endColumn":67},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":157,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":157,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3594,3596],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4129,4159],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4612,4642],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getNestedValue'.","line":203,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":203,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4844,4847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4844,4847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4855,4858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4855,4858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [key] on an `any` value.","line":207,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [key] on an `any` value.","line":207,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":89},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatValue'.","line":215,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":215,"endColumn":22},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":259,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":259,"endColumn":38,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6087,6087],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatHeader'.","line":275,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":275,"endColumn":23},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getTableFields'.","line":285,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":285,"endColumn":25},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatSize'.","line":356,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":356,"endColumn":13},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":363,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":363,"endColumn":18},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatDuration'.","line":372,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":372,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9199,9202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9199,9202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":391,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .id on an `any` value.","line":395,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":395,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":396,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":396,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .backupType on an `any` value.","line":396,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .enabled on an `any` value.","line":397,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .cronExpression on an `any` value.","line":398,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":398,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .cron on an `any` value.","line":398,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":398,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":400,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":400,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":401,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":401,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":407,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":407,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .createdAt on an `any` value.","line":407,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":407,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":408,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":408,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .updatedAt on an `any` value.","line":408,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":408,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .lastRunAt on an `any` value.","line":410,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":410,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":411,"column":40,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":411,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .lastRunAt on an `any` value.","line":411,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":411,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .nextRunAt on an `any` value.","line":414,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":414,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .next_run on an `any` value.","line":414,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":414,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":415,"column":40,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":415,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .nextRunAt on an `any` value.","line":415,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":415,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .next_run on an `any` value.","line":415,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":415,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .runCount on an `any` value.","line":421,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":421,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .failureCount on an `any` value.","line":422,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":422,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .runCount on an `any` value.","line":424,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":424,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .runCount on an `any` value.","line":426,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":426,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .failureCount on an `any` value.","line":426,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":426,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .runCount on an `any` value.","line":426,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":426,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .retentionDays on an `any` value.","line":435,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .compressionEnabled on an `any` value.","line":436,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":436,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .verificationEnabled on an `any` value.","line":437,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":437,"endColumn":61}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Table from 'cli-table3';\nimport chalk from 'chalk';\n\ntype OutputFormat = 'table' | 'json' | 'csv';\n\ninterface FormatterOptions {\n  format: OutputFormat;\n  verbose: boolean;\n  quiet: boolean;\n  color: boolean;\n}\n\nexport class OutputFormatter {\n  private readonly options: FormatterOptions = {\n    format: 'table',\n    verbose: false,\n    quiet: false,\n    color: true,\n  };\n\n  setFormat(format: OutputFormat): void {\n    this.options.format = format;\n  }\n\n  setVerbose(verbose: boolean): void {\n    this.options.verbose = verbose;\n  }\n\n  setQuiet(quiet: boolean): void {\n    this.options.quiet = quiet;\n  }\n\n  setColor(color: boolean): void {\n    this.options.color = color;\n  }\n\n  /**\n   * Format and output data in the specified format\n   */\n  output<T = unknown>(data: T, options?: { headers?: string[]; fields?: string[] }): void {\n    if (this.options.quiet && this.options.format !== 'json') {\n      return;\n    }\n\n    switch (this.options.format) {\n      case 'json':\n        this.outputJson(data);\n        break;\n      case 'csv':\n        this.outputCsv(data, options);\n        break;\n      case 'table':\n      default:\n        this.outputTable(data, options);\n        break;\n    }\n  }\n\n  /**\n   * Output success message\n   */\n  success(message: string): void {\n    if (!this.options.quiet) {\n      console.log(this.colorize(message, 'green'));\n    }\n  }\n\n  /**\n   * Output error message\n   */\n  error(message: string): void {\n    console.error(this.colorize(`Error: ${message}`, 'red'));\n  }\n\n  /**\n   * Output warning message\n   */\n  warn(message: string): void {\n    if (!this.options.quiet) {\n      console.warn(this.colorize(`Warning: ${message}`, 'yellow'));\n    }\n  }\n\n  /**\n   * Output info message\n   */\n  info(message: string): void {\n    if (this.options.verbose && !this.options.quiet) {\n      console.log(this.colorize(message, 'cyan'));\n    }\n  }\n\n  /**\n   * Output debug message\n   */\n  debug(message: string): void {\n    if (this.options.verbose && !this.options.quiet) {\n      console.log(this.colorize(`Debug: ${message}`, 'gray'));\n    }\n  }\n\n  /**\n   * Output JSON format\n   */\n  private outputJson<T>(data: T): void {\n    console.log(JSON.stringify(data, null, 2));\n  }\n\n  /**\n   * Output CSV format\n   */\n  private outputCsv<T>(data: T, options?: { headers?: string[]; fields?: string[] }): void {\n    if (!Array.isArray(data)) {\n      data = [data] as T;\n    }\n\n    const items = Array.isArray(data) ? data : [data];\n    if (items.length === 0) {\n      return;\n    }\n\n    const fields = options?.fields || Object.keys(items[0]);\n    const headers = options?.headers || fields;\n\n    // Output headers\n    console.log(headers.join(','));\n\n    // Output rows\n    items.forEach((item): void => {\n      const values = fields.map((field): string => {\n        const value = this.getNestedValue(item, field);\n        const stringValue = this.formatValue(value);\n        // Escape commas and quotes in CSV\n        return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n      });\n      console.log(values.join(','));\n    });\n  }\n\n  /**\n   * Output table format\n   */\n  private outputTable<T>(data: T, options?: { headers?: string[]; fields?: string[] }): void {\n    if (!Array.isArray(data)) {\n      // Single object - display as key-value pairs\n      this.outputObjectTable(data);\n      return;\n    }\n\n    const items = Array.isArray(data) ? data : [data];\n    if (items.length === 0) {\n      console.log(this.colorize('No items found', 'gray'));\n      return;\n    }\n\n    const fields = options?.fields || this.getTableFields(items[0]);\n    const headers = options?.headers || fields.map((field): string => this.formatHeader(field));\n\n    const table = new Table({\n      head: headers.map((h): string => this.colorize(h, 'cyan')),\n      style: {\n        'padding-left': 1,\n        'padding-right': 1,\n        head: this.options.color ? ['cyan'] : [],\n      },\n    });\n\n    items.forEach((item): void => {\n      const row = fields.map((field): string => {\n        const value = this.getNestedValue(item, field);\n        return this.formatTableValue(value, field);\n      });\n      table.push(row);\n    });\n\n    console.log(table.toString());\n  }\n\n  /**\n   * Output single object as key-value table\n   */\n  private outputObjectTable<T>(obj: T): void {\n    const table = new Table({\n      style: {\n        'padding-left': 1,\n        'padding-right': 1,\n      },\n    });\n\n    Object.entries(obj as Record<string, unknown>).forEach(([key, value]): void => {\n      table.push([\n        this.colorize(this.formatHeader(key), 'cyan'),\n        this.formatTableValue(value, key),\n      ]);\n    });\n\n    console.log(table.toString());\n  }\n\n  /**\n   * Get nested value from object using dot notation\n   */\n  private getNestedValue(obj: unknown, path: string): unknown {\n    return path\n      .split('.')\n      .reduce(\n        (current: any, key): any => (current && current[key] !== undefined ? current[key] : ''),\n        obj\n      );\n  }\n\n  /**\n   * Format value for display\n   */\n  private formatValue(value: unknown): string {\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    }\n\n    if (value instanceof Date) {\n      return value.toLocaleString();\n    }\n\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n\n    return String(value);\n  }\n\n  /**\n   * Format value for table display with colors\n   */\n  private formatTableValue(value: unknown, field: string): string {\n    const formatted = this.formatValue(value);\n\n    if (!this.options.color) {\n      return formatted;\n    }\n\n    // Apply field-specific coloring\n    if (field.includes('status')) {\n      if (formatted.toLowerCase().includes('completed')) {\n        return chalk.green(formatted);\n      }\n      if (formatted.toLowerCase().includes('in_progress')) {\n        return chalk.yellow(formatted);\n      }\n      if (formatted.toLowerCase().includes('todo')) {\n        return chalk.blue(formatted);\n      }\n    }\n\n    if (field.includes('priority')) {\n      const num = parseInt(formatted);\n      if (num >= 8) return chalk.red(formatted);\n      if (num >= 5) return chalk.yellow(formatted);\n      if (num >= 1) return chalk.green(formatted);\n    }\n\n    if (field.includes('date') || field.includes('time')) {\n      return chalk.gray(formatted);\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Format header text\n   */\n  private formatHeader(field: string): string {\n    return field\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, (str): string => str.toUpperCase())\n      .trim();\n  }\n\n  /**\n   * Get appropriate fields for table display\n   */\n  private getTableFields(obj: Record<string, unknown>): string[] {\n    const allFields = Object.keys(obj);\n\n    // Define field priority for common objects\n    const priorities = {\n      id: 1,\n      title: 2,\n      name: 2,\n      status: 3,\n      priority: 4,\n      description: 5,\n      createdAt: 8,\n      updatedAt: 9,\n    };\n\n    // Sort fields by priority, then alphabetically\n    return allFields.sort((a, b): number => {\n      const priorityA = priorities[a as keyof typeof priorities] || 6;\n      const priorityB = priorities[b as keyof typeof priorities] || 6;\n\n      if (priorityA !== priorityB) {\n        return priorityA - priorityB;\n      }\n\n      return a.localeCompare(b);\n    });\n  }\n\n  /**\n   * Apply color if color is enabled\n   */\n  private colorize(text: string, color: string): string {\n    if (!this.options.color) {\n      return text;\n    }\n\n    switch (color) {\n      case 'red':\n        return chalk.red(text);\n      case 'green':\n        return chalk.green(text);\n      case 'yellow':\n        return chalk.yellow(text);\n      case 'blue':\n        return chalk.blue(text);\n      case 'cyan':\n        return chalk.cyan(text);\n      case 'gray':\n        return chalk.gray(text);\n      default:\n        return text;\n    }\n  }\n\n  /**\n   * Create a progress bar\n   */\n  progressBar(current: number, total: number, width: number = 20): string {\n    const percentage = Math.round((current / total) * 100);\n    const filled = Math.round((current / total) * width);\n    const empty = width - filled;\n\n    const bar = '█'.repeat(filled) + '░'.repeat(empty);\n    const text = `${bar} ${percentage}% (${current}/${total})`;\n\n    return this.options.color ? chalk.cyan(text) : text;\n  }\n\n  /**\n   * Format file size\n   */\n  formatSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Format duration\n   */\n  formatDuration(ms: number): string {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}d ${hours % 24}h`;\n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  }\n\n  /**\n   * Format backup schedule information\n   */\n  formatSchedule(schedule: any): string {\n    const lines = [];\n\n    // Header\n    lines.push(this.formatHeader(`Schedule: ${schedule.name}`));\n    lines.push('');\n\n    // Basic info\n    lines.push(`ID: ${schedule.id}`);\n    lines.push(`Type: ${schedule.backupType?.toUpperCase() || 'N/A'}`);\n    lines.push(`Status: ${schedule.enabled ? chalk.green('ENABLED') : chalk.red('DISABLED')}`);\n    lines.push(`Cron: ${schedule.cronExpression || schedule.cron || 'N/A'}`);\n\n    if (schedule.description) {\n      lines.push(`Description: ${schedule.description}`);\n    }\n\n    // Timing info\n    lines.push('');\n    lines.push(this.formatHeader('Timing:'));\n    lines.push(`Created: ${new Date(schedule.createdAt).toLocaleString()}`);\n    lines.push(`Updated: ${new Date(schedule.updatedAt).toLocaleString()}`);\n\n    if (schedule.lastRunAt) {\n      lines.push(`Last Run: ${new Date(schedule.lastRunAt).toLocaleString()}`);\n    }\n\n    if (schedule.nextRunAt || schedule.next_run) {\n      lines.push(`Next Run: ${new Date(schedule.nextRunAt || schedule.next_run).toLocaleString()}`);\n    }\n\n    // Statistics\n    lines.push('');\n    lines.push(this.formatHeader('Statistics:'));\n    lines.push(`Total Runs: ${schedule.runCount || 0}`);\n    lines.push(`Failures: ${schedule.failureCount || 0}`);\n\n    if (schedule.runCount > 0) {\n      const successRate = (\n        ((schedule.runCount - (schedule.failureCount || 0)) / schedule.runCount) *\n        100\n      ).toFixed(1);\n      lines.push(`Success Rate: ${successRate}%`);\n    }\n\n    // Configuration\n    lines.push('');\n    lines.push(this.formatHeader('Configuration:'));\n    lines.push(`Retention: ${schedule.retentionDays || 30} days`);\n    lines.push(`Compression: ${schedule.compressionEnabled ? 'Enabled' : 'Disabled'}`);\n    lines.push(`Verification: ${schedule.verificationEnabled ? 'Enabled' : 'Disabled'}`);\n\n    return lines.join('\\n');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/index.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":54,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":54,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `OutputFormat`.","line":58,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":58,"endColumn":42},{"ruleId":"dot-notation","severity":2,"message":"[\"format\"] is better written in dot notation.","line":58,"column":33,"nodeType":"Literal","messageId":"useDot","endLine":58,"endColumn":41,"fix":{"range":[2404,2414],"text":".format"}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `boolean`.","line":59,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":59,"endColumn":44},{"ruleId":"dot-notation","severity":2,"message":"[\"verbose\"] is better written in dot notation.","line":59,"column":34,"nodeType":"Literal","messageId":"useDot","endLine":59,"endColumn":43,"fix":{"range":[2449,2460],"text":".verbose"}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `boolean`.","line":60,"column":24,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":60,"endColumn":40},{"ruleId":"dot-notation","severity":2,"message":"[\"quiet\"] is better written in dot notation.","line":60,"column":32,"nodeType":"Literal","messageId":"useDot","endLine":60,"endColumn":39,"fix":{"range":[2493,2502],"text":".quiet"}},{"ruleId":"dot-notation","severity":2,"message":"[\"noColor\"] is better written in dot notation.","line":61,"column":33,"nodeType":"Literal","messageId":"useDot","endLine":61,"endColumn":42,"fix":{"range":[2536,2547],"text":".noColor"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":68,"column":1,"nodeType":null,"messageId":"delete","endLine":68,"endColumn":7,"fix":{"range":[2783,2789],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `command·!==·'config'·&&·command·!==·'help'·&&·` with `⏎········command·!==·'config'·&&⏎········command·!==·'help'·&&`","line":70,"column":11,"nodeType":null,"messageId":"replace","endLine":70,"endColumn":57,"fix":{"range":[2840,2886],"text":"\n        command !== 'config' &&\n        command !== 'help' &&"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··········parentCommand·!==·'config'·&&·grandParentCommand·!==·'config'` with `········parentCommand·!==·'config'·&&⏎········grandParentCommand·!==·'config'⏎······`","line":71,"column":1,"nodeType":null,"messageId":"replace","endLine":71,"endColumn":72,"fix":{"range":[2887,2958],"text":"        parentCommand !== 'config' &&\n        grandParentCommand !== 'config'\n      "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2970,3063],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.red('No·configuration·found.·Run·\"kanban·config·init\"·to·get·started.')` with `⏎··········chalk.red('No·configuration·found.·Run·\"kanban·config·init\"·to·get·started.')⏎········`","line":72,"column":23,"nodeType":null,"messageId":"replace","endLine":72,"endColumn":100,"fix":{"range":[2984,3061],"text":"\n          chalk.red('No configuration found. Run \"kanban config init\" to get started.')\n        "}},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'formatError' was used before it was defined.","line":112,"column":24,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":112,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4279,4307],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":114,"column":1,"nodeType":null,"messageId":"delete","endLine":114,"endColumn":3,"fix":{"range":[4308,4310],"text":""}},{"ruleId":"dot-notation","severity":2,"message":"[\"verbose\"] is better written in dot notation.","line":115,"column":22,"nodeType":"Literal","messageId":"useDot","endLine":115,"endColumn":31,"fix":{"range":[4331,4342],"text":".verbose"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4350,4394],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4399,4466],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4434,4436],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'logErrorToFile' was used before it was defined.","line":121,"column":3,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":121,"endColumn":17},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":122,"column":1,"nodeType":null,"messageId":"delete","endLine":122,"endColumn":3,"fix":{"range":[4530,4532],"text":""}},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'getExitCode' was used before it was defined.","line":123,"column":16,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":123,"endColumn":27},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":131,"column":1,"nodeType":null,"messageId":"delete","endLine":131,"endColumn":3,"fix":{"range":[4720,4722],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":136,"column":1,"nodeType":null,"messageId":"delete","endLine":136,"endColumn":3,"fix":{"range":[4881,4883],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":140,"column":1,"nodeType":null,"messageId":"delete","endLine":140,"endColumn":3,"fix":{"range":[4973,4975],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `(⏎······`","line":142,"column":12,"nodeType":null,"messageId":"insert","endLine":142,"endColumn":12,"fix":{"range":[5074,5074],"text":"(\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········` with `······`","line":143,"column":1,"nodeType":null,"messageId":"replace","endLine":143,"endColumn":12,"fix":{"range":[5143,5154],"text":"      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":144,"column":1,"nodeType":null,"messageId":"delete","endLine":144,"endColumn":6,"fix":{"range":[5208,5213],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········chalk.gray('\\n···•·Test·connection:·kanban·config·test');` with `······chalk.gray('\\n···•·Test·connection:·kanban·config·test')`","line":145,"column":1,"nodeType":null,"messageId":"replace","endLine":145,"endColumn":69,"fix":{"range":[5294,5362],"text":"      chalk.gray('\\n   • Test connection: kanban config test')"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `}` with `··);`","line":146,"column":3,"nodeType":null,"messageId":"replace","endLine":146,"endColumn":4,"fix":{"range":[5365,5366],"text":"  );"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `}⏎`","line":147,"column":3,"nodeType":null,"messageId":"insert","endLine":147,"endColumn":3,"fix":{"range":[5369,5369],"text":"}\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `·(⏎·····`","line":149,"column":11,"nodeType":null,"messageId":"insert","endLine":149,"endColumn":11,"fix":{"range":[5461,5461],"text":" (\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":150,"column":7,"nodeType":null,"messageId":"delete","endLine":150,"endColumn":12,"fix":{"range":[5529,5534],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········chalk.gray('\\n···•·Update·credentials:·kanban·config·set·auth.apiKey·<key>')` with `······chalk.gray('\\n···•·Update·credentials:·kanban·config·set·auth.apiKey·<key>')⏎····)`","line":151,"column":1,"nodeType":null,"messageId":"replace","endLine":151,"endColumn":88,"fix":{"range":[5596,5683],"text":"      chalk.gray('\\n   • Update credentials: kanban config set auth.apiKey <key>')\n    )"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":153,"column":1,"nodeType":null,"messageId":"delete","endLine":153,"endColumn":3,"fix":{"range":[5689,5691],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `(⏎······`","line":155,"column":12,"nodeType":null,"messageId":"insert","endLine":155,"endColumn":12,"fix":{"range":[5781,5781],"text":"(\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········` with `······`","line":156,"column":1,"nodeType":null,"messageId":"replace","endLine":156,"endColumn":12,"fix":{"range":[5832,5843],"text":"      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·····chalk.gray('\\n···•·Contact·your·administrator');` with `chalk.gray('\\n···•·Contact·your·administrator')`","line":157,"column":7,"nodeType":null,"messageId":"replace","endLine":157,"endColumn":60,"fix":{"range":[5918,5971],"text":"chalk.gray('\\n   • Contact your administrator')"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `}` with `··);`","line":158,"column":3,"nodeType":null,"messageId":"replace","endLine":158,"endColumn":4,"fix":{"range":[5974,5975],"text":"  );"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `}⏎`","line":159,"column":3,"nodeType":null,"messageId":"insert","endLine":159,"endColumn":3,"fix":{"range":[5978,5978],"text":"}\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `(⏎······`","line":161,"column":12,"nodeType":null,"messageId":"insert","endLine":161,"endColumn":12,"fix":{"range":[6068,6068],"text":"(\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":162,"column":1,"nodeType":null,"messageId":"delete","endLine":162,"endColumn":6,"fix":{"range":[6106,6111],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········chalk.gray('\\n···•·List·available·resources·first')` with `······chalk.gray('\\n···•·List·available·resources·first')⏎····)`","line":163,"column":1,"nodeType":null,"messageId":"replace","endLine":163,"endColumn":63,"fix":{"range":[6176,6238],"text":"      chalk.gray('\\n   • List available resources first')\n    )"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":165,"column":1,"nodeType":null,"messageId":"delete","endLine":165,"endColumn":3,"fix":{"range":[6244,6246],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `(⏎······`","line":167,"column":12,"nodeType":null,"messageId":"insert","endLine":167,"endColumn":12,"fix":{"range":[6301,6301],"text":"(\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········` with `······`","line":168,"column":1,"nodeType":null,"messageId":"replace","endLine":168,"endColumn":12,"fix":{"range":[6336,6347],"text":"      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········chalk.gray('\\n···•·Try·again·or·check·server·status');` with `······chalk.gray('\\n···•·Try·again·or·check·server·status')`","line":169,"column":1,"nodeType":null,"messageId":"replace","endLine":169,"endColumn":66,"fix":{"range":[6398,6463],"text":"      chalk.gray('\\n   • Try again or check server status')"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `}` with `··);`","line":170,"column":3,"nodeType":null,"messageId":"replace","endLine":170,"endColumn":4,"fix":{"range":[6466,6467],"text":"  );"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `}⏎`","line":171,"column":3,"nodeType":null,"messageId":"insert","endLine":171,"endColumn":3,"fix":{"range":[6470,6470],"text":"}\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.red('\\n🚫·Security·Error:·')·+` with `(⏎······chalk.red('\\n🚫·Security·Error:·')·+⏎·····`","line":173,"column":12,"nodeType":null,"messageId":"replace","endLine":173,"endColumn":48,"fix":{"range":[6563,6599],"text":"(\n      chalk.red('\\n🚫 Security Error: ') +\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":174,"column":7,"nodeType":null,"messageId":"delete","endLine":174,"endColumn":12,"fix":{"range":[6622,6627],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":175,"column":1,"nodeType":null,"messageId":"delete","endLine":175,"endColumn":6,"fix":{"range":[6696,6701],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·····chalk.gray('\\n···•·Use:·kanban·security·report·(for·full·report)')` with `chalk.gray('\\n···•·Use:·kanban·security·report·(for·full·report)')⏎····)`","line":176,"column":7,"nodeType":null,"messageId":"replace","endLine":176,"endColumn":78,"fix":{"range":[6781,6852],"text":"chalk.gray('\\n   • Use: kanban security report (for full report)')\n    )"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":178,"column":1,"nodeType":null,"messageId":"delete","endLine":178,"endColumn":3,"fix":{"range":[6858,6860],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.yellow('\\n⚠️··Input·Security·Warning:·')·+` with `(⏎······chalk.yellow('\\n⚠️··Input·Security·Warning:·')·+⏎·····`","line":180,"column":12,"nodeType":null,"messageId":"replace","endLine":180,"endColumn":60,"fix":{"range":[6955,7003],"text":"(\n      chalk.yellow('\\n⚠️  Input Security Warning: ') +\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········` with `······`","line":181,"column":1,"nodeType":null,"messageId":"replace","endLine":181,"endColumn":12,"fix":{"range":[7020,7031],"text":"      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `···········chalk.gray('\\n···•·Check:·kanban·security·events');` with `······chalk.gray('\\n···•·Check:·kanban·security·events')`","line":182,"column":1,"nodeType":null,"messageId":"replace","endLine":182,"endColumn":63,"fix":{"range":[7086,7148],"text":"      chalk.gray('\\n   • Check: kanban security events')"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `}` with `··);`","line":183,"column":3,"nodeType":null,"messageId":"replace","endLine":183,"endColumn":4,"fix":{"range":[7151,7152],"text":"  );"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `}⏎`","line":184,"column":3,"nodeType":null,"messageId":"insert","endLine":184,"endColumn":3,"fix":{"range":[7155,7155],"text":"}\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.red('\\n❌·Error:·')·+` with `(⏎····chalk.red('\\n❌·Error:·')·+⏎···`","line":186,"column":10,"nodeType":null,"messageId":"replace","endLine":186,"endColumn":36,"fix":{"range":[7195,7221],"text":"(\n    chalk.red('\\n❌ Error: ') +\n   "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":187,"column":1,"nodeType":null,"messageId":"delete","endLine":187,"endColumn":6,"fix":{"range":[7238,7243],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·····chalk.gray('\\n···Use·--verbose·for·more·details'` with `chalk.gray('\\n···Use·--verbose·for·more·details')⏎··`","line":188,"column":5,"nodeType":null,"messageId":"replace","endLine":188,"endColumn":58,"fix":{"range":[7291,7344],"text":"chalk.gray('\\n   Use --verbose for more details')\n  "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":208,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":208,"endColumn":29},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":208,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":208,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":208,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":208,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":209,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":209,"endColumn":33},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":209,"column":18,"nodeType":"CallExpression","messageId":"unexpected","endLine":209,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":209,"column":18,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":209,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":210,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":210,"endColumn":29},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":210,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":210,"endColumn":29},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":210,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":210,"endColumn":29},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":211,"column":1,"nodeType":null,"messageId":"delete","endLine":211,"endColumn":5,"fix":{"range":[8111,8115],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":212,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":212,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":212,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .join on an `any` value.","line":212,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":212,"column":30,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":212,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .homedir on an `any` value.","line":212,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":212,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":213,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":213,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":213,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":213,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .join on an `any` value.","line":213,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":30},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":214,"column":1,"nodeType":null,"messageId":"delete","endLine":214,"endColumn":5,"fix":{"range":[8250,8254],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":216,"column":10,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":216,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .existsSync on an `any` value.","line":216,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":217,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .mkdirSync on an `any` value.","line":217,"column":10,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":19},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":219,"column":1,"nodeType":null,"messageId":"delete","endLine":219,"endColumn":5,"fix":{"range":[8392,8396],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":231,"column":1,"nodeType":null,"messageId":"delete","endLine":231,"endColumn":5,"fix":{"range":[8698,8702],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":232,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":232,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .appendFileSync on an `any` value.","line":232,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":22},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":232,"column":32,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":232,"endColumn":63,"fix":{"range":[8734,8765],"text":"`${JSON.stringify(logEntry)  }\\n`"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(error)` with `error`","line":239,"column":33,"nodeType":null,"messageId":"replace","endLine":239,"endColumn":40,"fix":{"range":[8907,8914],"text":"error"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8922,8975],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8978,9012],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(reason)` with `reason`","line":246,"column":34,"nodeType":null,"messageId":"replace","endLine":246,"endColumn":42,"fix":{"range":[9095,9103],"text":"reason"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9189,9251],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9254,9288],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9399,9479],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9662,9743],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":70,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":57,"fixableWarningCount":1,"source":"#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\n\nimport { ConfigManager } from './config';\nimport { ApiClient } from './client';\nimport { OutputFormatter } from './formatter';\nimport type { CliComponents } from './types';\nimport { addSecurityMiddleware } from './utils/secure-cli-wrapper';\n\nimport { registerTaskCommands } from './commands/tasks';\nimport { registerBoardCommands } from './commands/boards';\nimport { registerNoteCommands } from './commands/notes';\nimport { registerTagCommands } from './commands/tags';\nimport { registerConfigCommands } from './commands/config';\nimport { registerPriorityCommands } from './commands/priority';\nimport { registerContextCommands } from './commands/context';\nimport { registerSearchCommands } from './commands/search';\nimport { registerSubtaskCommands } from './commands/subtasks';\nimport { registerBackupCommands } from './commands/backup';\nimport { registerDatabaseCommands } from './commands/database';\nimport { registerRealtimeCommands } from './commands/realtime';\nimport { registerExportCommands } from './commands/export';\nimport { processTodosCommand } from './commands/process-todos';\n// import { interactiveViewCommand } from './commands/interactive-view'; // Temporarily disabled due to Ink/React ESM issues\n// import { dashboardCommand } from './commands/dashboard'; // Temporarily disabled due to Ink/React ESM issues\n// import { dashboardDemoCommand } from './commands/dashboard-demo'; // Temporarily disabled due to Ink/React ESM issues\nimport packageJson from '../../package.json';\n\nconst program = new Command();\n\n// Initialize global components\nconst config = new ConfigManager();\nconst apiClient = new ApiClient(config);\nconst formatter = new OutputFormatter();\n\n// Make globally available to commands with proper typing\nglobal.cliComponents = {\n  config,\n  apiClient,\n  formatter,\n} as CliComponents;\n\n// Program configuration\nprogram\n  .name('kanban')\n  .description('CLI for MCP Kanban Task Management System')\n  .version(packageJson.version)\n  .option('-v, --verbose', 'verbose output')\n  .option('-q, --quiet', 'minimal output')\n  .option('--format <type>', 'output format: table, json, csv', 'table')\n  .option('--no-color', 'disable colored output')\n  .hook('preAction', async thisCommand => {\n    const options = thisCommand.opts();\n\n    // Set formatter options\n    formatter.setFormat(options['format']);\n    formatter.setVerbose(options['verbose']);\n    formatter.setQuiet(options['quiet']);\n    formatter.setColor(!options['noColor']);\n\n    // Validate configuration exists\n    if (!config.exists()) {\n      const command = thisCommand.name();\n      const parentCommand = thisCommand.parent?.name();\n      const grandParentCommand = thisCommand.parent?.parent?.name();\n      \n      // Allow config commands and help\n      if (command !== 'config' && command !== 'help' && \n          parentCommand !== 'config' && grandParentCommand !== 'config') {\n        console.error(chalk.red('No configuration found. Run \"kanban config init\" to get started.'));\n        process.exit(1);\n      }\n    }\n  });\n\n// Add security middleware to the program\naddSecurityMiddleware(program);\n\n// Register command modules\nregisterTaskCommands(program);\nregisterBoardCommands(program);\nregisterNoteCommands(program);\nregisterTagCommands(program);\nregisterConfigCommands(program);\nregisterPriorityCommands(program);\nregisterContextCommands(program);\nregisterSearchCommands(program);\nregisterSubtaskCommands(program);\nregisterBackupCommands(program);\nregisterDatabaseCommands(program);\nregisterRealtimeCommands(program);\nregisterExportCommands(program);\n\n// Register development commands\nprogram.addCommand(processTodosCommand);\n// program.addCommand(interactiveViewCommand); // Temporarily disabled due to Ink/React ESM issues\n// program.addCommand(dashboardCommand); // Temporarily disabled due to Ink/React ESM issues\n// program.addCommand(dashboardDemoCommand); // Temporarily disabled due to Ink/React ESM issues\n\n// Enhanced global error handler\nprogram.exitOverride(err => {\n  if (err.code === 'commander.help') {\n    process.exit(0);\n  }\n  if (err.code === 'commander.version') {\n    process.exit(0);\n  }\n\n  // Handle different error types\n  const errorMessage = formatError(err);\n  console.error(errorMessage);\n  \n  if (program.opts()['verbose']) {\n    console.error(chalk.gray('\\nStack trace:'));\n    console.error(chalk.gray(err.stack || 'No stack trace available'));\n  }\n\n  // Log error to file if possible\n  logErrorToFile(err);\n  \n  process.exit(getExitCode(err));\n});\n\n/**\n * Format error message with appropriate styling\n */\nfunction formatError(error: Error): string {\n  const timestamp = new Date().toISOString();\n  \n  // Check error type and format accordingly\n  if (error.name === 'PromptCancelledError') {\n    return chalk.yellow('\\n⚠️  Operation cancelled by user');\n  }\n  \n  if (error.name === 'SpinnerError') {\n    return chalk.red(`\\n❌ ${error.message}`);\n  }\n  \n  if (error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND')) {\n    return chalk.red('\\n❌ Connection Error: Unable to connect to the server') +\n           chalk.gray('\\n   • Check if the server is running') +\n           chalk.gray('\\n   • Verify the server URL in config: kanban config show') +\n           chalk.gray('\\n   • Test connection: kanban config test');\n  }\n  \n  if (error.message.includes('401') || error.message.includes('Unauthorized')) {\n    return chalk.red('\\n❌ Authentication Error: Invalid credentials') +\n           chalk.gray('\\n   • Check your API key: kanban config show') +\n           chalk.gray('\\n   • Update credentials: kanban config set auth.apiKey <key>');\n  }\n  \n  if (error.message.includes('403') || error.message.includes('Forbidden')) {\n    return chalk.red('\\n❌ Permission Error: Access denied') +\n           chalk.gray('\\n   • You may not have permission for this resource') +\n           chalk.gray('\\n   • Contact your administrator');\n  }\n  \n  if (error.message.includes('404') || error.message.includes('Not Found')) {\n    return chalk.red('\\n❌ Resource Not Found') +\n           chalk.gray('\\n   • Check if the resource ID is correct') +\n           chalk.gray('\\n   • List available resources first');\n  }\n  \n  if (error.message.includes('timeout')) {\n    return chalk.red('\\n❌ Request Timeout') +\n           chalk.gray('\\n   • The operation took too long') +\n           chalk.gray('\\n   • Try again or check server status');\n  }\n  \n  if (error.message.includes('Security') || error.message.includes('blocked')) {\n    return chalk.red('\\n🚫 Security Error: ') + error.message +\n           chalk.gray('\\n   • Input contained potentially dangerous content') +\n           chalk.gray('\\n   • Use: kanban security events (to see details)') +\n           chalk.gray('\\n   • Use: kanban security report (for full report)');\n  }\n  \n  if (error.message.includes('sanitiz') || error.message.includes('Suspicious')) {\n    return chalk.yellow('\\n⚠️  Input Security Warning: ') + error.message +\n           chalk.gray('\\n   • Input was modified for security') +\n           chalk.gray('\\n   • Check: kanban security events');\n  }\n  \n  // Generic error formatting\n  return chalk.red('\\n❌ Error: ') + error.message +\n         chalk.gray(`\\n   Time: ${timestamp}`) +\n         chalk.gray('\\n   Use --verbose for more details');\n}\n\n/**\n * Get appropriate exit code based on error type\n */\nfunction getExitCode(error: Error): number {\n  if (error.name === 'PromptCancelledError') return 130; // SIGINT equivalent\n  if (error.message.includes('ECONNREFUSED')) return 111; // Connection refused\n  if (error.message.includes('401') || error.message.includes('Unauthorized')) return 401;\n  if (error.message.includes('403') || error.message.includes('Forbidden')) return 403;\n  if (error.message.includes('404') || error.message.includes('Not Found')) return 404;\n  return 1; // Generic error\n}\n\n/**\n * Log error to file for debugging (optional)\n */\nfunction logErrorToFile(error: Error): void {\n  try {\n    const fs = require('fs');\n    const path = require('path');\n    const os = require('os');\n    \n    const logDir = path.join(os.homedir(), '.config', 'mcp-kanban', 'logs');\n    const logFile = path.join(logDir, 'cli-errors.log');\n    \n    // Create log directory if it doesn't exist\n    if (!fs.existsSync(logDir)) {\n      fs.mkdirSync(logDir, { recursive: true });\n    }\n    \n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n      command: process.argv.slice(2).join(' '),\n      nodeVersion: process.version,\n      platform: process.platform,\n    };\n    \n    fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\\n');\n  } catch (logError) {\n    // Silently fail if logging doesn't work\n  }\n}\n\n// Process-level error handlers\nprocess.on('uncaughtException', (error) => {\n  console.error(chalk.red('\\n💥 Uncaught Exception:'));\n  console.error(formatError(error));\n  logErrorToFile(error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason) => {\n  const error = reason instanceof Error ? reason : new Error(String(reason));\n  console.error(chalk.red('\\n💥 Unhandled Promise Rejection:'));\n  console.error(formatError(error));\n  logErrorToFile(error);\n  process.exit(1);\n});\n\n// Graceful shutdown handlers\nprocess.on('SIGINT', () => {\n  console.log(chalk.yellow('\\n⚠️  Received SIGINT, shutting down gracefully...'));\n  // Clean up spinners and other resources\n  if (global.cliComponents?.apiClient) {\n    // Cleanup any ongoing requests\n  }\n  process.exit(130);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log(chalk.yellow('\\n⚠️  Received SIGTERM, shutting down gracefully...'));\n  process.exit(143);\n});\n\n// Handle no command provided\nif (process.argv.length <= 2) {\n  program.help();\n}\n\n// Parse command line arguments\nprogram.parse();\n\nexport { program };\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/prompts/__tests__/validators.test.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":51,"column":52,"nodeType":null,"messageId":"replace","endLine":51,"endColumn":110,"fix":{"range":[1630,1688],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":52,"column":52,"nodeType":null,"messageId":"replace","endLine":52,"endColumn":110,"fix":{"range":[1742,1800],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":53,"column":52,"nodeType":null,"messageId":"replace","endLine":53,"endColumn":110,"fix":{"range":[1854,1912],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":54,"column":52,"nodeType":null,"messageId":"replace","endLine":54,"endColumn":110,"fix":{"range":[1966,2024],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":55,"column":53,"nodeType":null,"messageId":"replace","endLine":55,"endColumn":111,"fix":{"range":[2079,2137],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":56,"column":52,"nodeType":null,"messageId":"replace","endLine":56,"endColumn":110,"fix":{"range":[2191,2249],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":57,"column":52,"nodeType":null,"messageId":"replace","endLine":57,"endColumn":110,"fix":{"range":[2303,2361],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'` with `⏎········'Task·title·contains·invalid·characters:·<·>·:·\"·\\\\·|·?·*'⏎······`","line":58,"column":52,"nodeType":null,"messageId":"replace","endLine":58,"endColumn":110,"fix":{"range":[2415,2473],"text":"\n        'Task title contains invalid characters: < > : \" \\\\ | ? *'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Board·name·can·only·contain·letters,·numbers,·spaces,·hyphens,·and·underscores'` with `⏎········'Board·name·can·only·contain·letters,·numbers,·spaces,·hyphens,·and·underscores'⏎······`","line":173,"column":52,"nodeType":null,"messageId":"replace","endLine":173,"endColumn":132,"fix":{"range":[7457,7537],"text":"\n        'Board name can only contain letters, numbers, spaces, hyphens, and underscores'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Column·name·must·be·less·than·30·characters'` with `⏎········'Column·name·must·be·less·than·30·characters'⏎······`","line":186,"column":55,"nodeType":null,"messageId":"replace","endLine":186,"endColumn":100,"fix":{"range":[8004,8049],"text":"\n        'Column name must be less than 30 characters'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Tag·name·can·only·contain·letters,·numbers,·hyphens,·and·underscores'` with `⏎········'Tag·name·can·only·contain·letters,·numbers,·hyphens,·and·underscores'⏎······`","line":200,"column":55,"nodeType":null,"messageId":"replace","endLine":200,"endColumn":125,"fix":{"range":[8591,8661],"text":"\n        'Tag name can only contain letters, numbers, hyphens, and underscores'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Tag·name·can·only·contain·letters,·numbers,·hyphens,·and·underscores'` with `⏎········'Tag·name·can·only·contain·letters,·numbers,·hyphens,·and·underscores'⏎······`","line":201,"column":48,"nodeType":null,"messageId":"replace","endLine":201,"endColumn":118,"fix":{"range":[8711,8781],"text":"\n        'Tag name can only contain letters, numbers, hyphens, and underscores'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'` with `⏎········'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'⏎······`","line":218,"column":49,"nodeType":null,"messageId":"replace","endLine":218,"endColumn":118,"fix":{"range":[9393,9462],"text":"\n        'Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'` with `⏎········'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'⏎······`","line":219,"column":47,"nodeType":null,"messageId":"replace","endLine":219,"endColumn":116,"fix":{"range":[9511,9580],"text":"\n        'Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'` with `⏎········'Please·enter·a·date·in·format·YYYY-MM-DD,·MM/DD/YYYY,·or·DD-MM-YYYY'⏎······`","line":228,"column":55,"nodeType":null,"messageId":"replace","endLine":228,"endColumn":124,"fix":{"range":[10144,10213],"text":"\n        'Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Time·estimate·seems·too·high.·Please·enter·a·value·less·than·1000·hours'` with `⏎········'Time·estimate·seems·too·high.·Please·enter·a·value·less·than·1000·hours'⏎······`","line":248,"column":49,"nodeType":null,"messageId":"replace","endLine":248,"endColumn":122,"fix":{"range":[11029,11102],"text":"\n        'Time estimate seems too high. Please enter a value less than 1000 hours'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎············{·name:·'Todo',·order:·0·},⏎··········` with `{·name:·'Todo',·order:·0·}`","line":367,"column":21,"nodeType":null,"messageId":"replace","endLine":369,"endColumn":11,"fix":{"range":[15160,15211],"text":"{ name: 'Todo', order: 0 }"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":387,"column":4,"nodeType":null,"messageId":"insert","endLine":387,"endColumn":4,"fix":{"range":[15638,15638],"text":"\n"}}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":18,"fixableWarningCount":0,"source":"/**\n * Unit tests for validator functions\n */\n\nimport {\n  validateTaskTitle,\n  validatePriority,\n  validateTaskSize,\n  validateEmail,\n  validateUrl,\n  validateGitRepoUrl,\n  validateBoardName,\n  validateColumnName,\n  validateTagName,\n  validateDate,\n  validateTimeEstimate,\n  validatePercentage,\n  createLengthValidator,\n  createEnumValidator,\n  TaskSchema,\n  BoardSchema,\n  TASK_SIZES,\n  PRIORITIES,\n} from '../validators';\n\ndescribe('Validator Functions', () => {\n  describe('validateTaskTitle', () => {\n    it('should accept valid task titles', () => {\n      expect(validateTaskTitle('Fix login bug')).toBe(true);\n      expect(validateTaskTitle('Implement user authentication')).toBe(true);\n      expect(validateTaskTitle('ABC')).toBe(true); // Minimum length (3 chars)\n      expect(validateTaskTitle('a'.repeat(200))).toBe(true); // Maximum length\n    });\n\n    it('should reject empty titles', () => {\n      expect(validateTaskTitle('')).toBe('Task title cannot be empty');\n      expect(validateTaskTitle('   ')).toBe('Task title cannot be empty');\n    });\n\n    it('should reject titles that are too short', () => {\n      expect(validateTaskTitle('A')).toBe('Task title must be at least 3 characters long');\n      expect(validateTaskTitle('AB')).toBe('Task title must be at least 3 characters long');\n    });\n\n    it('should reject titles that are too long', () => {\n      const longTitle = 'a'.repeat(201);\n      expect(validateTaskTitle(longTitle)).toBe('Task title must be less than 200 characters');\n    });\n\n    it('should reject titles with invalid characters', () => {\n      expect(validateTaskTitle('Task<Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task>Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task:Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task\"Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task\\\\Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task|Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task?Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n      expect(validateTaskTitle('Task*Title')).toBe('Task title contains invalid characters: < > : \" \\\\ | ? *');\n    });\n  });\n\n  describe('validatePriority', () => {\n    it('should accept valid priorities', () => {\n      expect(validatePriority('P1')).toBe(true);\n      expect(validatePriority('P2')).toBe(true);\n      expect(validatePriority('P3')).toBe(true);\n      expect(validatePriority('P4')).toBe(true);\n      expect(validatePriority('P5')).toBe(true);\n    });\n\n    it('should reject invalid priorities', () => {\n      expect(validatePriority('P0')).toBe(`Priority must be one of: ${PRIORITIES.join(', ')}`);\n      expect(validatePriority('P6')).toBe(`Priority must be one of: ${PRIORITIES.join(', ')}`);\n      expect(validatePriority('HIGH')).toBe(`Priority must be one of: ${PRIORITIES.join(', ')}`);\n      expect(validatePriority('')).toBe(`Priority must be one of: ${PRIORITIES.join(', ')}`);\n    });\n\n    it('should handle case insensitive input', () => {\n      expect(validatePriority('p1')).toBe(true);\n      expect(validatePriority('p2')).toBe(true);\n      expect(validatePriority('P1')).toBe(true);\n    });\n  });\n\n  describe('validateTaskSize', () => {\n    it('should accept valid task sizes', () => {\n      expect(validateTaskSize('S')).toBe(true);\n      expect(validateTaskSize('M')).toBe(true);\n      expect(validateTaskSize('L')).toBe(true);\n      expect(validateTaskSize('XL')).toBe(true);\n    });\n\n    it('should reject invalid task sizes', () => {\n      expect(validateTaskSize('XS')).toBe(`Task size must be one of: ${TASK_SIZES.join(', ')}`);\n      expect(validateTaskSize('XXL')).toBe(`Task size must be one of: ${TASK_SIZES.join(', ')}`);\n      expect(validateTaskSize('SMALL')).toBe(`Task size must be one of: ${TASK_SIZES.join(', ')}`);\n      expect(validateTaskSize('')).toBe(`Task size must be one of: ${TASK_SIZES.join(', ')}`);\n    });\n\n    it('should handle case insensitive input', () => {\n      expect(validateTaskSize('s')).toBe(true);\n      expect(validateTaskSize('m')).toBe(true);\n      expect(validateTaskSize('xl')).toBe(true);\n    });\n  });\n\n  describe('validateEmail', () => {\n    it('should accept valid email addresses', () => {\n      expect(validateEmail('user@example.com')).toBe(true);\n      expect(validateEmail('test.email+tag@domain.co.uk')).toBe(true);\n      expect(validateEmail('user123@test-domain.org')).toBe(true);\n    });\n\n    it('should reject invalid email addresses', () => {\n      expect(validateEmail('invalid-email')).toBe('Please enter a valid email address');\n      expect(validateEmail('user@')).toBe('Please enter a valid email address');\n      expect(validateEmail('@domain.com')).toBe('Please enter a valid email address');\n      // Note: The regex is simple and allows user..double@domain.com\n    });\n\n    it('should handle empty emails', () => {\n      expect(validateEmail('')).toBe('Email address cannot be empty');\n      expect(validateEmail('   ')).toBe('Email address cannot be empty');\n    });\n  });\n\n  describe('validateUrl', () => {\n    it('should accept valid URLs', () => {\n      expect(validateUrl('https://example.com')).toBe(true);\n      expect(validateUrl('http://test.org/path?query=value')).toBe(true);\n      expect(validateUrl('https://sub.domain.com:8080/path')).toBe(true);\n    });\n\n    it('should reject invalid URLs', () => {\n      expect(validateUrl('not-a-url')).toBe('Please enter a valid URL');\n      expect(validateUrl('https://')).toBe('Please enter a valid URL');\n      expect(validateUrl('invalid')).toBe('Please enter a valid URL');\n    });\n\n    it('should handle empty URLs', () => {\n      expect(validateUrl('')).toBe('URL cannot be empty');\n      expect(validateUrl('   ')).toBe('URL cannot be empty');\n    });\n  });\n\n  describe('validateGitRepoUrl', () => {\n    it('should accept valid Git repository URLs', () => {\n      expect(validateGitRepoUrl('https://github.com/user/repo')).toBe(true);\n      expect(validateGitRepoUrl('https://gitlab.com/user/repo')).toBe(true);\n      expect(validateGitRepoUrl('https://bitbucket.org/user/repo')).toBe(true);\n      // Note: SSH format git@github.com:user/repo.git doesn't pass URL validation\n    });\n\n    it('should reject invalid Git URLs', () => {\n      expect(validateGitRepoUrl('https://example.com/user/repo')).toBe(\n        'Please enter a valid Git repository URL (GitHub, GitLab, or Bitbucket)'\n      );\n      expect(validateGitRepoUrl('not-a-url')).toBe('Please enter a valid URL');\n    });\n  });\n\n  describe('validateBoardName', () => {\n    it('should accept valid board names', () => {\n      expect(validateBoardName('My Board')).toBe(true);\n      expect(validateBoardName('Project-123')).toBe(true);\n      expect(validateBoardName('Test_Board')).toBe(true);\n    });\n\n    it('should reject invalid board names', () => {\n      expect(validateBoardName('')).toBe('Board name cannot be empty');\n      expect(validateBoardName('A')).toBe('Board name must be at least 2 characters long');\n      expect(validateBoardName('a'.repeat(51))).toBe('Board name must be less than 50 characters');\n      expect(validateBoardName('Board@Name')).toBe('Board name can only contain letters, numbers, spaces, hyphens, and underscores');\n    });\n  });\n\n  describe('validateColumnName', () => {\n    it('should accept valid column names', () => {\n      expect(validateColumnName('To Do')).toBe(true);\n      expect(validateColumnName('In Progress')).toBe(true);\n      expect(validateColumnName('Done')).toBe(true);\n    });\n\n    it('should reject invalid column names', () => {\n      expect(validateColumnName('')).toBe('Column name cannot be empty');\n      expect(validateColumnName('a'.repeat(31))).toBe('Column name must be less than 30 characters');\n    });\n  });\n\n  describe('validateTagName', () => {\n    it('should accept valid tag names', () => {\n      expect(validateTagName('bug')).toBe(true);\n      expect(validateTagName('feature-request')).toBe(true);\n      expect(validateTagName('ui_ux')).toBe(true);\n    });\n\n    it('should reject invalid tag names', () => {\n      expect(validateTagName('')).toBe('Tag name cannot be empty');\n      expect(validateTagName('a'.repeat(21))).toBe('Tag name must be less than 20 characters');\n      expect(validateTagName('tag with spaces')).toBe('Tag name can only contain letters, numbers, hyphens, and underscores');\n      expect(validateTagName('tag@name')).toBe('Tag name can only contain letters, numbers, hyphens, and underscores');\n    });\n  });\n\n  describe('validateDate', () => {\n    it('should accept valid dates in various formats', () => {\n      expect(validateDate('2024-01-15')).toBe(true); // YYYY-MM-DD\n      expect(validateDate('01/15/2024')).toBe(true); // MM/DD/YYYY\n      // Note: DD-MM-YYYY format like 15-01-2024 might not be parsed correctly by Date constructor\n    });\n\n    it('should accept empty dates (optional)', () => {\n      expect(validateDate('')).toBe(true);\n      expect(validateDate('   ')).toBe(true);\n    });\n\n    it('should reject invalid date formats', () => {\n      expect(validateDate('invalid-date')).toBe('Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY');\n      expect(validateDate('2024/13/01')).toBe('Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY');\n      expect(validateDate('32-01-2024')).toBe('Please enter a valid date');\n    });\n\n    it('should reject invalid dates that match format but are invalid', () => {\n      // Note: JavaScript Date constructor is lenient and auto-corrects some invalid dates\n      // 2024-02-30 becomes 2024-03-01, so it's considered valid\n      expect(validateDate('2024-13-01')).toBe('Please enter a valid date'); // Month 13 doesn't exist\n      // This doesn't match any format pattern, so it fails format validation first\n      expect(validateDate('invalid-but-format')).toBe('Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY');\n    });\n  });\n\n  describe('validateTimeEstimate', () => {\n    it('should accept valid time estimates', () => {\n      expect(validateTimeEstimate('1')).toBe(true);\n      expect(validateTimeEstimate('2.5')).toBe(true);\n      expect(validateTimeEstimate('100')).toBe(true);\n    });\n\n    it('should accept empty time estimates (optional)', () => {\n      expect(validateTimeEstimate('')).toBe(true);\n      expect(validateTimeEstimate('   ')).toBe(true);\n    });\n\n    it('should reject invalid time estimates', () => {\n      expect(validateTimeEstimate('abc')).toBe('Please enter a valid number');\n      expect(validateTimeEstimate('0')).toBe('Time estimate must be greater than 0');\n      expect(validateTimeEstimate('-5')).toBe('Time estimate must be greater than 0');\n      expect(validateTimeEstimate('1000')).toBe('Time estimate seems too high. Please enter a value less than 1000 hours');\n    });\n  });\n\n  describe('validatePercentage', () => {\n    it('should accept valid percentages', () => {\n      expect(validatePercentage('0')).toBe(true);\n      expect(validatePercentage('50')).toBe(true);\n      expect(validatePercentage('100')).toBe(true);\n    });\n\n    it('should reject invalid percentages', () => {\n      expect(validatePercentage('')).toBe('Percentage cannot be empty');\n      expect(validatePercentage('abc')).toBe('Please enter a valid number');\n      expect(validatePercentage('-1')).toBe('Percentage must be between 0 and 100');\n      expect(validatePercentage('101')).toBe('Percentage must be between 0 and 100');\n    });\n  });\n\n  describe('createLengthValidator', () => {\n    it('should create a validator with custom length requirements', () => {\n      const validator = createLengthValidator('Custom Field', 5, 20);\n\n      expect(validator('Valid Input')).toBe(true);\n      expect(validator('')).toBe('Custom Field cannot be empty');\n      expect(validator('Hi')).toBe('Custom Field must be at least 5 characters long');\n      expect(validator('a'.repeat(21))).toBe('Custom Field must be less than 20 characters');\n    });\n\n    it('should allow empty input when minLength is 0', () => {\n      const validator = createLengthValidator('Optional Field', 0, 10);\n      expect(validator('')).toBe(true);\n    });\n  });\n\n  describe('createEnumValidator', () => {\n    it('should create a validator for custom enums', () => {\n      const options = ['red', 'green', 'blue'] as const;\n      const validator = createEnumValidator('Color', options);\n\n      expect(validator('red')).toBe(true);\n      expect(validator('green')).toBe(true);\n      expect(validator('blue')).toBe(true);\n      expect(validator('yellow')).toBe('Color must be one of: red, green, blue');\n      expect(validator('')).toBe('Color must be one of: red, green, blue');\n    });\n  });\n\n  describe('Zod Schemas', () => {\n    describe('TaskSchema', () => {\n      it('should validate correct task objects', () => {\n        const validTask = {\n          title: 'Test Task',\n          description: 'Test description',\n          priority: 'P2',\n          size: 'M',\n          assignee: 'john.doe',\n          due_date: '2024-12-31T10:00:00Z',\n          tags: ['bug', 'frontend'],\n        };\n\n        const result = TaskSchema.safeParse(validTask);\n        expect(result.success).toBe(true);\n      });\n\n      it('should reject invalid task objects', () => {\n        const invalidTask = {\n          title: 'AB', // Too short (min 3)\n          priority: 'P6', // Invalid priority\n          size: 'XXL', // Invalid size\n          due_date: 'invalid-date', // Invalid datetime\n        };\n\n        const result = TaskSchema.safeParse(invalidTask);\n        expect(result.success).toBe(false);\n      });\n\n      it('should handle minimal valid task', () => {\n        const minimalTask = {\n          title: 'Minimal Task',\n        };\n\n        const result = TaskSchema.safeParse(minimalTask);\n        expect(result.success).toBe(true);\n      });\n    });\n\n    describe('BoardSchema', () => {\n      it('should validate correct board objects', () => {\n        const validBoard = {\n          name: 'Test Board',\n          description: 'Test board description',\n          columns: [\n            { name: 'Todo', order: 0 },\n            { name: 'In Progress', order: 1 },\n            { name: 'Done', order: 2 },\n          ],\n        };\n\n        const result = BoardSchema.safeParse(validBoard);\n        expect(result.success).toBe(true);\n      });\n\n      it('should reject invalid board objects', () => {\n        const invalidBoard = {\n          name: 'A', // Too short (min 2)\n          description: 'Valid description',\n          columns: [\n            { name: '', order: 0 }, // Empty column name\n          ],\n        };\n\n        const result = BoardSchema.safeParse(invalidBoard);\n        expect(result.success).toBe(false);\n      });\n\n      it('should reject board with invalid name characters', () => {\n        const invalidBoard = {\n          name: 'Invalid@Name',\n          columns: [\n            { name: 'Todo', order: 0 },\n          ],\n        };\n\n        const result = BoardSchema.safeParse(invalidBoard);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Constants', () => {\n    it('should export correct task sizes', () => {\n      expect(TASK_SIZES).toEqual(['S', 'M', 'L', 'XL']);\n    });\n\n    it('should export correct priorities', () => {\n      expect(PRIORITIES).toEqual(['P1', 'P2', 'P3', 'P4', 'P5']);\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/prompts/board-prompts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'spinner' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PromptCancelledError' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[652,704],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":29,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":29,"column":27,"nodeType":"Identifier","messageId":"unsafeCall","endLine":29,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":36,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":36,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":48,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":53,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":62,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":53,"column":33,"nodeType":"Identifier","messageId":"unsafeCall","endLine":53,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":67,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":94,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":67,"column":32,"nodeType":"Identifier","messageId":"unsafeCall","endLine":67,"endColumn":39},{"ruleId":"default-case","severity":2,"message":"Expected a default case.","line":97,"column":5,"nodeType":"SwitchStatement","messageId":"missingDefaultCase","endLine":132,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":139,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":148,"endColumn":9},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":139,"column":30,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":148,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":139,"column":36,"nodeType":"Identifier","messageId":"unsafeCall","endLine":139,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":145,"column":45,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":145,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":153,"column":24,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":40},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":154,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":154,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":164,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":171,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":164,"column":30,"nodeType":"Identifier","messageId":"unsafeCall","endLine":164,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4556,4609],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4612,4652],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4655,4706],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":176,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":176,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":177,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4742,4795],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":178,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4802,4864],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4867,4931],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4934,4974],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":185,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":185,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":185,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":186,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":186,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":186,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":188,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":188,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":196,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":196,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":196,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":203,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":203,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .confirmed on an `any` value.","line":203,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":203,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5697,5755],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":229,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":235,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":229,"column":28,"nodeType":"Identifier","messageId":"unsafeCall","endLine":229,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .selected on an `any` value.","line":237,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .selected on an `any` value.","line":237,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":237,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":241,"column":33,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":241,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .selected on an `any` value.","line":241,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":243,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":248,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":243,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":243,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .selected on an `any` value.","line":250,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":250,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .selected on an `any` value.","line":254,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":254,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":254,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":254,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6511,6513],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6714,6762],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":265,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":286,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":265,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":265,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":270,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":270,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":271,"column":43,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":271,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":288,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":288,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .position on an `any` value.","line":294,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":294,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":303,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":303,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":303,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":303,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":304,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":304,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .position on an `any` value.","line":304,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":304,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8029,8079],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":321,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":360,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":321,"column":26,"nodeType":"Identifier","messageId":"unsafeCall","endLine":321,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":327,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":327,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":328,"column":42,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":328,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":356,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":356,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9019,9021],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":365,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":366,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":366,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":366,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":366,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":368,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":368,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":369,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":369,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .description on an `any` value.","line":369,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":369,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isPublic on an `any` value.","line":371,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":371,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":372,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":372,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .isPublic on an `any` value.","line":372,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .defaultAssignee on an `any` value.","line":374,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":375,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":375,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .defaultAssignee on an `any` value.","line":375,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .autoArchiveDays on an `any` value.","line":377,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":378,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":378,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .autoArchiveDays on an `any` value.","line":378,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":395,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":395,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10004,10057],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10093,10140],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10145,10159],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10167,10231],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":403,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":403,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10234,10293],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":406,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":411,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":406,"column":35,"nodeType":"Identifier","messageId":"unsafeCall","endLine":406,"endColumn":42}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import prompts from 'prompts';\nimport chalk from 'chalk';\nimport { validateBoardName, validateColumnName } from './validators';\nimport { spinner } from '../utils/spinner';\nimport { PromptCancelledError } from './task-prompts';\n\nexport interface BoardSetupInput {\n  name: string;\n  description?: string;\n  columns: Array<{ name: string; order: number }>;\n  isPublic?: boolean;\n}\n\nexport interface ColumnInput {\n  name: string;\n  position?: 'start' | 'end' | 'after';\n  afterColumn?: string;\n}\n\n/**\n * Quick board setup with prompts library\n */\nexport async function quickBoardSetup(\n  defaults?: Partial<BoardSetupInput>\n): Promise<BoardSetupInput> {\n  console.log(chalk.cyan('\\n🚀 Quick Board Setup\\n'));\n\n  // Board name and description\n  const boardInfo = await prompts([\n    {\n      type: 'text',\n      name: 'name',\n      message: 'Board name:',\n      initial: defaults?.name,\n      validate: value => {\n        const result = validateBoardName(value);\n        return result === true ? true : result;\n      },\n    },\n    {\n      type: 'text',\n      name: 'description',\n      message: 'Description (optional):',\n      initial: defaults?.description,\n    },\n  ]);\n\n  if (!boardInfo.name) {\n    throw new Error('Board setup cancelled');\n  }\n\n  // Column setup\n  const { useTemplate } = await prompts({\n    type: 'select',\n    name: 'useTemplate',\n    message: 'Column setup:',\n    choices: [\n      { title: 'Use template', value: 'template' },\n      { title: 'Custom columns', value: 'custom' },\n    ],\n    initial: 0,\n  });\n\n  let columns: Array<{ name: string; order: number }> = [];\n\n  if (useTemplate === 'template') {\n    const { template } = await prompts({\n      type: 'select',\n      name: 'template',\n      message: 'Choose template:',\n      choices: [\n        {\n          title: 'Basic Kanban (To Do, In Progress, Done)',\n          value: 'basic',\n          description: 'Simple 3-column board',\n        },\n        {\n          title: 'Scrum Board (Backlog, To Do, In Progress, Review, Done)',\n          value: 'scrum',\n          description: 'Standard Scrum workflow',\n        },\n        {\n          title: 'Bug Tracking (New, Confirmed, In Progress, Testing, Resolved)',\n          value: 'bugs',\n          description: 'Bug tracking workflow',\n        },\n        {\n          title: 'Content Pipeline (Ideas, Writing, Editing, Review, Published)',\n          value: 'content',\n          description: 'Content creation workflow',\n        },\n      ],\n      initial: 0,\n    });\n\n    // Set columns based on template\n    switch (template) {\n      case 'basic':\n        columns = [\n          { name: 'To Do', order: 0 },\n          { name: 'In Progress', order: 1 },\n          { name: 'Done', order: 2 },\n        ];\n        break;\n      case 'scrum':\n        columns = [\n          { name: 'Backlog', order: 0 },\n          { name: 'To Do', order: 1 },\n          { name: 'In Progress', order: 2 },\n          { name: 'Review', order: 3 },\n          { name: 'Done', order: 4 },\n        ];\n        break;\n      case 'bugs':\n        columns = [\n          { name: 'New', order: 0 },\n          { name: 'Confirmed', order: 1 },\n          { name: 'In Progress', order: 2 },\n          { name: 'Testing', order: 3 },\n          { name: 'Resolved', order: 4 },\n        ];\n        break;\n      case 'content':\n        columns = [\n          { name: 'Ideas', order: 0 },\n          { name: 'Writing', order: 1 },\n          { name: 'Editing', order: 2 },\n          { name: 'Review', order: 3 },\n          { name: 'Published', order: 4 },\n        ];\n        break;\n    }\n  } else {\n    // Custom columns\n    let addingColumns = true;\n    let order = 0;\n\n    while (addingColumns) {\n      const { columnName } = await prompts({\n        type: 'text',\n        name: 'columnName',\n        message: `Column ${order + 1} name (leave empty to finish):`,\n        validate: value => {\n          if (!value) return true; // Allow empty to finish\n          const result = validateColumnName(value);\n          return result === true ? true : result;\n        },\n      });\n\n      if (!columnName) {\n        addingColumns = false;\n      } else {\n        columns.push({ name: columnName, order });\n        order++;\n      }\n    }\n\n    if (columns.length === 0) {\n      throw new Error('Board must have at least one column');\n    }\n  }\n\n  // Public/Private setting\n  const { isPublic } = await prompts({\n    type: 'toggle',\n    name: 'isPublic',\n    message: 'Make board public?',\n    initial: defaults?.isPublic ?? false,\n    active: 'yes',\n    inactive: 'no',\n  });\n\n  // Show summary\n  console.log(chalk.green('\\n✅ Board Configuration:'));\n  console.log(chalk.gray('─'.repeat(40)));\n  console.log(`Name: ${chalk.bold(boardInfo.name)}`);\n  if (boardInfo.description) {\n    console.log(`Description: ${boardInfo.description}`);\n  }\n  console.log(`Visibility: ${isPublic ? 'Public' : 'Private'}`);\n  console.log(`Columns: ${columns.map(c => c.name).join(' → ')}`);\n  console.log(chalk.gray('─'.repeat(40)));\n\n  return {\n    name: boardInfo.name,\n    description: boardInfo.description || undefined,\n    columns,\n    isPublic,\n  };\n}\n\n/**\n * Confirm action utility\n */\nexport async function confirmAction(message: string, defaultAnswer = false): Promise<boolean> {\n  const response = await prompts({\n    type: 'confirm',\n    name: 'confirmed',\n    message,\n    initial: defaultAnswer,\n  });\n\n  return response.confirmed ?? false;\n}\n\n/**\n * Select from list utility\n */\nexport async function selectFromList<T extends { id: string; name: string }>(\n  message: string,\n  items: T[],\n  options?: {\n    allowMultiple?: boolean;\n    showDescription?: (item: T) => string;\n  }\n): Promise<T | T[] | null> {\n  if (items.length === 0) {\n    console.log(chalk.yellow('No items available to select'));\n    return null;\n  }\n\n  const choices = items.map(item => ({\n    title: item.name,\n    value: item.id,\n    description: options?.showDescription?.(item),\n  }));\n\n  if (options?.allowMultiple) {\n    const response = await prompts({\n      type: 'multiselect',\n      name: 'selected',\n      message,\n      choices,\n      hint: '- Space to select. Return to submit',\n    });\n\n    if (!response.selected || response.selected.length === 0) {\n      return null;\n    }\n\n    return items.filter(item => response.selected.includes(item.id));\n  }\n  const response = await prompts({\n    type: 'select',\n    name: 'selected',\n    message,\n    choices,\n  });\n\n  if (!response.selected) {\n    return null;\n  }\n\n  return items.find(item => item.id === response.selected) || null;\n}\n\n/**\n * Add column to existing board prompt\n */\nexport async function addColumnPrompt(\n  existingColumns: Array<{ id: string; name: string; order: number }>\n): Promise<ColumnInput | null> {\n  console.log(chalk.cyan('\\n➕ Add New Column\\n'));\n\n  const response = await prompts([\n    {\n      type: 'text',\n      name: 'name',\n      message: 'Column name:',\n      validate: value => {\n        const result = validateColumnName(value);\n        return result === true ? true : result;\n      },\n    },\n    {\n      type: 'select',\n      name: 'position',\n      message: 'Position:',\n      choices: [\n        { title: 'At the beginning', value: 'start' },\n        { title: 'At the end', value: 'end' },\n        { title: 'After specific column', value: 'after' },\n      ],\n      initial: 1, // Default to 'end'\n    },\n  ]);\n\n  if (!response.name) {\n    return null;\n  }\n\n  let afterColumn: string | undefined;\n\n  if (response.position === 'after' && existingColumns.length > 0) {\n    const selected = await selectFromList('Insert after which column?', existingColumns);\n\n    if (selected && !Array.isArray(selected)) {\n      afterColumn = selected.id;\n    }\n  }\n\n  return {\n    name: response.name,\n    position: response.position,\n    afterColumn,\n  };\n}\n\n/**\n * Board settings prompt\n */\nexport async function boardSettingsPrompt(currentSettings: {\n  name: string;\n  description?: string;\n  isPublic: boolean;\n  defaultAssignee?: string;\n  autoArchiveDays?: number;\n}): Promise<Partial<typeof currentSettings>> {\n  console.log(chalk.cyan('\\n⚙️  Board Settings\\n'));\n\n  const response = await prompts([\n    {\n      type: 'text',\n      name: 'name',\n      message: 'Board name:',\n      initial: currentSettings.name,\n      validate: value => {\n        const result = validateBoardName(value);\n        return result === true ? true : result;\n      },\n    },\n    {\n      type: 'text',\n      name: 'description',\n      message: 'Description:',\n      initial: currentSettings.description,\n    },\n    {\n      type: 'toggle',\n      name: 'isPublic',\n      message: 'Public board?',\n      initial: currentSettings.isPublic,\n      active: 'yes',\n      inactive: 'no',\n    },\n    {\n      type: 'text',\n      name: 'defaultAssignee',\n      message: 'Default assignee (optional):',\n      initial: currentSettings.defaultAssignee,\n    },\n    {\n      type: 'number',\n      name: 'autoArchiveDays',\n      message: 'Auto-archive completed tasks after (days, 0 to disable):',\n      initial: currentSettings.autoArchiveDays || 0,\n      min: 0,\n      max: 365,\n    },\n  ]);\n\n  // Filter out unchanged values\n  const changes: Partial<typeof currentSettings> = {};\n\n  if (response.name !== currentSettings.name) {\n    changes.name = response.name;\n  }\n  if (response.description !== currentSettings.description) {\n    changes.description = response.description || undefined;\n  }\n  if (response.isPublic !== currentSettings.isPublic) {\n    changes.isPublic = response.isPublic;\n  }\n  if (response.defaultAssignee !== currentSettings.defaultAssignee) {\n    changes.defaultAssignee = response.defaultAssignee || undefined;\n  }\n  if (response.autoArchiveDays !== currentSettings.autoArchiveDays) {\n    changes.autoArchiveDays = response.autoArchiveDays || undefined;\n  }\n\n  return changes;\n}\n\n/**\n * Delete confirmation with safety check\n */\nexport async function confirmDelete(\n  itemType: string,\n  itemName: string,\n  options?: {\n    showWarning?: string;\n    requireTyping?: boolean;\n  }\n): Promise<boolean> {\n  console.log(chalk.red(`\\n⚠️  Delete ${itemType}\\n`));\n\n  if (options?.showWarning) {\n    console.log(chalk.yellow(options.showWarning));\n    console.log();\n  }\n\n  console.log(`You are about to delete: ${chalk.bold(itemName)}`);\n  console.log(chalk.gray('This action cannot be undone.\\n'));\n\n  if (options?.requireTyping) {\n    const { confirmText } = await prompts({\n      type: 'text',\n      name: 'confirmText',\n      message: `Type \"${itemName}\" to confirm:`,\n      validate: value => (value === itemName ? true : `Please type exactly: ${itemName}`),\n    });\n\n    if (confirmText !== itemName) {\n      return false;\n    }\n  }\n\n  return confirmAction(`Are you sure you want to delete this ${itemType}?`, false);\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/prompts/task-prompts.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":39,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":37,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":48},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'any' overrides all other types in this union type.","line":49,"column":44,"nodeType":"TSTypeReference","messageId":"overrides","endLine":49,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `PromptOptions | ((this: Enquirer<object>) => PromptOptions) | (PromptOptions | ((this: Enquirer<object>) => PromptOptions))[]`.","line":51,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":51,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { PromptOptions } from 'enquirer';\nimport { prompt } from 'enquirer';\nimport chalk from 'chalk';\nimport type { Priority, TaskSize } from './validators';\nimport {\n  validateTaskTitle,\n  validateDate,\n  validateTimeEstimate,\n  PRIORITIES,\n  TASK_SIZES,\n} from './validators';\nimport { TaskSizeEstimator } from '../estimation/task-size-estimator';\n\ninterface TaskEstimation {\n  size: TaskSize;\n  avgHours: number;\n  confidence: string;\n  reasoning: string[];\n}\n\ninterface FormatterInterface {\n  info: (message: string) => void;\n  success: (message: string) => void;\n  warn: (message: string) => void;\n  error: (message: string) => void;\n}\n\n// Simple formatter for prompts - falls back to console if no proper formatter available\nconst simpleFormatter: FormatterInterface = {\n  info: (message: string): void => console.log(chalk.cyan(message)),\n  success: (message: string): void => console.log(chalk.green(message)),\n  warn: (message: string): void => console.log(chalk.yellow(message)),\n  error: (message: string): void => console.log(chalk.red(message)),\n};\n\n/**\n * Error thrown when a prompt is cancelled\n */\nexport class PromptCancelledError extends Error {\n  constructor(message = 'Prompt was cancelled by user') {\n    super(message);\n    this.name = 'PromptCancelledError';\n  }\n}\n\n/**\n * Wrapper for prompt that handles cancellation\n */\nasync function safePrompt<T>(promptConfig: PromptOptions | PromptOptions[]): Promise<T> {\n  try {\n    return await prompt<T>(promptConfig);\n  } catch (error) {\n    // Check if it's a cancellation (Ctrl+C, ESC, etc.)\n    if (error instanceof Error) {\n      const errorMessage = error.message.toLowerCase();\n      if (\n        errorMessage.includes('cancel') ||\n        errorMessage.includes('abort') ||\n        errorMessage.includes('interrupt') ||\n        error.name === 'SIGINT'\n      ) {\n        throw new PromptCancelledError(`Operation cancelled: ${error.message}`);\n      }\n    }\n    // Re-throw other errors\n    throw error;\n  }\n}\n\nexport interface TaskInput {\n  title: string;\n  description?: string;\n  priority?: Priority;\n  size?: TaskSize;\n  assignee?: string;\n  due_date?: string;\n  estimated_hours?: number;\n  tags?: string[];\n}\n\nexport interface MoveTaskInput {\n  taskId: string;\n  targetColumn: string;\n  position?: number;\n}\n\nexport interface BulkActionInput {\n  taskIds: string[];\n  action: 'move' | 'delete' | 'archive' | 'assign' | 'tag';\n  params?: Record<string, unknown>;\n}\n\n/**\n * Create task interactive prompt\n */\nexport async function createTaskPrompt(defaults?: Partial<TaskInput>): Promise<TaskInput> {\n  try {\n    simpleFormatter.info('\\n📝 Create New Task\\n');\n    simpleFormatter.info(chalk.gray('Press Ctrl+C to cancel at any time\\n'));\n\n    // Create estimator instance\n    const estimator = new TaskSizeEstimator();\n\n    // Get basic info first for estimation\n    const basicInfo = await safePrompt<{ title: string; description?: string }>([\n      {\n        type: 'input',\n        name: 'title',\n        message: 'Task title:',\n        initial: defaults?.title,\n        validate: validateTaskTitle,\n      },\n      {\n        type: 'text',\n        name: 'description',\n        message: 'Description (optional):',\n        initial: defaults?.description,\n        multiline: true,\n        hint: 'Press Ctrl+D when done',\n      },\n    ]);\n\n    // Generate size estimation\n    let suggestedSize: TaskSize | undefined;\n    let estimation: TaskEstimation | undefined;\n\n    if (basicInfo.title) {\n      try {\n        estimation = estimator.estimateTime({\n          title: basicInfo.title,\n          description: basicInfo.description,\n        }) as TaskEstimation;\n        suggestedSize = estimation.size;\n\n        // Show estimation\n        simpleFormatter.info(chalk.cyan('\\n🤖 AI Size Estimation:'));\n        simpleFormatter.info(\n          chalk.yellow(`  Suggested Size: ${suggestedSize} (${estimation.avgHours} hours)`)\n        );\n        simpleFormatter.info(chalk.gray(`  Confidence: ${estimation.confidence}`));\n        if (estimation.reasoning?.length > 0) {\n          simpleFormatter.info(chalk.gray('  Reasoning:'));\n          estimation.reasoning.forEach((reason: string) => {\n            simpleFormatter.info(chalk.gray(`    • ${reason}`));\n          });\n        }\n        simpleFormatter.info('');\n      } catch (error) {\n        simpleFormatter.warn('⚠️  Size estimation unavailable\\n');\n      }\n    }\n\n    const additionalInfo = await safePrompt<Omit<TaskInput, 'title' | 'description'>>([\n      {\n        type: 'select',\n        name: 'priority',\n        message: 'Priority:',\n        choices: [\n          { name: 'P1', value: 'P1', hint: 'Critical - Must be done ASAP' },\n          { name: 'P2', value: 'P2', hint: 'High - Important and urgent' },\n          { name: 'P3', value: 'P3', hint: 'Medium - Important but not urgent' },\n          { name: 'P4', value: 'P4', hint: 'Low - Nice to have' },\n          { name: 'P5', value: 'P5', hint: 'Very Low - Backlog' },\n          { name: 'Skip', value: undefined, hint: 'No priority' },\n        ],\n        initial: defaults?.priority ? PRIORITIES.indexOf(defaults.priority) : 2,\n      },\n      {\n        type: 'select',\n        name: 'size',\n        message: suggestedSize ? `Task size (AI suggests: ${suggestedSize}):` : 'Task size:',\n        choices: [\n          {\n            name:\n              suggestedSize === 'S' ? `S ⭐ (AI suggested - ${estimation?.avgHours ?? 1}h)` : 'S',\n            value: 'S',\n            hint: 'Small - Less than 2 hours',\n          },\n          {\n            name:\n              suggestedSize === 'M' ? `M ⭐ (AI suggested - ${estimation?.avgHours ?? 3}h)` : 'M',\n            value: 'M',\n            hint: 'Medium - 2-4 hours',\n          },\n          {\n            name:\n              suggestedSize === 'L' ? `L ⭐ (AI suggested - ${estimation?.avgHours ?? 6}h)` : 'L',\n            value: 'L',\n            hint: 'Large - 4-8 hours',\n          },\n          {\n            name:\n              suggestedSize === 'XL'\n                ? `XL ⭐ (AI suggested - ${estimation?.avgHours ?? 12}h)`\n                : 'XL',\n            value: 'XL',\n            hint: 'Extra Large - More than 8 hours',\n          },\n          { name: 'Skip', value: undefined, hint: 'No size estimate' },\n        ],\n        initial: ((): number => {\n          if (suggestedSize) {\n            return TASK_SIZES.indexOf(suggestedSize);\n          }\n          if (defaults?.size) {\n            return TASK_SIZES.indexOf(defaults.size);\n          }\n          return 1;\n        })(),\n      },\n      {\n        type: 'input',\n        name: 'assignee',\n        message: 'Assignee (optional):',\n        initial: defaults?.assignee,\n        hint: 'Username or email',\n      },\n      {\n        type: 'input',\n        name: 'due_date',\n        message: 'Due date (optional):',\n        initial: defaults?.due_date,\n        hint: 'Format: YYYY-MM-DD',\n        validate: validateDate,\n      },\n      {\n        type: 'numeral',\n        name: 'estimated_hours',\n        message: 'Estimated hours (optional):',\n        initial: defaults?.estimated_hours,\n        float: true,\n        validate: (value: string): string | boolean => {\n          if (!value) return true;\n          return validateTimeEstimate(value);\n        },\n      },\n      {\n        type: 'list',\n        name: 'tags',\n        message: 'Tags (comma-separated, optional):',\n        initial: defaults?.tags?.join(', '),\n        separator: ',',\n        hint: 'e.g., frontend, bug, urgent',\n      },\n    ]);\n\n    // Merge basicInfo and additionalInfo\n    const response = {\n      title: basicInfo.title,\n      description: basicInfo.description,\n      ...additionalInfo,\n    };\n\n    // Clean up the response\n    const cleanedResponse: TaskInput = {\n      title: response.title,\n    };\n\n    if (response.description?.trim()) {\n      cleanedResponse.description = response.description.trim();\n    }\n    if (response.priority && response.priority !== 'undefined') {\n      cleanedResponse.priority = response.priority as Priority;\n    }\n    if (response.size && response.size !== 'undefined') {\n      cleanedResponse.size = response.size as TaskSize;\n    }\n    if (response.assignee?.trim()) {\n      cleanedResponse.assignee = response.assignee.trim();\n    }\n    if (response.due_date?.trim()) {\n      cleanedResponse.due_date = response.due_date.trim();\n    }\n    if (response.estimated_hours) {\n      cleanedResponse.estimated_hours = response.estimated_hours;\n    }\n    if (response.tags && response.tags.length > 0) {\n      cleanedResponse.tags = response.tags\n        .map((tag: string) => tag.trim())\n        .filter((tag: string) => tag.length > 0);\n    }\n\n    return cleanedResponse;\n  } catch (error) {\n    if (error instanceof PromptCancelledError) {\n      simpleFormatter.warn('\\n⚠️  Task creation cancelled\\n');\n      throw error;\n    }\n    simpleFormatter.error(\n      `\\n❌ Failed to create task: ${error instanceof Error ? error.message : String(error)}`\n    );\n    throw error;\n  }\n}\n\n/**\n * Move task interactive prompt\n */\nexport async function moveTaskPrompt(\n  taskId: string,\n  availableColumns: Array<{ id: string; name: string; taskCount: number }>\n): Promise<MoveTaskInput> {\n  try {\n    simpleFormatter.info(chalk.cyan(`\\n🔄 Move Task ${taskId}\\n`));\n    simpleFormatter.info(chalk.gray('Press Ctrl+C to cancel at any time\\n'));\n\n    const response = await safePrompt<{\n      targetColumn: string;\n      position: string;\n    }>([\n      {\n        type: 'select',\n        name: 'targetColumn',\n        message: 'Move to column:',\n        choices: availableColumns.map(col => ({\n          name: `${col.name} (${col.taskCount} tasks)`,\n          value: col.id,\n        })),\n      },\n      {\n        type: 'select',\n        name: 'position',\n        message: 'Position in column:',\n        choices: [\n          { name: 'Top', value: 'top' },\n          { name: 'Bottom', value: 'bottom' },\n          { name: 'Specific position', value: 'specific' },\n        ],\n      },\n    ]);\n\n    let position: number | undefined;\n\n    if (response.position === 'specific') {\n      const targetCol = availableColumns.find(c => c.id === response.targetColumn);\n      const maxPosition = targetCol?.taskCount ?? 0;\n\n      const posResponse = await safePrompt<{ position: number }>({\n        type: 'numeral',\n        name: 'position',\n        message: `Position (1-${maxPosition + 1}):`,\n        min: 1,\n        max: maxPosition + 1,\n        initial: 1,\n      });\n\n      position = posResponse.position - 1; // Convert to 0-based index\n    } else if (response.position === 'top') {\n      position = 0;\n    }\n    // 'bottom' leaves position undefined, which means append\n\n    return {\n      taskId,\n      targetColumn: response.targetColumn,\n      position,\n    };\n  } catch (error) {\n    if (error instanceof PromptCancelledError) {\n      simpleFormatter.warn('\\n⚠️  Move operation cancelled\\n');\n      throw error;\n    }\n    simpleFormatter.error(\n      `\\n❌ Failed to move task: ${error instanceof Error ? error.message : String(error)}`\n    );\n    throw error;\n  }\n}\n\n/**\n * Bulk task action prompt\n */\nexport async function bulkTaskActionPrompt(\n  tasks: Array<{ id: string; title: string; status: string }>\n): Promise<BulkActionInput | null> {\n  try {\n    simpleFormatter.info(chalk.cyan(`\\n📦 Bulk Action for ${tasks.length} tasks\\n`));\n    simpleFormatter.info(chalk.gray('Press Ctrl+C to cancel at any time\\n'));\n\n    // Show selected tasks\n    simpleFormatter.info(chalk.gray('Selected tasks:'));\n    tasks.forEach((task, index) => {\n      if (index < 5) {\n        simpleFormatter.info(chalk.gray(`  - [${task.id}] ${task.title}`));\n      }\n    });\n    if (tasks.length > 5) {\n      simpleFormatter.info(chalk.gray(`  ... and ${tasks.length - 5} more`));\n    }\n    simpleFormatter.info('');\n\n    const { action } = await safePrompt<{ action: string }>({\n      type: 'select',\n      name: 'action',\n      message: 'Choose bulk action:',\n      choices: [\n        { name: 'Move to column', value: 'move' },\n        { name: 'Assign to user', value: 'assign' },\n        { name: 'Add tags', value: 'tag' },\n        { name: 'Archive tasks', value: 'archive' },\n        { name: 'Delete tasks', value: 'delete' },\n        { name: 'Cancel', value: 'cancel' },\n      ],\n    });\n\n    if (action === 'cancel') {\n      return null;\n    }\n\n    const taskIds = tasks.map(t => t.id);\n    const params: Record<string, unknown> = {};\n\n    switch (action) {\n      case 'move': {\n        const { column } = await safePrompt<{ column: string }>({\n          type: 'input',\n          name: 'column',\n          message: 'Target column name:',\n          validate: (value: string) => (value.trim() ? true : 'Column name required'),\n        });\n        params.column = column;\n        break;\n      }\n\n      case 'assign': {\n        const { assignee } = await safePrompt<{ assignee: string }>({\n          type: 'input',\n          name: 'assignee',\n          message: 'Assign to (username or email):',\n          validate: (value: string) => (value.trim() ? true : 'Assignee required'),\n        });\n        params.assignee = assignee;\n        break;\n      }\n\n      case 'tag': {\n        const { tags } = await safePrompt<{ tags: string[] }>({\n          type: 'list',\n          name: 'tags',\n          message: 'Add tags (comma-separated):',\n          separator: ',',\n          validate: (value: string[]) => (value.length > 0 ? true : 'At least one tag required'),\n        });\n        params.tags = tags.map(t => t.trim()).filter(t => t.length > 0);\n        break;\n      }\n\n      case 'delete': {\n        const { confirm } = await safePrompt<{ confirm: boolean }>({\n          type: 'confirm',\n          name: 'confirm',\n          message: chalk.red(`Are you sure you want to delete ${tasks.length} tasks?`),\n          initial: false,\n        });\n        if (!confirm) {\n          return null;\n        }\n        break;\n      }\n\n      case 'archive': {\n        const { confirm } = await safePrompt<{ confirm: boolean }>({\n          type: 'confirm',\n          name: 'confirm',\n          message: `Archive ${tasks.length} tasks?`,\n          initial: true,\n        });\n        if (!confirm) {\n          return null;\n        }\n        break;\n      }\n\n      default:\n        // Should never reach here due to action validation, but required for ESLint\n        throw new Error(`Unknown action: ${action}`);\n    }\n\n    return {\n      taskIds,\n      action: action as BulkActionInput['action'],\n      params: Object.keys(params).length > 0 ? params : undefined,\n    };\n  } catch (error) {\n    if (error instanceof PromptCancelledError) {\n      simpleFormatter.warn('\\n⚠️  Bulk action cancelled\\n');\n      return null;\n    }\n    simpleFormatter.error(\n      `\\n❌ Failed to execute bulk action: ${error instanceof Error ? error.message : String(error)}`\n    );\n    throw error;\n  }\n}\n\n/**\n * Task filter prompt\n */\nexport async function taskFilterPrompt(): Promise<{\n  status?: string[];\n  priority?: Priority[];\n  assignee?: string;\n  tags?: string[];\n  dateRange?: { start: string; end: string };\n}> {\n  try {\n    simpleFormatter.info(chalk.cyan('\\n🔍 Filter Tasks\\n'));\n    simpleFormatter.info(chalk.gray('Press Ctrl+C to cancel at any time\\n'));\n\n    const response = await safePrompt<{\n      filterBy: string[];\n    }>({\n      type: 'multiselect',\n      name: 'filterBy',\n      message: 'Filter by:',\n      choices: [\n        { name: 'Status', value: 'status' },\n        { name: 'Priority', value: 'priority' },\n        { name: 'Assignee', value: 'assignee' },\n        { name: 'Tags', value: 'tags' },\n        { name: 'Date range', value: 'dateRange' },\n      ],\n      hint: 'Space to select, Enter to continue',\n    });\n\n    const filters: Record<string, unknown> = {};\n\n    if (response.filterBy.includes('status')) {\n      const { status } = await safePrompt<{ status: string[] }>({\n        type: 'multiselect',\n        name: 'status',\n        message: 'Select statuses:',\n        choices: ['todo', 'in_progress', 'done', 'blocked', 'cancelled'],\n      });\n      if (status.length > 0) filters.status = status;\n    }\n\n    if (response.filterBy.includes('priority')) {\n      const { priority } = await safePrompt<{ priority: Priority[] }>({\n        type: 'multiselect',\n        name: 'priority',\n        message: 'Select priorities:',\n        choices: PRIORITIES.map(p => ({ name: p, value: p })),\n      });\n      if (priority.length > 0) filters.priority = priority;\n    }\n\n    if (response.filterBy.includes('assignee')) {\n      const { assignee } = await safePrompt<{ assignee: string }>({\n        type: 'input',\n        name: 'assignee',\n        message: 'Assignee (username or email):',\n      });\n      if (assignee.trim()) filters.assignee = assignee.trim();\n    }\n\n    if (response.filterBy.includes('tags')) {\n      const { tags } = await safePrompt<{ tags: string[] }>({\n        type: 'list',\n        name: 'tags',\n        message: 'Tags (comma-separated):',\n        separator: ',',\n      });\n      if (tags.length > 0) {\n        filters.tags = tags.map(t => t.trim()).filter(t => t.length > 0);\n      }\n    }\n\n    if (response.filterBy.includes('dateRange')) {\n      const dateRange = await safePrompt<{ start: string; end: string }>([\n        {\n          type: 'input',\n          name: 'start',\n          message: 'Start date (YYYY-MM-DD):',\n          validate: validateDate,\n        },\n        {\n          type: 'input',\n          name: 'end',\n          message: 'End date (YYYY-MM-DD):',\n          validate: validateDate,\n        },\n      ]);\n      if (dateRange.start && dateRange.end) {\n        filters.dateRange = dateRange;\n      }\n    }\n\n    return filters;\n  } catch (error) {\n    if (error instanceof PromptCancelledError) {\n      simpleFormatter.warn('\\n⚠️  Filter cancelled\\n');\n      return {};\n    }\n    simpleFormatter.error(\n      `\\n❌ Failed to apply filters: ${error instanceof Error ? error.message : String(error)}`\n    );\n    throw error;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/prompts/validators.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":2,"column":9,"nodeType":null,"messageId":"delete","endLine":2,"endColumn":10,"fix":{"range":[33,34],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":3,"column":21,"nodeType":null,"messageId":"delete","endLine":3,"endColumn":22,"fix":{"range":[55,56],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":4,"column":23,"nodeType":null,"messageId":"delete","endLine":4,"endColumn":24,"fix":{"range":[79,80],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":5,"column":16,"nodeType":null,"messageId":"delete","endLine":5,"endColumn":17,"fix":{"range":[96,97],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":6,"column":15,"nodeType":null,"messageId":"delete","endLine":6,"endColumn":16,"fix":{"range":[112,113],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":7,"column":17,"nodeType":null,"messageId":"delete","endLine":7,"endColumn":18,"fix":{"range":[130,131],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inputSanitizer' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":11,"column":17,"nodeType":null,"messageId":"insert","endLine":11,"endColumn":17,"fix":{"range":[212,212],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":122,"column":1,"nodeType":null,"messageId":"delete","endLine":122,"endColumn":7,"fix":{"range":[2852,2858],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `url.protocol·===·'javascript:'·||·url.protocol·===·'data:'·||·url.protocol·===·'vbscript:'` with `⏎········url.protocol·===·'javascript:'·||⏎········url.protocol·===·'data:'·||⏎········url.protocol·===·'vbscript:'⏎······`","line":124,"column":11,"nodeType":null,"messageId":"replace","endLine":124,"endColumn":101,"fix":{"range":[2914,3004],"text":"\n        url.protocol === 'javascript:' ||\n        url.protocol === 'data:' ||\n        url.protocol === 'vbscript:'\n      "}},{"ruleId":"no-script-url","severity":2,"message":"Script URL is a form of eval.","line":124,"column":28,"nodeType":"Literal","messageId":"unexpectedScriptURL","endLine":124,"endColumn":41},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":127,"column":1,"nodeType":null,"messageId":"delete","endLine":127,"endColumn":7,"fix":{"range":[3063,3069],"text":""}},{"ruleId":"no-restricted-globals","severity":2,"message":"Unexpected use of 'isNaN'. Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan","line":241,"column":7,"nodeType":"Identifier","messageId":"customMessage","endLine":241,"endColumn":12},{"ruleId":"no-restricted-globals","severity":2,"message":"Unexpected use of 'isNaN'. Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan","line":259,"column":7,"nodeType":"Identifier","messageId":"customMessage","endLine":259,"endColumn":12},{"ruleId":"no-restricted-globals","severity":2,"message":"Unexpected use of 'isNaN'. Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan","line":285,"column":7,"nodeType":"Identifier","messageId":"customMessage","endLine":285,"endColumn":12},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":391,"column":48,"nodeType":null,"messageId":"delete","endLine":391,"endColumn":50,"fix":{"range":[8817,8819],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().transform(val·=>·sanitizeTaskTitle(val).sanitized)` with `⏎····.string()⏎····.transform(val·=>·sanitizeTaskTitle(val).sanitized)⏎····`","line":426,"column":11,"nodeType":null,"messageId":"replace","endLine":426,"endColumn":71,"fix":{"range":[9601,9661],"text":"\n    .string()\n    .transform(val => sanitizeTaskTitle(val).sanitized)\n    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().optional().transform(val·=>·val·?·sanitizeDescription(val).sanitized·:·val` with `⏎····.string()⏎····.optional()⏎····.transform(val·=>·(val·?·sanitizeDescription(val).sanitized·:·val)`","line":427,"column":17,"nodeType":null,"messageId":"replace","endLine":427,"endColumn":101,"fix":{"range":[9712,9796],"text":"\n    .string()\n    .optional()\n    .transform(val => (val ? sanitizeDescription(val).sanitized : val)"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().optional().transform(val·=>·val·?·sanitizeName(val,·100).sanitized·:·val` with `⏎····.string()⏎····.optional()⏎····.transform(val·=>·(val·?·sanitizeName(val,·100).sanitized·:·val)`","line":430,"column":14,"nodeType":null,"messageId":"replace","endLine":430,"endColumn":96,"fix":{"range":[9894,9976],"text":"\n    .string()\n    .optional()\n    .transform(val => (val ? sanitizeName(val, 100).sanitized : val)"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().transform(val·=>·sanitizeName(val,·50).sanitized).pipe(⏎····z.string().min(2).max(50)⏎··` with `⏎····.string()⏎····.transform(val·=>·sanitizeName(val,·50).sanitized)⏎····.pipe(z.string().min(2).max(50)`","line":436,"column":10,"nodeType":null,"messageId":"replace","endLine":438,"endColumn":3,"fix":{"range":[10155,10253],"text":"\n    .string()\n    .transform(val => sanitizeName(val, 50).sanitized)\n    .pipe(z.string().min(2).max(50)"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().optional().transform(val·=>·val·?·sanitizeDescription(val).sanitized·:·val)` with `⏎····.string()⏎····.optional()⏎····.transform(val·=>·(val·?·sanitizeDescription(val).sanitized·:·val))`","line":439,"column":17,"nodeType":null,"messageId":"replace","endLine":439,"endColumn":102,"fix":{"range":[10272,10357],"text":"\n    .string()\n    .optional()\n    .transform(val => (val ? sanitizeDescription(val).sanitized : val))"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.string().transform(val·=>·sanitizeName(val,·30).sanitized)` with `⏎········.string()⏎········.transform(val·=>·sanitizeName(val,·30).sanitized)⏎········`","line":442,"column":14,"nodeType":null,"messageId":"replace","endLine":442,"endColumn":73,"fix":{"range":[10407,10466],"text":"\n        .string()\n        .transform(val => sanitizeName(val, 30).sanitized)\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":460,"column":1,"nodeType":null,"messageId":"delete","endLine":460,"endColumn":5,"fix":{"range":[11021,11025],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":486,"column":1,"nodeType":null,"messageId":"delete","endLine":486,"endColumn":5,"fix":{"range":[11667,11671],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":516,"column":1,"nodeType":null,"messageId":"delete","endLine":516,"endColumn":7,"fix":{"range":[12540,12546],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":517,"column":15,"nodeType":null,"messageId":"delete","endLine":517,"endColumn":16,"fix":{"range":[12561,12562],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":518,"column":21,"nodeType":null,"messageId":"delete","endLine":518,"endColumn":22,"fix":{"range":[12583,12584],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":520,"column":76,"nodeType":null,"messageId":"insert","endLine":520,"endColumn":76,"fix":{"range":[12679,12679],"text":","}},{"ruleId":"no-else-return","severity":2,"message":"Unnecessary 'else' after 'return'.","line":522,"column":12,"nodeType":"BlockStatement","messageId":"unexpected","endLine":524,"endColumn":6,"fix":{"range":[10748,12958],"text":"function validateAndSanitizeInput(\n  input: string,\n  type: 'title' | 'description' | 'name' | 'tag' | 'email' | 'url' | 'assignee'\n): { valid: boolean; sanitized: string; error?: string; warnings?: string[] } {\n  try {\n    let validator: (input: string) => true | string;\n    \n    switch (type) {\n      case 'title':\n        validator = validateTaskTitle;\n        break;\n      case 'description':\n        validator = validateTaskDescription;\n        break;\n      case 'name':\n        validator = validateBoardName;\n        break;\n      case 'tag':\n        validator = validateTagName;\n        break;\n      case 'email':\n        validator = validateEmail;\n        break;\n      case 'url':\n        validator = validateUrl;\n        break;\n      case 'assignee':\n        validator = validateAssignee;\n        break;\n      default:\n        return { valid: false, sanitized: input, error: 'Unknown validation type' };\n    }\n    \n    const result = validator(input);\n    if (result === true) {\n      // Get the sanitized version\n      let sanitized: string;\n      switch (type) {\n        case 'title':\n          sanitized = sanitizeTaskTitle(input).sanitized;\n          break;\n        case 'description':\n          sanitized = sanitizeDescription(input).sanitized;\n          break;\n        case 'name':\n          sanitized = sanitizeName(input).sanitized;\n          break;\n        case 'tag':\n          sanitized = sanitizeTag(input).sanitized;\n          break;\n        case 'email':\n          sanitized = sanitizeEmail(input).sanitized;\n          break;\n        case 'url':\n          sanitized = sanitizeUrl(input).sanitized;\n          break;\n        case 'assignee':\n          sanitized = sanitizeName(input, 100).sanitized;\n          break;\n        default:\n          sanitized = input;\n      }\n      \n      return { \n        valid: true, \n        sanitized,\n        warnings: sanitized !== input ? ['Input was sanitized'] : undefined\n      };\n    } \n      return { valid: false, sanitized: input, error: result };\n    \n  } catch (error) {\n    return { \n      valid: false, \n      sanitized: input, \n      error: `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}` \n    };\n  }\n}"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":526,"column":13,"nodeType":null,"messageId":"delete","endLine":526,"endColumn":14,"fix":{"range":[12804,12805],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":527,"column":20,"nodeType":null,"messageId":"delete","endLine":527,"endColumn":21,"fix":{"range":[12825,12826],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":528,"column":24,"nodeType":null,"messageId":"delete","endLine":528,"endColumn":25,"fix":{"range":[12850,12851],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·` with `,`","line":529,"column":93,"nodeType":null,"messageId":"replace","endLine":529,"endColumn":94,"fix":{"range":[12944,12945],"text":","}}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":28,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { \n  sanitizeTaskTitle, \n  sanitizeDescription, \n  sanitizeName, \n  sanitizeTag, \n  sanitizeEmail, \n  sanitizeUrl,\n  createSafePromptValidator,\n  detectSuspicious,\n  inputSanitizer\n} from '../utils/input-sanitizer';\n\n/**\n * Input validation functions for CLI prompts with comprehensive sanitization\n * Enhanced for TASK-119: Input sanitization for all prompts\n */\n\n// Task size options\nexport const TASK_SIZES = ['S', 'M', 'L', 'XL'] as const;\nexport type TaskSize = (typeof TASK_SIZES)[number];\n\n// Priority options\nexport const PRIORITIES = ['P1', 'P2', 'P3', 'P4', 'P5'] as const;\nexport type Priority = (typeof PRIORITIES)[number];\n\n// Status options\nexport const STATUSES = ['todo', 'in_progress', 'done', 'blocked', 'cancelled'] as const;\nexport type Status = (typeof STATUSES)[number];\n\n/**\n * Validate task title with comprehensive sanitization\n */\nexport const validateTaskTitle = createSafePromptValidator(\n  sanitizeTaskTitle,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'Task title cannot be empty';\n    }\n\n    if (trimmed.length < 3) {\n      return 'Task title must be at least 3 characters long';\n    }\n\n    if (trimmed.length > 200) {\n      return 'Task title must be less than 200 characters';\n    }\n\n    // Additional security checks\n    const suspiciousCheck = detectSuspicious(input);\n    if (suspiciousCheck.suspicious) {\n      return `Security issue: ${suspiciousCheck.patterns.join(', ')} detected in title`;\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate priority\n */\nexport function validatePriority(input: string): true | string {\n  const upperInput = input.toUpperCase();\n\n  if (!PRIORITIES.includes(upperInput as Priority)) {\n    return `Priority must be one of: ${PRIORITIES.join(', ')}`;\n  }\n\n  return true;\n}\n\n/**\n * Validate task size\n */\nexport function validateTaskSize(input: string): true | string {\n  const upperInput = input.toUpperCase();\n\n  if (!TASK_SIZES.includes(upperInput as TaskSize)) {\n    return `Task size must be one of: ${TASK_SIZES.join(', ')}`;\n  }\n\n  return true;\n}\n\n/**\n * Validate email address with sanitization\n */\nexport const validateEmail = createSafePromptValidator(\n  sanitizeEmail,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'Email address cannot be empty';\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(trimmed)) {\n      return 'Please enter a valid email address';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate URL with sanitization\n */\nexport const validateUrl = createSafePromptValidator(\n  sanitizeUrl,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'URL cannot be empty';\n    }\n\n    try {\n      const url = new URL(trimmed);\n      \n      // Additional security checks for URLs\n      if (url.protocol === 'javascript:' || url.protocol === 'data:' || url.protocol === 'vbscript:') {\n        return 'Unsafe URL protocol detected';\n      }\n      \n      return true;\n    } catch {\n      return 'Please enter a valid URL';\n    }\n  }\n);\n\n/**\n * Validate git repository URL\n */\nexport function validateGitRepoUrl(input: string): true | string {\n  const urlValidation = validateUrl(input);\n  if (urlValidation !== true) {\n    return urlValidation;\n  }\n\n  const gitUrlRegex =\n    /^(https?:\\/\\/(github\\.com|gitlab\\.com|bitbucket\\.org)\\/[\\w-]+\\/[\\w-]+|git@(github\\.com|gitlab\\.com|bitbucket\\.org):[\\w-]+\\/[\\w-]+\\.git)$/;\n\n  if (!gitUrlRegex.test(input)) {\n    return 'Please enter a valid Git repository URL (GitHub, GitLab, or Bitbucket)';\n  }\n\n  return true;\n}\n\n/**\n * Validate board name with sanitization\n */\nexport const validateBoardName = createSafePromptValidator(\n  (input: string) => sanitizeName(input, 50),\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'Board name cannot be empty';\n    }\n\n    if (trimmed.length < 2) {\n      return 'Board name must be at least 2 characters long';\n    }\n\n    if (trimmed.length > 50) {\n      return 'Board name must be less than 50 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate column name with sanitization\n */\nexport const validateColumnName = createSafePromptValidator(\n  (input: string) => sanitizeName(input, 30),\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'Column name cannot be empty';\n    }\n\n    if (trimmed.length > 30) {\n      return 'Column name must be less than 30 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate tag name with sanitization\n */\nexport const validateTagName = createSafePromptValidator(\n  sanitizeTag,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (!trimmed) {\n      return 'Tag name cannot be empty';\n    }\n\n    if (trimmed.length > 20) {\n      return 'Tag name must be less than 20 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate date input\n */\nexport function validateDate(input: string): true | string {\n  const trimmed = input.trim();\n\n  if (!trimmed) {\n    return true; // Date is optional\n  }\n\n  // Accept various date formats\n  const dateFormats = [\n    /^\\d{4}-\\d{2}-\\d{2}$/, // YYYY-MM-DD\n    /^\\d{2}\\/\\d{2}\\/\\d{4}$/, // MM/DD/YYYY\n    /^\\d{2}-\\d{2}-\\d{4}$/, // DD-MM-YYYY\n  ];\n\n  const matchesFormat = dateFormats.some(format => format.test(trimmed));\n  if (!matchesFormat) {\n    return 'Please enter a date in format YYYY-MM-DD, MM/DD/YYYY, or DD-MM-YYYY';\n  }\n\n  const date = new Date(trimmed);\n  if (isNaN(date.getTime())) {\n    return 'Please enter a valid date';\n  }\n\n  return true;\n}\n\n/**\n * Validate time estimate (hours)\n */\nexport function validateTimeEstimate(input: string): true | string {\n  const trimmed = input.trim();\n\n  if (!trimmed) {\n    return true; // Time estimate is optional\n  }\n\n  const num = parseFloat(trimmed);\n  if (isNaN(num)) {\n    return 'Please enter a valid number';\n  }\n\n  if (num <= 0) {\n    return 'Time estimate must be greater than 0';\n  }\n\n  if (num > 999) {\n    return 'Time estimate seems too high. Please enter a value less than 1000 hours';\n  }\n\n  return true;\n}\n\n/**\n * Validate percentage\n */\nexport function validatePercentage(input: string): true | string {\n  const trimmed = input.trim();\n\n  if (!trimmed) {\n    return 'Percentage cannot be empty';\n  }\n\n  const num = parseInt(trimmed, 10);\n  if (isNaN(num)) {\n    return 'Please enter a valid number';\n  }\n\n  if (num < 0 || num > 100) {\n    return 'Percentage must be between 0 and 100';\n  }\n\n  return true;\n}\n\n/**\n * Create a custom validator with min/max length\n */\nexport function createLengthValidator(\n  fieldName: string,\n  minLength: number,\n  maxLength: number\n): (input: string) => true | string {\n  return (input: string) => {\n    const trimmed = input.trim();\n\n    if (!trimmed && minLength > 0) {\n      return `${fieldName} cannot be empty`;\n    }\n\n    if (trimmed.length < minLength) {\n      return `${fieldName} must be at least ${minLength} characters long`;\n    }\n\n    if (trimmed.length > maxLength) {\n      return `${fieldName} must be less than ${maxLength} characters`;\n    }\n\n    return true;\n  };\n}\n\n/**\n * Create a custom enum validator\n */\nexport function createEnumValidator<T extends readonly string[]>(\n  fieldName: string,\n  validOptions: T\n): (input: string) => true | string {\n  return (input: string) => {\n    if (!validOptions.includes(input)) {\n      return `${fieldName} must be one of: ${validOptions.join(', ')}`;\n    }\n    return true;\n  };\n}\n\n/**\n * Zod schemas for more complex validation\n */\n\nexport const TaskSchema = z.object({\n  title: z.string().min(3).max(200),\n  description: z.string().optional(),\n  priority: z.enum(PRIORITIES).optional(),\n  size: z.enum(TASK_SIZES).optional(),\n  assignee: z.string().optional(),\n  due_date: z.string().datetime().optional(),\n  tags: z.array(z.string()).optional(),\n});\n\nexport const BoardSchema = z.object({\n  name: z\n    .string()\n    .min(2)\n    .max(50)\n    .regex(/^[\\w\\s-]+$/),\n  description: z.string().optional(),\n  columns: z.array(\n    z.object({\n      name: z.string().min(1).max(30),\n      order: z.number().int().min(0),\n    })\n  ),\n});\n\nexport type TaskInput = z.infer<typeof TaskSchema>;\nexport type BoardInput = z.infer<typeof BoardSchema>;\n\n/**\n * Additional sanitized validators for descriptions and other text inputs\n */\n\n/**\n * Validate task description with sanitization\n */\nexport const validateTaskDescription = createSafePromptValidator(\n  sanitizeDescription,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (trimmed.length > 2000) {\n      return 'Description must be less than 2000 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate board description with sanitization  \n */\nexport const validateBoardDescription = createSafePromptValidator(\n  sanitizeDescription,\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (trimmed.length > 500) {\n      return 'Board description must be less than 500 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Validate assignee name with sanitization\n */\nexport const validateAssignee = createSafePromptValidator(\n  (input: string) => sanitizeName(input, 100),\n  (input: string): true | string => {\n    const trimmed = input.trim();\n\n    if (trimmed.length > 100) {\n      return 'Assignee name must be less than 100 characters';\n    }\n\n    return true;\n  }\n);\n\n/**\n * Create safe versions of existing Zod schemas with sanitization\n */\nexport const SafeTaskSchema = z.object({\n  title: z.string().transform(val => sanitizeTaskTitle(val).sanitized).pipe(z.string().min(3).max(200)),\n  description: z.string().optional().transform(val => val ? sanitizeDescription(val).sanitized : val),\n  priority: z.enum(PRIORITIES).optional(),\n  size: z.enum(TASK_SIZES).optional(),\n  assignee: z.string().optional().transform(val => val ? sanitizeName(val, 100).sanitized : val),\n  due_date: z.string().optional(),\n  tags: z.array(z.string().transform(val => sanitizeTag(val).sanitized)).optional(),\n});\n\nexport const SafeBoardSchema = z.object({\n  name: z.string().transform(val => sanitizeName(val, 50).sanitized).pipe(\n    z.string().min(2).max(50)\n  ),\n  description: z.string().optional().transform(val => val ? sanitizeDescription(val).sanitized : val),\n  columns: z.array(\n    z.object({\n      name: z.string().transform(val => sanitizeName(val, 30).sanitized).pipe(z.string().min(1).max(30)),\n      order: z.number().int().min(0),\n    })\n  ),\n});\n\nexport type SafeTaskInput = z.infer<typeof SafeTaskSchema>;\nexport type SafeBoardInput = z.infer<typeof SafeBoardSchema>;\n\n/**\n * Utility function to validate and sanitize any input\n */\nexport function validateAndSanitizeInput(\n  input: string,\n  type: 'title' | 'description' | 'name' | 'tag' | 'email' | 'url' | 'assignee'\n): { valid: boolean; sanitized: string; error?: string; warnings?: string[] } {\n  try {\n    let validator: (input: string) => true | string;\n    \n    switch (type) {\n      case 'title':\n        validator = validateTaskTitle;\n        break;\n      case 'description':\n        validator = validateTaskDescription;\n        break;\n      case 'name':\n        validator = validateBoardName;\n        break;\n      case 'tag':\n        validator = validateTagName;\n        break;\n      case 'email':\n        validator = validateEmail;\n        break;\n      case 'url':\n        validator = validateUrl;\n        break;\n      case 'assignee':\n        validator = validateAssignee;\n        break;\n      default:\n        return { valid: false, sanitized: input, error: 'Unknown validation type' };\n    }\n    \n    const result = validator(input);\n    if (result === true) {\n      // Get the sanitized version\n      let sanitized: string;\n      switch (type) {\n        case 'title':\n          sanitized = sanitizeTaskTitle(input).sanitized;\n          break;\n        case 'description':\n          sanitized = sanitizeDescription(input).sanitized;\n          break;\n        case 'name':\n          sanitized = sanitizeName(input).sanitized;\n          break;\n        case 'tag':\n          sanitized = sanitizeTag(input).sanitized;\n          break;\n        case 'email':\n          sanitized = sanitizeEmail(input).sanitized;\n          break;\n        case 'url':\n          sanitized = sanitizeUrl(input).sanitized;\n          break;\n        case 'assignee':\n          sanitized = sanitizeName(input, 100).sanitized;\n          break;\n        default:\n          sanitized = input;\n      }\n      \n      return { \n        valid: true, \n        sanitized,\n        warnings: sanitized !== input ? ['Input was sanitized'] : undefined\n      };\n    } else {\n      return { valid: false, sanitized: input, error: result };\n    }\n  } catch (error) {\n    return { \n      valid: false, \n      sanitized: input, \n      error: `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}` \n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/services/dashboard-data.ts","messages":[{"ruleId":"no-useless-constructor","severity":2,"message":"Useless constructor.","line":8,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":8,"endColumn":56},{"ruleId":"no-empty-function","severity":2,"message":"Unexpected empty constructor.","line":8,"column":54,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":8,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'boards' is assigned a value but never used.","line":15,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[858,940],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1068,1071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1068,1071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":43,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":43,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":55,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":55,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1717,1720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1717,1720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":70,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":70,"endColumn":34},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'transformTaskData'.","line":79,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":79,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2081,2084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2081,2084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":90,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .status on an `any` value.","line":90,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [status] resolves to an any value.","line":91,"column":16,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":91,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [status] resolves to an any value.","line":91,"column":36,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":91,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2460,2462],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":94,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":94,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .priority on an `any` value.","line":94,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [priority] resolves to an any value.","line":95,"column":18,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":95,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Computed name [priority] resolves to an any value.","line":95,"column":42,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":95,"endColumn":50},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[2596,2598],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":99,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":99,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":103,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":103,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":103,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due_date on an `any` value.","line":103,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":50},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":104,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":104,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":132,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":137,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":133,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":133,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":133,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3500,3503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3500,3503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":135,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":135,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .completed_count on an `any` value.","line":135,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":150,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":156,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":151,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":151,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":151,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3995,3998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3995,3998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":152,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .name on an `any` value.","line":152,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .username on an `any` value.","line":152,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":153,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .active_tasks on an `any` value.","line":153,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":154,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .workload_percentage on an `any` value.","line":154,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":169,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":175,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":170,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":170,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .map on an `any` value.","line":170,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4540,4543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4540,4543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":171,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":171,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .day on an `any` value.","line":171,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":172,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":172,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .remaining_tasks on an `any` value.","line":172,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":173,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":173,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ideal_remaining on an `any` value.","line":173,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4896,4899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4896,4899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":186,"column":27,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":186,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .created_at on an `any` value.","line":186,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":186,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":191,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":191,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":191,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .user on an `any` value.","line":191,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":49},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatActivityEvent'.","line":198,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":198,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5351,5354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5351,5354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":199,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":199,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .action on an `any` value.","line":199,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":200,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":200,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .entity_type on an `any` value.","line":200,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":200,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":201,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":201,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .entity_name on an `any` value.","line":201,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .entity_id on an `any` value.","line":201,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .details on an `any` value.","line":211,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .details on an `any` value.","line":213,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":61},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSampleVelocity'.","line":224,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":224,"endColumn":33},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSampleTeamMembers'.","line":240,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":240,"endColumn":36},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSampleBurndown'.","line":252,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":252,"endColumn":33}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":65,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ApiClient } from '../client';\nimport type { DashboardData } from '../utils/dashboard-manager';\n\n/**\n * Service to fetch and transform data for dashboard components\n */\nexport class DashboardDataService {\n  constructor(private readonly apiClient: ApiClient) {}\n\n  /**\n   * Fetch complete dashboard data from API\n   */\n  async fetchDashboardData(): Promise<DashboardData> {\n    try {\n      const [tasks, boards, activity] = await Promise.all([\n        this.fetchTasks(),\n        this.fetchBoards(),\n        this.fetchActivity(),\n      ]);\n\n      return {\n        tasks: this.transformTaskData(tasks),\n        velocity: await this.calculateVelocity(),\n        teamMembers: await this.fetchTeamMembers(),\n        burndown: await this.calculateBurndown(),\n        activity: this.transformActivityData(activity),\n      };\n    } catch (error) {\n      console.warn('Failed to fetch dashboard data, using sample data:', error.message);\n      return this.generateSampleData();\n    }\n  }\n\n  /**\n   * Fetch tasks from API\n   */\n  private async fetchTasks(): Promise<any[]> {\n    try {\n      const response = await this.apiClient.get('/tasks', {\n        include_archived: false,\n        limit: 1000,\n      });\n      return response.data || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch tasks: ${error.message}`);\n    }\n  }\n\n  /**\n   * Fetch boards from API\n   */\n  private async fetchBoards(): Promise<any[]> {\n    try {\n      const response = await this.apiClient.get('/boards');\n      return response.data || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch boards: ${error.message}`);\n    }\n  }\n\n  /**\n   * Fetch activity from API\n   */\n  private async fetchActivity(): Promise<any[]> {\n    try {\n      const response = await this.apiClient.get('/activity', {\n        limit: 20,\n        order: 'desc',\n      });\n      return response.data || [];\n    } catch (error) {\n      throw new Error(`Failed to fetch activity: ${error.message}`);\n    }\n  }\n\n  /**\n   * Transform task data for dashboard display\n   */\n  private transformTaskData(tasks: any[]): DashboardData['tasks'] {\n    const total = tasks.length;\n    const byStatus: Record<string, number> = {};\n    const byPriority: Record<string, number> = {};\n    let completed = 0;\n    let overdue = 0;\n\n    const now = new Date();\n\n    tasks.forEach(task => {\n      // Count by status\n      const status = task.status || 'todo';\n      byStatus[status] = (byStatus[status] || 0) + 1;\n\n      // Count by priority\n      const priority = task.priority || 'P3';\n      byPriority[priority] = (byPriority[priority] || 0) + 1;\n\n      // Count completed\n      if (status === 'done' || status === 'completed') {\n        completed++;\n      }\n\n      // Count overdue\n      if (task.due_date && new Date(task.due_date) < now && status !== 'done') {\n        overdue++;\n      }\n    });\n\n    return {\n      total,\n      byStatus,\n      byPriority,\n      completed,\n      overdue,\n    };\n  }\n\n  /**\n   * Calculate velocity data (tasks completed per week)\n   */\n  private async calculateVelocity(): Promise<DashboardData['velocity']> {\n    try {\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(endDate.getDate() - 8 * 7); // 8 weeks back\n\n      const response = await this.apiClient.get('/analytics/velocity', {\n        start_date: startDate.toISOString(),\n        end_date: endDate.toISOString(),\n        group_by: 'week',\n      });\n\n      return (\n        response.data?.map((item: any, index: number) => ({\n          period: `W${index + 1}`,\n          completed: item.completed_count || 0,\n        })) || this.generateSampleVelocity()\n      );\n    } catch (error) {\n      return this.generateSampleVelocity();\n    }\n  }\n\n  /**\n   * Fetch team member data\n   */\n  private async fetchTeamMembers(): Promise<DashboardData['teamMembers']> {\n    try {\n      const response = await this.apiClient.get('/analytics/team-workload');\n\n      return (\n        response.data?.map((member: any) => ({\n          name: member.name || member.username,\n          taskCount: member.active_tasks || 0,\n          load: member.workload_percentage || 0,\n        })) || this.generateSampleTeamMembers()\n      );\n    } catch (error) {\n      return this.generateSampleTeamMembers();\n    }\n  }\n\n  /**\n   * Calculate burndown chart data\n   */\n  private async calculateBurndown(): Promise<DashboardData['burndown']> {\n    try {\n      const response = await this.apiClient.get('/analytics/burndown');\n\n      return (\n        response.data?.map((item: any) => ({\n          day: item.day,\n          remaining: item.remaining_tasks || 0,\n          ideal: item.ideal_remaining || 0,\n        })) || this.generateSampleBurndown()\n      );\n    } catch (error) {\n      return this.generateSampleBurndown();\n    }\n  }\n\n  /**\n   * Transform activity data for display\n   */\n  private transformActivityData(activities: any[]): DashboardData['activity'] {\n    return activities.slice(0, 10).map(activity => ({\n      timestamp: new Date(activity.created_at).toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n      }),\n      event: this.formatActivityEvent(activity),\n      user: activity.user?.name || activity.user?.username || 'System',\n    }));\n  }\n\n  /**\n   * Format activity event for display\n   */\n  private formatActivityEvent(activity: any): string {\n    const action = activity.action || 'updated';\n    const entityType = activity.entity_type || 'task';\n    const entityName = activity.entity_name || `${entityType} #${activity.entity_id}`;\n\n    switch (action) {\n      case 'create':\n        return `Created ${entityType}: ${entityName}`;\n      case 'update':\n        return `Updated ${entityType}: ${entityName}`;\n      case 'delete':\n        return `Deleted ${entityType}: ${entityName}`;\n      case 'move':\n        return `Moved ${entityName} to ${activity.details?.new_status}`;\n      case 'assign':\n        return `Assigned ${entityName} to ${activity.details?.assignee}`;\n      case 'comment':\n        return `Commented on ${entityName}`;\n      default:\n        return `${action} ${entityName}`;\n    }\n  }\n\n  /**\n   * Generate sample velocity data as fallback\n   */\n  private generateSampleVelocity(): DashboardData['velocity'] {\n    return [\n      { period: 'W1', completed: 12 },\n      { period: 'W2', completed: 15 },\n      { period: 'W3', completed: 18 },\n      { period: 'W4', completed: 14 },\n      { period: 'W5', completed: 20 },\n      { period: 'W6', completed: 16 },\n      { period: 'W7', completed: 22 },\n      { period: 'W8', completed: 19 },\n    ];\n  }\n\n  /**\n   * Generate sample team data as fallback\n   */\n  private generateSampleTeamMembers(): DashboardData['teamMembers'] {\n    return [\n      { name: 'Alice', taskCount: 8, load: 85 },\n      { name: 'Bob', taskCount: 6, load: 70 },\n      { name: 'Charlie', taskCount: 10, load: 95 },\n      { name: 'Diana', taskCount: 7, load: 75 },\n    ];\n  }\n\n  /**\n   * Generate sample burndown data as fallback\n   */\n  private generateSampleBurndown(): DashboardData['burndown'] {\n    return [\n      { day: 'Day 1', remaining: 45, ideal: 45 },\n      { day: 'Day 2', remaining: 42, ideal: 40 },\n      { day: 'Day 3', remaining: 38, ideal: 35 },\n      { day: 'Day 4', remaining: 35, ideal: 30 },\n      { day: 'Day 5', remaining: 30, ideal: 25 },\n      { day: 'Day 6', remaining: 28, ideal: 20 },\n      { day: 'Day 7', remaining: 25, ideal: 15 },\n      { day: 'Day 8', remaining: 20, ideal: 10 },\n      { day: 'Day 9', remaining: 15, ideal: 5 },\n      { day: 'Day 10', remaining: 12, ideal: 0 },\n    ];\n  }\n\n  /**\n   * Generate complete sample data as fallback\n   */\n  private generateSampleData(): DashboardData {\n    return {\n      tasks: {\n        total: 45,\n        byStatus: {\n          todo: 18,\n          in_progress: 12,\n          done: 13,\n          blocked: 2,\n        },\n        byPriority: {\n          P1: 8,\n          P2: 15,\n          P3: 18,\n          P4: 4,\n        },\n        completed: 13,\n        overdue: 3,\n      },\n      velocity: this.generateSampleVelocity(),\n      teamMembers: this.generateSampleTeamMembers(),\n      burndown: this.generateSampleBurndown(),\n      activity: [\n        { timestamp: '14:32', event: 'Task completed: User Auth', user: 'Alice' },\n        { timestamp: '14:15', event: 'New task created: Fix login bug', user: 'Bob' },\n        { timestamp: '13:45', event: 'Task moved to In Progress', user: 'Charlie' },\n        { timestamp: '13:20', event: 'Comment added to TASK-123', user: 'Diana' },\n        { timestamp: '12:55', event: 'Task assigned to Alice', user: 'Bob' },\n      ],\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/types.ts","messages":[{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":20,"column":3,"nodeType":"VariableDeclaration","messageId":"top","endLine":20,"endColumn":36}],"suppressedMessages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":20,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Type definitions for CLI API client\n */\n\nimport type { Task, Board, Note, Tag } from '../types';\nimport type { ConfigManager } from './config';\nimport type { ApiClient } from './client';\nimport type { OutputFormatter } from './formatter';\n\n// Global CLI components interface\nexport interface CliComponents {\n  config: ConfigManager;\n  apiClient: ApiClient;\n  formatter: OutputFormatter;\n}\n\n// Global type declaration to extend Node.js global\ndeclare global {\n  // eslint-disable-next-line no-var\n  var cliComponents: CliComponents;\n}\n\n// Health check response\nexport interface HealthResponse {\n  status: 'ok' | 'error';\n  timestamp: string;\n  uptime: number;\n  database: {\n    status: 'connected' | 'disconnected';\n    size?: number;\n  };\n  memory?: {\n    used: number;\n    total: number;\n  };\n}\n\n// Task operations\nexport interface CreateTaskRequest {\n  title: string;\n  description?: string;\n  board_id: string;\n  column_id?: string;\n  priority?: number;\n  status?: 'todo' | 'in_progress' | 'done' | 'blocked' | 'archived';\n  assignee?: string;\n  due_date?: string;\n  tags?: string[];\n}\n\nexport interface UpdateTaskRequest {\n  title?: string;\n  description?: string;\n  priority?: number;\n  status?: 'todo' | 'in_progress' | 'done' | 'blocked' | 'archived';\n  assignee?: string;\n  due_date?: string;\n  progress?: number;\n}\n\n// Board operations\nexport interface CreateBoardRequest {\n  name: string;\n  description?: string;\n  columns?: Array<{\n    name: string;\n    position: number;\n  }>;\n}\n\nexport interface UpdateBoardRequest {\n  name?: string;\n  description?: string;\n  archived?: boolean;\n}\n\n// Note operations\nexport interface CreateNoteRequest {\n  content: string;\n  category?: 'general' | 'meeting' | 'idea' | 'todo' | 'reminder';\n  task_id?: string;\n  board_id?: string;\n  pinned?: boolean;\n}\n\nexport interface UpdateNoteRequest {\n  content?: string;\n  category?: 'general' | 'meeting' | 'idea' | 'todo' | 'reminder';\n  pinned?: boolean;\n}\n\n// Tag operations\nexport interface CreateTagRequest {\n  name: string;\n  color?: string;\n  description?: string;\n  parent_id?: string;\n}\n\nexport interface UpdateTagRequest {\n  name?: string;\n  color?: string;\n  description?: string;\n  parent_id?: string;\n}\n\n// API response wrappers\nexport interface ApiResponse<T = unknown> {\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: unknown;\n  };\n  timestamp?: string;\n  status?: string;\n}\n\nexport interface TaskResponse extends ApiResponse<Task> {\n  data: Task;\n}\n\nexport interface TasksResponse extends ApiResponse<Task[]> {\n  data: Task[];\n  count?: number;\n}\n\nexport interface BoardResponse extends ApiResponse<Board> {\n  data: Board;\n}\n\nexport interface BoardsResponse extends ApiResponse<Board[]> {\n  data: Board[];\n  count?: number;\n}\n\nexport interface NoteResponse extends ApiResponse<Note> {\n  data: Note;\n}\n\nexport interface NotesResponse extends ApiResponse<Note[]> {\n  data: Note[];\n  count?: number;\n}\n\nexport interface TagResponse extends ApiResponse<Tag> {\n  data: Tag;\n}\n\nexport interface TagsResponse extends ApiResponse<Tag[]> {\n  data: Tag[];\n  count?: number;\n}\n\n// Error response type\nexport interface ErrorResponse {\n  error: {\n    code: string;\n    message: string;\n    details?: unknown;\n    timestamp?: string;\n    requestId?: string;\n  };\n}\n\n// Backup-related types\nexport interface BackupInfo {\n  id: string;\n  name: string;\n  size: number;\n  compressed: boolean;\n  verified: boolean;\n  createdAt: string;\n  description?: string;\n}\n\nexport interface BackupResponse extends ApiResponse<BackupInfo> {\n  data: BackupInfo;\n}\n\nexport interface BackupsResponse extends ApiResponse<BackupInfo[]> {\n  data: BackupInfo[];\n  count?: number;\n}\n\nexport interface RestoreResult {\n  success: boolean;\n  message?: string;\n  backupsApplied?: number;\n}\n\nexport interface VerificationResult {\n  valid: boolean;\n  message?: string;\n  details?: Record<string, unknown>;\n}\n\nexport interface BackupSchedule {\n  id: string;\n  name: string;\n  cronExpression: string;\n  backupType: 'full' | 'incremental';\n  description?: string;\n  retentionDays: number;\n  compressionEnabled: boolean;\n  verificationEnabled: boolean;\n  enabled: boolean;\n  createdAt: string;\n  updatedAt: string;\n  lastRun?: string;\n  nextRun?: string;\n}\n\nexport interface ScheduleResponse extends ApiResponse<BackupSchedule> {\n  data: BackupSchedule;\n}\n\nexport interface SchedulesResponse extends ApiResponse<BackupSchedule[]> {\n  data: BackupSchedule[];\n  count?: number;\n}\n\n// Database-related types\nexport interface DatabaseOptimizationResult {\n  operation: string;\n  duration: string;\n  before: string;\n  after: string;\n  improvement: string;\n}\n\nexport interface DatabaseVacuumResult {\n  sizeBefore: string;\n  sizeAfter: string;\n  spaceReclaimed: string;\n  duration: string;\n}\n\nexport interface DatabaseAnalysisResult {\n  table: string;\n  rowCount: number;\n  indexCount: number;\n  avgRowSize: string;\n  totalSize: string;\n}\n\nexport interface DatabaseStats {\n  general?: Array<{\n    metric: string;\n    value: string;\n  }>;\n  tables?: Array<{\n    name: string;\n    rowCount: number;\n    size: string;\n    lastModified: string;\n  }>;\n  indexes?: Array<{\n    name: string;\n    table: string;\n    size: string;\n    usage: string;\n  }>;\n  performance?: Array<{\n    metric: string;\n    value: string;\n    unit: string;\n  }>;\n}\n\nexport interface DatabaseIntegrityResult {\n  healthy: boolean;\n  check: string;\n  status: string;\n  details: string;\n  issues?: Array<{\n    type: string;\n    severity: string;\n    message: string;\n    suggestion: string;\n  }>;\n}\n\nexport interface DatabaseRepairResult {\n  operation: string;\n  status: string;\n  recordsFixed: number;\n  backupCreated: boolean;\n}\n\nexport interface Migration {\n  name: string;\n  version: string;\n  status: 'pending' | 'applied' | 'failed';\n  appliedAt?: string;\n  filename?: string;\n  createdAt?: string;\n}\n\nexport interface MigrationResult {\n  migration: string;\n  status: string;\n  duration: string;\n}\n\n// Export/Import-related types\nexport interface ExportParams {\n  format: 'json' | 'csv';\n  includeBoards: boolean;\n  includeTasks: boolean;\n  includeTags: boolean;\n  includeNotes: boolean;\n  boardIds?: string[];\n  [key: string]: string | boolean | string[] | undefined;\n}\n\nexport interface ExportResponse {\n  data: unknown;\n  filePath?: string;\n  itemCount?: number;\n}\n\nexport interface ImportValidationResponse {\n  valid: boolean;\n  wouldImport: number;\n  wouldSkip: number;\n  errors: string[];\n}\n\nexport interface ImportResponse {\n  imported: number;\n  skipped: number;\n  errors: string[];\n}\n\n// Union type for all possible API responses\nexport type AnyApiResponse =\n  | HealthResponse\n  | TaskResponse\n  | TasksResponse\n  | BoardResponse\n  | BoardsResponse\n  | NoteResponse\n  | NotesResponse\n  | TagResponse\n  | TagsResponse\n  | BackupResponse\n  | BackupsResponse\n  | ScheduleResponse\n  | SchedulesResponse\n  | ErrorResponse\n  | ApiResponse;\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/ui/components/BoardView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":45,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":45,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":45,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":45,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1997,1999],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":83,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":83,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .leftArrow on an `any` value.","line":87,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .rightArrow on an `any` value.","line":90,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .upArrow on an `any` value.","line":93,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .downArrow on an `any` value.","line":97,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .return on an `any` value.","line":101,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":108,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":108,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":110,"column":20,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":110,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":111,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":111,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3561,3563],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3608,3610],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":188,"column":29,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":192,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":214,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":214,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6785,6787],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Box, Text, useInput, useApp } from 'ink';\nimport chalk from 'chalk';\nimport type { Task } from './TaskList';\n\nexport interface Column {\n  id: string;\n  name: string;\n  tasks: Task[];\n  limit?: number;\n}\n\nexport interface Board {\n  id: string;\n  name: string;\n  description?: string;\n  columns: Column[];\n}\n\nexport interface BoardViewProps {\n  board: Board;\n  onTaskSelect?: (task: Task, columnId: string) => void;\n  onColumnSelect?: (column: Column) => void;\n  onKeyPress?: (\n    key: string,\n    context: { selectedTask: Task | null; selectedColumn: Column | null }\n  ) => void;\n  showWIPLimits?: boolean;\n  maxColumnHeight?: number;\n  columnWidth?: number;\n}\n\nexport const BoardView: React.FC<BoardViewProps> = ({\n  board,\n  onTaskSelect,\n  onColumnSelect,\n  onKeyPress,\n  showWIPLimits = true,\n  maxColumnHeight = 8,\n  columnWidth = 25,\n}) => {\n  const [selectedColumn, setSelectedColumn] = useState(0);\n  const [selectedTask, setSelectedTask] = useState(0);\n  const [scrollOffsets, setScrollOffsets] = useState<Map<string, number>>(new Map());\n  const { exit } = useApp();\n\n  // Ensure selection is within bounds\n  useEffect(() => {\n    if (selectedColumn >= board.columns.length && board.columns.length > 0) {\n      setSelectedColumn(board.columns.length - 1);\n    }\n    if (selectedColumn < 0) {\n      setSelectedColumn(0);\n    }\n  }, [board.columns.length, selectedColumn]);\n\n  useEffect(() => {\n    const currentColumn = board.columns[selectedColumn];\n    if (currentColumn && selectedTask >= currentColumn.tasks.length) {\n      setSelectedTask(Math.max(0, currentColumn.tasks.length - 1));\n    }\n    if (selectedTask < 0) {\n      setSelectedTask(0);\n    }\n  }, [board.columns, selectedColumn, selectedTask]);\n\n  // Update scroll offset for current column\n  useEffect(() => {\n    const currentColumn = board.columns[selectedColumn];\n    if (!currentColumn) return;\n\n    const currentOffset = scrollOffsets.get(currentColumn.id) || 0;\n\n    if (selectedTask < currentOffset) {\n      setScrollOffsets(prev => new Map(prev.set(currentColumn.id, selectedTask)));\n    } else if (selectedTask >= currentOffset + maxColumnHeight) {\n      setScrollOffsets(\n        prev => new Map(prev.set(currentColumn.id, selectedTask - maxColumnHeight + 1))\n      );\n    }\n  }, [selectedColumn, selectedTask, maxColumnHeight, board.columns, scrollOffsets]);\n\n  useInput((input, key) => {\n    const currentColumn = board.columns[selectedColumn];\n    const currentTask = currentColumn?.tasks[selectedTask];\n\n    if (key.leftArrow || input === 'h') {\n      setSelectedColumn(prev => Math.max(0, prev - 1));\n      setSelectedTask(0); // Reset task selection when changing columns\n    } else if (key.rightArrow || input === 'l') {\n      setSelectedColumn(prev => Math.min(board.columns.length - 1, prev + 1));\n      setSelectedTask(0); // Reset task selection when changing columns\n    } else if (key.upArrow || input === 'k') {\n      if (currentColumn) {\n        setSelectedTask(prev => Math.max(0, prev - 1));\n      }\n    } else if (key.downArrow || input === 'j') {\n      if (currentColumn) {\n        setSelectedTask(prev => Math.min(currentColumn.tasks.length - 1, prev + 1));\n      }\n    } else if (key.return) {\n      if (currentTask && currentColumn) {\n        onTaskSelect?.(currentTask, currentColumn.id);\n      } else if (currentColumn) {\n        onColumnSelect?.(currentColumn);\n      }\n    } else if (input === 'q') {\n      exit();\n    } else {\n      onKeyPress?.(input, {\n        selectedTask: currentTask || null,\n        selectedColumn: currentColumn || null,\n      });\n    }\n  });\n\n  const formatTaskStatus = (status: Task['status']): string => {\n    const statusMap = {\n      todo: chalk.gray('○'),\n      in_progress: chalk.yellow('◐'),\n      done: chalk.green('●'),\n      blocked: chalk.red('✕'),\n    };\n    return statusMap[status];\n  };\n\n  const formatPriority = (priority?: Task['priority']): string => {\n    if (!priority) return '';\n\n    const priorityColors = {\n      P1: chalk.red,\n      P2: chalk.yellow,\n      P3: chalk.blue,\n      P4: chalk.green,\n      P5: chalk.gray,\n    };\n\n    return priorityColors[priority](`[${priority}]`);\n  };\n\n  const truncateText = (text: string, maxLength: number): string => {\n    if (text.length <= maxLength) return text;\n    return `${text.substring(0, maxLength - 3)}...`;\n  };\n\n  const getWIPStatus = (column: Column): { isOverLimit: boolean; status: string } => {\n    if (!column.limit) return { isOverLimit: false, status: '' };\n\n    const taskCount = column.tasks.length;\n    const isOverLimit = taskCount > column.limit;\n\n    return {\n      isOverLimit,\n      status: isOverLimit\n        ? chalk.red(`${taskCount}/${column.limit}`)\n        : chalk.green(`${taskCount}/${column.limit}`),\n    };\n  };\n\n  const renderColumnHeader = (column: Column, columnIndex: number): React.ReactNode => {\n    const isSelected = columnIndex === selectedColumn;\n    const wipStatus = showWIPLimits ? getWIPStatus(column) : null;\n\n    const headerColor = isSelected ? chalk.bgCyan.black : chalk.cyan;\n    const borderChar = isSelected ? '═' : '─';\n\n    const title = truncateText(column.name, columnWidth - 4);\n    const taskCount = wipStatus ? wipStatus.status : `${column.tasks.length}`;\n\n    return (\n      <Box flexDirection=\"column\" width={columnWidth}>\n        <Text>{borderChar.repeat(columnWidth)}</Text>\n        <Text>{headerColor(` ${title} (${taskCount}) `)}</Text>\n        <Text>{borderChar.repeat(columnWidth)}</Text>\n      </Box>\n    );\n  };\n\n  const renderTask = (\n    task: Task,\n    taskIndex: number,\n    columnIndex: number,\n    isTaskSelected: boolean\n  ): React.ReactNode => {\n    const statusIcon = formatTaskStatus(task.status);\n    const priority = formatPriority(task.priority);\n\n    const backgroundColor = isTaskSelected\n      ? chalk.bgBlue.white\n      : task.status === 'done'\n        ? chalk.gray\n        : chalk.white;\n\n    const taskTitle = truncateText(task.title, columnWidth - 8);\n    const taskId = truncateText(task.id, 8);\n\n    return (\n      <Box key={task.id} flexDirection=\"column\" width={columnWidth}>\n        <Text>\n          {isTaskSelected ? '▶' : ' '} {statusIcon} {backgroundColor(`[${taskId}]`)}\n        </Text>\n        <Text>{backgroundColor(`  ${taskTitle}`)}</Text>\n        {priority && <Text>{backgroundColor(`  ${priority}`)}</Text>}\n        {task.assignee && (\n          <Text color=\"gray\">{`  @${truncateText(task.assignee, columnWidth - 4)}`}</Text>\n        )}\n        <Text> </Text> {/* Spacing between tasks */}\n      </Box>\n    );\n  };\n\n  const renderColumn = (column: Column, columnIndex: number): React.ReactNode => {\n    const isColumnSelected = columnIndex === selectedColumn;\n    const scrollOffset = scrollOffsets.get(column.id) || 0;\n    const visibleTasks = column.tasks.slice(scrollOffset, scrollOffset + maxColumnHeight);\n    const hasMoreAbove = scrollOffset > 0;\n    const hasMoreBelow = scrollOffset + maxColumnHeight < column.tasks.length;\n\n    return (\n      <Box key={column.id} flexDirection=\"column\" width={columnWidth} marginRight={1}>\n        {renderColumnHeader(column, columnIndex)}\n\n        {/* Scroll indicator - above */}\n        {hasMoreAbove && (\n          <Box justifyContent=\"center\" width={columnWidth}>\n            <Text color=\"gray\">⬆ {scrollOffset} more</Text>\n          </Box>\n        )}\n\n        {/* Tasks */}\n        <Box flexDirection=\"column\" minHeight={maxColumnHeight * 3}>\n          {column.tasks.length === 0 ? (\n            <Box marginTop={1} justifyContent=\"center\" width={columnWidth}>\n              <Text color=\"gray\">Empty</Text>\n            </Box>\n          ) : (\n            visibleTasks.map((task, visibleIndex) => {\n              const actualTaskIndex = scrollOffset + visibleIndex;\n              const isTaskSelected = isColumnSelected && actualTaskIndex === selectedTask;\n              return renderTask(task, actualTaskIndex, columnIndex, isTaskSelected);\n            })\n          )}\n        </Box>\n\n        {/* Scroll indicator - below */}\n        {hasMoreBelow && (\n          <Box justifyContent=\"center\" width={columnWidth}>\n            <Text color=\"gray\">⬇ {column.tasks.length - scrollOffset - maxColumnHeight} more</Text>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  const renderBoardStats = (): React.ReactNode => {\n    const totalTasks = board.columns.reduce((sum, col) => sum + col.tasks.length, 0);\n    const completedTasks = board.columns.reduce(\n      (sum, col) => sum + col.tasks.filter(t => t.status === 'done').length,\n      0\n    );\n    const blockedTasks = board.columns.reduce(\n      (sum, col) => sum + col.tasks.filter(t => t.status === 'blocked').length,\n      0\n    );\n\n    const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n    return (\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\">{'═'.repeat(80)}</Text>\n        <Box>\n          <Text>\n            📊 Total: {totalTasks} | ✅ Complete: {chalk.green(completedTasks)} (\n            {chalk.cyan(`${completionRate}%`)}) | 🚫 Blocked: {chalk.red(blockedTasks)}\n          </Text>\n        </Box>\n      </Box>\n    );\n  };\n\n  const renderHelp = (): React.ReactNode => (\n    <Box marginTop={1}>\n      <Text color=\"gray\">\n        ←/→ or h/l: Switch columns | ↑/↓ or j/k: Navigate tasks | Enter: Select | q: Quit\n      </Text>\n    </Box>\n  );\n\n  return (\n    <Box flexDirection=\"column\">\n      {/* Board header */}\n      <Box marginBottom={1}>\n        <Text bold color=\"cyan\">\n          🏗️ {board.name}\n        </Text>\n      </Box>\n\n      {board.description && (\n        <Box marginBottom={1}>\n          <Text color=\"gray\">{board.description}</Text>\n        </Box>\n      )}\n\n      {/* Board columns */}\n      <Box flexDirection=\"row\">\n        {board.columns.map((column, index) => renderColumn(column, index))}\n      </Box>\n\n      {/* Board statistics */}\n      {renderBoardStats()}\n\n      {/* Help text */}\n      {renderHelp()}\n    </Box>\n  );\n};\n\nexport default BoardView;\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/ui/components/StatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/ui/components/TaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":38,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":38,"column":20,"nodeType":"Identifier","messageId":"unsafeCall","endLine":38,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":64,"column":3,"nodeType":"Identifier","messageId":"unsafeCall","endLine":64,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .upArrow on an `any` value.","line":67,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":67,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .downArrow on an `any` value.","line":69,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pageUp on an `any` value.","line":71,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ctrl on an `any` value.","line":71,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":71,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pageDown on an `any` value.","line":74,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ctrl on an `any` value.","line":74,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .leftArrow on an `any` value.","line":83,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .rightArrow on an `any` value.","line":92,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":103,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":103,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3629,3631],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":106,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":106,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3747,3749],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":119,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":119,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4221,4223],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4338,4340],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .return on an `any` value.","line":123,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":128,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":128,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":130,"column":20,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":130,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":130,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":130,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4595,4597],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":180,"column":24,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":184,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6408,6429],"text":"(task.assignee ?? tags)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··········Filters:·←/→·h/l·(cycle·status·filters)⏎········` with `Filters:·←/→·h/l·(cycle·status·filters)`","line":250,"column":28,"nodeType":null,"messageId":"replace","endLine":252,"endColumn":9,"fix":{"range":[8247,8306],"text":"Filters: ←/→ h/l (cycle status filters)"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Box, Text, useInput, useApp } from 'ink';\nimport chalk from 'chalk';\n\nexport interface Task {\n  id: string;\n  title: string;\n  status: 'todo' | 'in_progress' | 'done' | 'blocked';\n  priority?: 'P1' | 'P2' | 'P3' | 'P4' | 'P5';\n  assignee?: string;\n  tags?: string[];\n  due_date?: string;\n}\n\nexport interface TaskListProps {\n  tasks: Task[];\n  title?: string;\n  onTaskSelect?: (task: Task) => void;\n  onKeyPress?: (key: string, selectedTask: Task | null) => void;\n  showSelection?: boolean;\n  maxHeight?: number;\n  filterStatus?: string[];\n  showStats?: boolean;\n}\n\nexport const TaskList: React.FC<TaskListProps> = ({\n  tasks,\n  title = 'Tasks',\n  onTaskSelect,\n  onKeyPress,\n  showSelection = true,\n  maxHeight = 10,\n  filterStatus,\n  showStats = true,\n}) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollOffset, setScrollOffset] = useState(0);\n  const { exit } = useApp();\n\n  // Filter tasks based on status filter\n  const filteredTasks = filterStatus\n    ? tasks.filter(task => filterStatus.includes(task.status))\n    : tasks;\n\n  // Ensure selected index is within bounds\n  useEffect(() => {\n    if (selectedIndex >= filteredTasks.length && filteredTasks.length > 0) {\n      setSelectedIndex(filteredTasks.length - 1);\n    }\n    if (selectedIndex < 0) {\n      setSelectedIndex(0);\n    }\n  }, [filteredTasks.length, selectedIndex]);\n\n  // Update scroll offset based on selection\n  useEffect(() => {\n    if (selectedIndex < scrollOffset) {\n      setScrollOffset(selectedIndex);\n    } else if (selectedIndex >= scrollOffset + maxHeight) {\n      setScrollOffset(selectedIndex - maxHeight + 1);\n    }\n  }, [selectedIndex, maxHeight]);\n\n  useInput((input, key) => {\n    if (!showSelection) return;\n\n    if (key.upArrow || input === 'k') {\n      setSelectedIndex(prev => Math.max(0, prev - 1));\n    } else if (key.downArrow || input === 'j') {\n      setSelectedIndex(prev => Math.min(filteredTasks.length - 1, prev + 1));\n    } else if (key.pageUp || (key.ctrl && input === 'u')) {\n      // Page up - jump by maxHeight or to top\n      setSelectedIndex(prev => Math.max(0, prev - maxHeight));\n    } else if (key.pageDown || (key.ctrl && input === 'd')) {\n      // Page down - jump by maxHeight or to bottom\n      setSelectedIndex(prev => Math.min(filteredTasks.length - 1, prev + maxHeight));\n    } else if (input === 'g') {\n      // Go to top (Vim style)\n      setSelectedIndex(0);\n    } else if (input === 'G') {\n      // Go to bottom (Vim style)\n      setSelectedIndex(filteredTasks.length - 1);\n    } else if (input === 'h' || key.leftArrow) {\n      // Quick status filter - previous status\n      const statusOrder = ['todo', 'in_progress', 'done', 'blocked'];\n      const currentTask = filteredTasks[selectedIndex];\n      if (currentTask) {\n        const currentIndex = statusOrder.indexOf(currentTask.status);\n        const prevStatus = statusOrder[Math.max(0, currentIndex - 1)];\n        onKeyPress?.(`filter:${prevStatus}`, currentTask);\n      }\n    } else if (input === 'l' || key.rightArrow) {\n      // Quick status filter - next status\n      const statusOrder = ['todo', 'in_progress', 'done', 'blocked'];\n      const currentTask = filteredTasks[selectedIndex];\n      if (currentTask) {\n        const currentIndex = statusOrder.indexOf(currentTask.status);\n        const nextStatus = statusOrder[Math.min(statusOrder.length - 1, currentIndex + 1)];\n        onKeyPress?.(`filter:${nextStatus}`, currentTask);\n      }\n    } else if (input === '/') {\n      // Search mode trigger\n      onKeyPress?.('search', filteredTasks[selectedIndex] || null);\n    } else if (input === 'r') {\n      // Refresh\n      onKeyPress?.('refresh', filteredTasks[selectedIndex] || null);\n    } else if (input === 'd') {\n      // Delete/archive selected task\n      if (filteredTasks[selectedIndex]) {\n        onKeyPress?.('delete', filteredTasks[selectedIndex]);\n      }\n    } else if (input === 'e') {\n      // Edit selected task\n      if (filteredTasks[selectedIndex]) {\n        onKeyPress?.('edit', filteredTasks[selectedIndex]);\n      }\n    } else if (input === 'n') {\n      // Create new task\n      onKeyPress?.('new', filteredTasks[selectedIndex] || null);\n    } else if (input === '?') {\n      // Show help\n      onKeyPress?.('help', filteredTasks[selectedIndex] || null);\n    } else if (key.return) {\n      if (filteredTasks[selectedIndex]) {\n        onTaskSelect?.(filteredTasks[selectedIndex]);\n      }\n    } else if (input === 'q') {\n      exit();\n    } else {\n      onKeyPress?.(input, filteredTasks[selectedIndex] || null);\n    }\n  });\n\n  const formatTaskStatus = (status: Task['status']): string => {\n    const statusMap = {\n      todo: chalk.gray('○'),\n      in_progress: chalk.yellow('◐'),\n      done: chalk.green('●'),\n      blocked: chalk.red('✕'),\n    };\n    return statusMap[status];\n  };\n\n  const formatPriority = (priority?: Task['priority']): string => {\n    if (!priority) return '';\n\n    const priorityColors = {\n      P1: chalk.red,\n      P2: chalk.yellow,\n      P3: chalk.blue,\n      P4: chalk.green,\n      P5: chalk.gray,\n    };\n\n    return priorityColors[priority](priority);\n  };\n\n  const formatTags = (tags?: string[]): string => {\n    if (!tags || tags.length === 0) return '';\n    return tags.map(tag => chalk.magenta(`#${tag}`)).join(' ');\n  };\n\n  const formatDueDate = (dueDate?: string): string => {\n    if (!dueDate) return '';\n\n    const date = new Date(dueDate);\n    const now = new Date();\n    const isOverdue = date < now;\n    const dateStr = date.toLocaleDateString();\n\n    return isOverdue ? chalk.red(`⏰ ${dateStr}`) : chalk.gray(`📅 ${dateStr}`);\n  };\n\n  const renderTaskItem = (task: Task, index: number, isSelected: boolean): React.ReactNode => {\n    const statusIcon = formatTaskStatus(task.status);\n    const priority = formatPriority(task.priority);\n    const tags = formatTags(task.tags);\n    const dueDate = formatDueDate(task.due_date);\n\n    const titleColor = isSelected\n      ? chalk.bgBlue.white\n      : task.status === 'done'\n        ? chalk.gray\n        : chalk.white;\n\n    const prefix = isSelected ? '▶ ' : '  ';\n\n    return (\n      <Box key={task.id} flexDirection=\"column\">\n        <Box>\n          <Text>\n            {prefix}\n            {statusIcon} {titleColor(`[${task.id}] ${task.title}`)}\n            {priority && ` ${priority}`}\n          </Text>\n        </Box>\n        {(task.assignee || tags || dueDate) && (\n          <Box marginLeft={4}>\n            <Text color=\"gray\">\n              {task.assignee && chalk.cyan(`@${task.assignee}`)}\n              {task.assignee && (tags || dueDate) && ' | '}\n              {tags}\n              {tags && dueDate && ' | '}\n              {dueDate}\n            </Text>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  const renderStats = (): React.ReactNode => {\n    if (!showStats) return null;\n\n    const stats = {\n      total: filteredTasks.length,\n      todo: filteredTasks.filter(t => t.status === 'todo').length,\n      inProgress: filteredTasks.filter(t => t.status === 'in_progress').length,\n      done: filteredTasks.filter(t => t.status === 'done').length,\n      blocked: filteredTasks.filter(t => t.status === 'blocked').length,\n    };\n\n    const completionRate = stats.total > 0 ? Math.round((stats.done / stats.total) * 100) : 0;\n\n    return (\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\">{'─'.repeat(50)}</Text>\n        <Box>\n          <Text color=\"gray\">\n            Total: {stats.total} | Todo: {chalk.gray(stats.todo)} | In Progress:{' '}\n            {chalk.yellow(stats.inProgress)} | Done: {chalk.green(stats.done)} | Blocked:{' '}\n            {chalk.red(stats.blocked)} | Complete: {chalk.cyan(`${completionRate}%`)}\n          </Text>\n        </Box>\n      </Box>\n    );\n  };\n\n  const renderHelpText = (): React.ReactNode => {\n    if (!showSelection) return null;\n\n    return (\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\">\n          Navigation: ↑/↓ j/k | Page: PgUp/PgDn Ctrl+u/d | Jump: g(top) G(bottom)\n        </Text>\n        <Text color=\"gray\">\n          Actions: Enter(select) n(new) e(edit) d(delete) r(refresh) /(search) ?(help) q(quit)\n        </Text>\n        <Text color=\"gray\">\n          Filters: ←/→ h/l (cycle status filters)\n        </Text>\n      </Box>\n    );\n  };\n\n  // Calculate visible tasks\n  const visibleTasks = filteredTasks.slice(scrollOffset, scrollOffset + maxHeight);\n  const hasMoreAbove = scrollOffset > 0;\n  const hasMoreBelow = scrollOffset + maxHeight < filteredTasks.length;\n\n  return (\n    <Box flexDirection=\"column\">\n      {/* Header */}\n      <Box marginBottom={1}>\n        <Text bold color=\"cyan\">\n          📋 {title} ({filteredTasks.length})\n        </Text>\n      </Box>\n\n      {/* Scroll indicator - above */}\n      {hasMoreAbove && (\n        <Box justifyContent=\"center\">\n          <Text color=\"gray\">⬆ {scrollOffset} more above</Text>\n        </Box>\n      )}\n\n      {/* Task list */}\n      <Box flexDirection=\"column\">\n        {filteredTasks.length === 0 ? (\n          <Text color=\"gray\">No tasks found</Text>\n        ) : (\n          visibleTasks.map((task, visibleIndex) => {\n            const actualIndex = scrollOffset + visibleIndex;\n            const isSelected = showSelection && actualIndex === selectedIndex;\n            return renderTaskItem(task, actualIndex, isSelected);\n          })\n        )}\n      </Box>\n\n      {/* Scroll indicator - below */}\n      {hasMoreBelow && (\n        <Box justifyContent=\"center\">\n          <Text color=\"gray\">⬇ {filteredTasks.length - scrollOffset - maxHeight} more below</Text>\n        </Box>\n      )}\n\n      {/* Stats */}\n      {renderStats()}\n\n      {/* Help text */}\n      {renderHelpText()}\n    </Box>\n  );\n};\n\nexport default TaskList;\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/ui/themes/dashboard-themes.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":296,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":296,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5305,5307],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":340,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":340,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":350,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":350,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":360,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":360,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":373,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":373,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":385,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":385,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":395,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":395,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":405,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":405,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":414,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":414,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":427,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":427,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":440,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":440,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dashboard theme configurations for blessed-contrib\n */\n\nexport interface DashboardTheme {\n  name: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    warning: string;\n    error: string;\n    info: string;\n    background: string;\n    foreground: string;\n    border: string;\n    accent: string;\n  };\n  widgets: {\n    donut: {\n      remainColor: string;\n      colors: string[];\n    };\n    bar: {\n      barColor: string;\n      textColor: string;\n    };\n    line: {\n      lineColor: string;\n      textColor: string;\n      baseline: string;\n    };\n    table: {\n      fg: string;\n      selectedFg: string;\n      selectedBg: string;\n      border: string;\n    };\n    log: {\n      fg: string;\n      selectedFg: string;\n    };\n    gauge: {\n      stroke: string;\n      fill: string;\n    };\n    sparkline: {\n      fg: string;\n    };\n    box: {\n      fg: string;\n      bg: string;\n      border: string;\n    };\n  };\n}\n\n/**\n * Dark theme (default)\n */\nexport const darkTheme: DashboardTheme = {\n  name: 'dark',\n  colors: {\n    primary: 'cyan',\n    secondary: 'blue',\n    success: 'green',\n    warning: 'yellow',\n    error: 'red',\n    info: 'magenta',\n    background: 'black',\n    foreground: 'white',\n    border: 'cyan',\n    accent: 'yellow',\n  },\n  widgets: {\n    donut: {\n      remainColor: 'black',\n      colors: ['green', 'yellow', 'red', 'blue', 'magenta', 'cyan'],\n    },\n    bar: {\n      barColor: 'cyan',\n      textColor: 'white',\n    },\n    line: {\n      lineColor: 'yellow',\n      textColor: 'green',\n      baseline: 'black',\n    },\n    table: {\n      fg: 'white',\n      selectedFg: 'white',\n      selectedBg: 'blue',\n      border: 'cyan',\n    },\n    log: {\n      fg: 'green',\n      selectedFg: 'green',\n    },\n    gauge: {\n      stroke: 'green',\n      fill: 'white',\n    },\n    sparkline: {\n      fg: 'blue',\n    },\n    box: {\n      fg: 'white',\n      bg: 'black',\n      border: 'cyan',\n    },\n  },\n};\n\n/**\n * Light theme\n */\nexport const lightTheme: DashboardTheme = {\n  name: 'light',\n  colors: {\n    primary: 'blue',\n    secondary: 'gray',\n    success: 'green',\n    warning: 'orange',\n    error: 'red',\n    info: 'purple',\n    background: 'white',\n    foreground: 'black',\n    border: 'gray',\n    accent: 'blue',\n  },\n  widgets: {\n    donut: {\n      remainColor: 'white',\n      colors: ['green', 'orange', 'red', 'blue', 'purple', 'gray'],\n    },\n    bar: {\n      barColor: 'blue',\n      textColor: 'black',\n    },\n    line: {\n      lineColor: 'blue',\n      textColor: 'black',\n      baseline: 'gray',\n    },\n    table: {\n      fg: 'black',\n      selectedFg: 'white',\n      selectedBg: 'blue',\n      border: 'gray',\n    },\n    log: {\n      fg: 'black',\n      selectedFg: 'black',\n    },\n    gauge: {\n      stroke: 'blue',\n      fill: 'black',\n    },\n    sparkline: {\n      fg: 'blue',\n    },\n    box: {\n      fg: 'black',\n      bg: 'white',\n      border: 'gray',\n    },\n  },\n};\n\n/**\n * High contrast theme for accessibility\n */\nexport const highContrastTheme: DashboardTheme = {\n  name: 'high-contrast',\n  colors: {\n    primary: 'white',\n    secondary: 'yellow',\n    success: 'green',\n    warning: 'yellow',\n    error: 'red',\n    info: 'cyan',\n    background: 'black',\n    foreground: 'white',\n    border: 'white',\n    accent: 'yellow',\n  },\n  widgets: {\n    donut: {\n      remainColor: 'black',\n      colors: ['white', 'yellow', 'red', 'green', 'cyan', 'magenta'],\n    },\n    bar: {\n      barColor: 'white',\n      textColor: 'white',\n    },\n    line: {\n      lineColor: 'white',\n      textColor: 'white',\n      baseline: 'black',\n    },\n    table: {\n      fg: 'white',\n      selectedFg: 'black',\n      selectedBg: 'white',\n      border: 'white',\n    },\n    log: {\n      fg: 'white',\n      selectedFg: 'white',\n    },\n    gauge: {\n      stroke: 'white',\n      fill: 'white',\n    },\n    sparkline: {\n      fg: 'white',\n    },\n    box: {\n      fg: 'white',\n      bg: 'black',\n      border: 'white',\n    },\n  },\n};\n\n/**\n * Solarized dark theme\n */\nexport const solarizedDarkTheme: DashboardTheme = {\n  name: 'solarized-dark',\n  colors: {\n    primary: 'cyan',\n    secondary: 'blue',\n    success: 'green',\n    warning: 'yellow',\n    error: 'red',\n    info: 'magenta',\n    background: 'black',\n    foreground: 'gray',\n    border: 'cyan',\n    accent: 'blue',\n  },\n  widgets: {\n    donut: {\n      remainColor: 'black',\n      colors: ['cyan', 'green', 'yellow', 'blue', 'magenta', 'red'],\n    },\n    bar: {\n      barColor: 'cyan',\n      textColor: 'gray',\n    },\n    line: {\n      lineColor: 'cyan',\n      textColor: 'gray',\n      baseline: 'black',\n    },\n    table: {\n      fg: 'gray',\n      selectedFg: 'white',\n      selectedBg: 'blue',\n      border: 'cyan',\n    },\n    log: {\n      fg: 'cyan',\n      selectedFg: 'cyan',\n    },\n    gauge: {\n      stroke: 'cyan',\n      fill: 'gray',\n    },\n    sparkline: {\n      fg: 'cyan',\n    },\n    box: {\n      fg: 'gray',\n      bg: 'black',\n      border: 'cyan',\n    },\n  },\n};\n\n/**\n * Available themes registry\n */\nexport const themes: Record<string, DashboardTheme> = {\n  dark: darkTheme,\n  light: lightTheme,\n  'high-contrast': highContrastTheme,\n  'solarized-dark': solarizedDarkTheme,\n};\n\n/**\n * Get theme by name with fallback to dark theme\n */\nexport function getTheme(name: string): DashboardTheme {\n  return themes[name] || darkTheme;\n}\n\n/**\n * Get all available theme names\n */\nexport function getThemeNames(): string[] {\n  return Object.keys(themes);\n}\n\n/**\n * Theme helper functions\n */\nexport class ThemeHelper {\n  private theme: DashboardTheme;\n\n  constructor(themeName: string = 'dark') {\n    this.theme = getTheme(themeName);\n  }\n\n  /**\n   * Update theme\n   */\n  setTheme(themeName: string): void {\n    this.theme = getTheme(themeName);\n  }\n\n  /**\n   * Get current theme\n   */\n  getTheme(): DashboardTheme {\n    return this.theme;\n  }\n\n  /**\n   * Get color by name\n   */\n  getColor(colorName: keyof DashboardTheme['colors']): string {\n    return this.theme.colors[colorName];\n  }\n\n  /**\n   * Get widget styles for donut charts\n   */\n  getDonutStyles() {\n    return {\n      remainColor: this.theme.widgets.donut.remainColor,\n      colors: this.theme.widgets.donut.colors,\n    };\n  }\n\n  /**\n   * Get widget styles for bar charts\n   */\n  getBarStyles() {\n    return {\n      barColor: this.theme.widgets.bar.barColor,\n      textColor: this.theme.widgets.bar.textColor,\n    };\n  }\n\n  /**\n   * Get widget styles for line charts\n   */\n  getLineStyles() {\n    return {\n      style: {\n        line: this.theme.widgets.line.lineColor,\n        text: this.theme.widgets.line.textColor,\n        baseline: this.theme.widgets.line.baseline,\n      },\n    };\n  }\n\n  /**\n   * Get widget styles for tables\n   */\n  getTableStyles() {\n    return {\n      fg: this.theme.widgets.table.fg,\n      selectedFg: this.theme.widgets.table.selectedFg,\n      selectedBg: this.theme.widgets.table.selectedBg,\n      border: { type: 'line', fg: this.theme.widgets.table.border },\n    };\n  }\n\n  /**\n   * Get widget styles for log widgets\n   */\n  getLogStyles() {\n    return {\n      fg: this.theme.widgets.log.fg,\n      selectedFg: this.theme.widgets.log.selectedFg,\n    };\n  }\n\n  /**\n   * Get widget styles for gauge widgets\n   */\n  getGaugeStyles() {\n    return {\n      stroke: this.theme.widgets.gauge.stroke,\n      fill: this.theme.widgets.gauge.fill,\n    };\n  }\n\n  /**\n   * Get widget styles for sparkline widgets\n   */\n  getSparklineStyles() {\n    return {\n      style: { fg: this.theme.widgets.sparkline.fg },\n    };\n  }\n\n  /**\n   * Get widget styles for box widgets\n   */\n  getBoxStyles() {\n    return {\n      style: {\n        fg: this.theme.widgets.box.fg,\n        bg: this.theme.widgets.box.bg,\n      },\n      border: { type: 'line', fg: this.theme.widgets.box.border },\n    };\n  }\n\n  /**\n   * Get header styles\n   */\n  getHeaderStyles() {\n    return {\n      border: { type: 'line', fg: this.theme.colors.border },\n      style: {\n        fg: this.theme.colors.foreground,\n        bg: this.theme.colors.secondary,\n      },\n    };\n  }\n\n  /**\n   * Get footer styles\n   */\n  getFooterStyles() {\n    return {\n      border: { type: 'line', fg: this.theme.colors.border },\n      style: { fg: this.theme.colors.foreground },\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/ui/themes/default.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":164,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":164,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3730,3732],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4102,4104],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":176,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":176,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4140,4142],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import chalk from 'chalk';\n\nexport interface Theme {\n  name: string;\n  colors: {\n    primary: (text: string) => string;\n    secondary: (text: string) => string;\n    success: (text: string) => string;\n    error: (text: string) => string;\n    warning: (text: string) => string;\n    info: (text: string) => string;\n    muted: (text: string) => string;\n    highlight: (text: string) => string;\n    accent: (text: string) => string;\n  };\n  status: {\n    todo: { icon: string; color: (text: string) => string };\n    in_progress: { icon: string; color: (text: string) => string };\n    done: { icon: string; color: (text: string) => string };\n    blocked: { icon: string; color: (text: string) => string };\n  };\n  priority: {\n    P1: (text: string) => string;\n    P2: (text: string) => string;\n    P3: (text: string) => string;\n    P4: (text: string) => string;\n    P5: (text: string) => string;\n  };\n  borders: {\n    light: string;\n    heavy: string;\n    double: string;\n  };\n  icons: {\n    task: string;\n    board: string;\n    user: string;\n    tag: string;\n    calendar: string;\n    clock: string;\n    arrow: string;\n    check: string;\n    cross: string;\n    warning: string;\n    info: string;\n  };\n}\n\nexport const defaultTheme: Theme = {\n  name: 'default',\n  colors: {\n    primary: chalk.cyan,\n    secondary: chalk.blue,\n    success: chalk.green,\n    error: chalk.red,\n    warning: chalk.yellow,\n    info: chalk.blue,\n    muted: chalk.gray,\n    highlight: chalk.bgBlue.white,\n    accent: chalk.magenta,\n  },\n  status: {\n    todo: { icon: '○', color: chalk.gray },\n    in_progress: { icon: '◐', color: chalk.yellow },\n    done: { icon: '●', color: chalk.green },\n    blocked: { icon: '✕', color: chalk.red },\n  },\n  priority: {\n    P1: chalk.red,\n    P2: chalk.yellow,\n    P3: chalk.blue,\n    P4: chalk.green,\n    P5: chalk.gray,\n  },\n  borders: {\n    light: '─',\n    heavy: '━',\n    double: '═',\n  },\n  icons: {\n    task: '📋',\n    board: '🏗️',\n    user: '👤',\n    tag: '🏷️',\n    calendar: '📅',\n    clock: '⏰',\n    arrow: '→',\n    check: '✅',\n    cross: '❌',\n    warning: '⚠️',\n    info: 'ℹ️',\n  },\n};\n\nexport const darkTheme: Theme = {\n  ...defaultTheme,\n  name: 'dark',\n  colors: {\n    ...defaultTheme.colors,\n    primary: chalk.cyanBright,\n    secondary: chalk.blueBright,\n    highlight: chalk.bgGray.white,\n  },\n};\n\nexport const lightTheme: Theme = {\n  ...defaultTheme,\n  name: 'light',\n  colors: {\n    ...defaultTheme.colors,\n    primary: chalk.blue,\n    secondary: chalk.cyan,\n    muted: chalk.blackBright,\n    highlight: chalk.bgWhite.black,\n  },\n};\n\nexport const highContrastTheme: Theme = {\n  ...defaultTheme,\n  name: 'high-contrast',\n  colors: {\n    primary: chalk.white,\n    secondary: chalk.white,\n    success: chalk.green,\n    error: chalk.red,\n    warning: chalk.yellow,\n    info: chalk.white,\n    muted: chalk.gray,\n    highlight: chalk.bgWhite.black,\n    accent: chalk.white,\n  },\n  status: {\n    todo: { icon: '[ ]', color: chalk.white },\n    in_progress: { icon: '[~]', color: chalk.yellow },\n    done: { icon: '[X]', color: chalk.green },\n    blocked: { icon: '[!]', color: chalk.red },\n  },\n};\n\n// Theme registry\nexport const themes = {\n  default: defaultTheme,\n  dark: darkTheme,\n  light: lightTheme,\n  'high-contrast': highContrastTheme,\n};\n\nexport type ThemeName = keyof typeof themes;\n\n// Theme utilities\nexport class ThemeManager {\n  private currentTheme: Theme = defaultTheme;\n\n  setTheme(name: ThemeName): void {\n    this.currentTheme = themes[name];\n  }\n\n  getTheme(): Theme {\n    return this.currentTheme;\n  }\n\n  formatStatus(status: string, text?: string): string {\n    const statusConfig = this.currentTheme.status[status as keyof typeof this.currentTheme.status];\n    if (!statusConfig) return text || status;\n\n    const { icon } = statusConfig;\n    const coloredIcon = statusConfig.color(icon);\n\n    return text ? `${coloredIcon} ${statusConfig.color(text)}` : coloredIcon;\n  }\n\n  formatPriority(priority: string, text?: string): string {\n    const colorFn = this.currentTheme.priority[priority as keyof typeof this.currentTheme.priority];\n    if (!colorFn) return text || priority;\n\n    return colorFn(text || priority);\n  }\n\n  formatBorder(type: 'light' | 'heavy' | 'double', length: number): string {\n    const char = this.currentTheme.borders[type];\n    return char.repeat(length);\n  }\n\n  getIcon(name: keyof Theme['icons']): string {\n    return this.currentTheme.icons[name];\n  }\n\n  applyColor(colorName: keyof Theme['colors'], text: string): string {\n    return this.currentTheme.colors[colorName](text);\n  }\n}\n\n// Export singleton instance\nexport const themeManager = new ThemeManager();\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/__tests__/date-formatter.test.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":18,"column":1,"nodeType":null,"messageId":"delete","endLine":18,"endColumn":3,"fix":{"range":[360,362],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":84,"column":1,"nodeType":null,"messageId":"delete","endLine":84,"endColumn":7,"fix":{"range":[2566,2572],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":93,"column":1,"nodeType":null,"messageId":"delete","endLine":93,"endColumn":7,"fix":{"range":[2871,2877],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":170,"column":4,"nodeType":null,"messageId":"insert","endLine":170,"endColumn":4,"fix":{"range":[5271,5271],"text":"\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"/**\n * Unit tests for date/time formatting functions\n */\n\nimport {\n  formatRelativeTimeNatural,\n  formatDueDate,\n  formatSmartDateTime,\n  formatTimeRange,\n  formatTimestamp,\n  formatISODate,\n  formatDateShort,\n  formatWorkingHours,\n} from '../formatter';\n\ndescribe('Date/Time Formatting Functions', () => {\n  const mockDate = new Date('2024-01-15T10:30:00Z');\n  \n  beforeAll(() => {\n    // Mock the current date for consistent tests\n    jest.useFakeTimers();\n    jest.setSystemTime(mockDate);\n  });\n\n  afterAll(() => {\n    jest.useRealTimers();\n  });\n\n  describe('formatRelativeTimeNatural', () => {\n    it('should format relative time using date-fns', () => {\n      const oneHourAgo = new Date(mockDate.getTime() - 60 * 60 * 1000);\n      const result = formatRelativeTimeNatural(oneHourAgo);\n      expect(result).toContain('ago');\n    });\n\n    it('should handle string dates', () => {\n      const result = formatRelativeTimeNatural('2024-01-15T09:30:00Z');\n      expect(result).toContain('ago');\n    });\n  });\n\n  describe('formatDueDate', () => {\n    it('should format today dates with color', () => {\n      const result = formatDueDate(mockDate);\n      expect(result).toContain('Due today');\n    });\n\n    it('should format tomorrow dates', () => {\n      const tomorrow = new Date(mockDate.getTime() + 24 * 60 * 60 * 1000);\n      const result = formatDueDate(tomorrow);\n      expect(result).toContain('Due tomorrow');\n    });\n\n    it('should mark overdue dates', () => {\n      const yesterday = new Date(mockDate.getTime() - 24 * 60 * 60 * 1000);\n      const result = formatDueDate(yesterday);\n      expect(result).toContain('Overdue');\n    });\n  });\n\n  describe('formatSmartDateTime', () => {\n    it('should show only time for today', () => {\n      const result = formatSmartDateTime(mockDate);\n      expect(result).toMatch(/^\\d{2}:\\d{2}$/);\n    });\n\n    it('should show \"Yesterday\" for yesterday dates', () => {\n      const yesterday = new Date(mockDate.getTime() - 24 * 60 * 60 * 1000);\n      const result = formatSmartDateTime(yesterday);\n      expect(result).toContain('Yesterday');\n    });\n\n    it('should show \"Tomorrow\" for tomorrow dates', () => {\n      const tomorrow = new Date(mockDate.getTime() + 24 * 60 * 60 * 1000);\n      const result = formatSmartDateTime(tomorrow);\n      expect(result).toContain('Tomorrow');\n    });\n  });\n\n  describe('formatTimeRange', () => {\n    it('should format same day ranges', () => {\n      const start = new Date(mockDate.getTime());\n      const end = new Date(mockDate.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n      \n      const result = formatTimeRange(start, end);\n      expect(result).toContain('Today');\n      expect(result).toContain('-');\n    });\n\n    it('should format cross-day ranges', () => {\n      const start = mockDate;\n      const end = new Date(mockDate.getTime() + 25 * 60 * 60 * 1000); // Next day\n      \n      const result = formatTimeRange(start, end);\n      expect(result).toContain('-');\n    });\n  });\n\n  describe('formatTimestamp', () => {\n    it('should format with milliseconds', () => {\n      const result = formatTimestamp(mockDate);\n      expect(result).toMatch(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3}/);\n    });\n\n    it('should use current time when no date provided', () => {\n      const result = formatTimestamp();\n      expect(result).toMatch(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3}/);\n    });\n  });\n\n  describe('formatISODate', () => {\n    it('should format as ISO string', () => {\n      const result = formatISODate(mockDate);\n      expect(result).toBe(mockDate.toISOString());\n    });\n\n    it('should handle string dates', () => {\n      const dateStr = '2024-01-15T10:30:00Z';\n      const result = formatISODate(dateStr);\n      expect(result).toBe(new Date(dateStr).toISOString());\n    });\n  });\n\n  describe('formatDateShort', () => {\n    it('should return \"Today\" for today', () => {\n      const result = formatDateShort(mockDate);\n      expect(result).toBe('Today');\n    });\n\n    it('should return \"Yesterday\" for yesterday', () => {\n      const yesterday = new Date(mockDate.getTime() - 24 * 60 * 60 * 1000);\n      const result = formatDateShort(yesterday);\n      expect(result).toBe('Yesterday');\n    });\n\n    it('should return \"Tomorrow\" for tomorrow', () => {\n      const tomorrow = new Date(mockDate.getTime() + 24 * 60 * 60 * 1000);\n      const result = formatDateShort(tomorrow);\n      expect(result).toBe('Tomorrow');\n    });\n\n    it('should format other dates appropriately', () => {\n      const farDate = new Date('2025-05-20T10:30:00Z');\n      const result = formatDateShort(farDate);\n      expect(result).toContain('May');\n    });\n  });\n\n  describe('formatWorkingHours', () => {\n    it('should format minutes for less than 1 hour', () => {\n      const result = formatWorkingHours(0.5);\n      expect(result).toBe('30min');\n    });\n\n    it('should format hours for less than 8 hours', () => {\n      const result = formatWorkingHours(3.5);\n      expect(result).toBe('3.5h');\n    });\n\n    it('should format full days', () => {\n      const result = formatWorkingHours(16);\n      expect(result).toBe('2d');\n    });\n\n    it('should format days and hours', () => {\n      const result = formatWorkingHours(12.5);\n      expect(result).toBe('1d 4.5h');\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/__tests__/formatter.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/__tests__/spinner.test.ts","messages":[{"ruleId":"dot-notation","severity":2,"message":"[\"destroyed\"] is better written in dot notation.","line":40,"column":43,"nodeType":"Literal","messageId":"useDot","endLine":40,"endColumn":54,"fix":{"range":[1100,1113],"text":".destroyed"}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":56,"column":41,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":56,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":57,"column":41,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":57,"endColumn":51},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":68,"column":1,"nodeType":null,"messageId":"delete","endLine":68,"endColumn":7,"fix":{"range":[2092,2098],"text":""}},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":70,"column":15,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":70,"endColumn":38,"fix":{"range":[2154,2177],"text":"`${'a'.repeat(197)  }...`"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":79,"column":1,"nodeType":null,"messageId":"delete","endLine":79,"endColumn":7,"fix":{"range":[2368,2374],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":119,"column":1,"nodeType":null,"messageId":"delete","endLine":119,"endColumn":7,"fix":{"range":[3593,3599],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":128,"column":1,"nodeType":null,"messageId":"delete","endLine":128,"endColumn":7,"fix":{"range":[3927,3933],"text":""}},{"ruleId":"dot-notation","severity":2,"message":"[\"isSpinning\"] is better written in dot notation.","line":149,"column":22,"nodeType":"Literal","messageId":"useDot","endLine":149,"endColumn":34,"fix":{"range":[4700,4714],"text":".isSpinning"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":150,"column":1,"nodeType":null,"messageId":"delete","endLine":150,"endColumn":7,"fix":{"range":[4750,4756],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":157,"column":1,"nodeType":null,"messageId":"delete","endLine":157,"endColumn":7,"fix":{"range":[5035,5041],"text":""}},{"ruleId":"dot-notation","severity":2,"message":"[\"stopSpinner\"] is better written in dot notation.","line":221,"column":22,"nodeType":"Literal","messageId":"useDot","endLine":221,"endColumn":35,"fix":{"range":[7330,7345],"text":".stopSpinner"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Test·error'` with `⏎········'Test·error'⏎······`","line":247,"column":94,"nodeType":null,"messageId":"replace","endLine":247,"endColumn":106,"fix":{"range":[8278,8290],"text":"\n        'Test error'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `expect.stringContaining('Failed:·Processing...')` with `⏎········expect.stringContaining('Failed:·Processing...')⏎······`","line":248,"column":53,"nodeType":null,"messageId":"replace","endLine":248,"endColumn":101,"fix":{"range":[8345,8393],"text":"\n        expect.stringContaining('Failed: Processing...')\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(resolve)` with `resolve`","line":263,"column":39,"nodeType":null,"messageId":"replace","endLine":263,"endColumn":48,"fix":{"range":[8844,8853],"text":"resolve"}},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":263,"column":52,"nodeType":"CallExpression","messageId":"returnsValue","endLine":263,"endColumn":77,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[8857,8882],"text":"{setTimeout(resolve, 1000)}"},"desc":"Wrap the expression in `{}`."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":268,"column":1,"nodeType":null,"messageId":"delete","endLine":268,"endColumn":7,"fix":{"range":[9049,9055],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎········spinnerManager.withSpinner('test',·null·as·any)⏎······).rejects.toThrow('Promise·is·required·and·must·be·a·valid·Promise'` with `spinnerManager.withSpinner('test',·null·as·any)).rejects.toThrow(⏎········'Promise·is·required·and·must·be·a·valid·Promise'⏎······`","line":273,"column":20,"nodeType":null,"messageId":"replace","endLine":275,"endColumn":74,"fix":{"range":[9198,9328],"text":"spinnerManager.withSpinner('test', null as any)).rejects.toThrow(\n        'Promise is required and must be a valid Promise'\n      "}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Promise<unknown>`.","line":274,"column":44,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":274,"endColumn":55},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎········`","line":315,"column":40,"nodeType":null,"messageId":"insert","endLine":315,"endColumn":40,"fix":{"range":[10638,10638],"text":"\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":316,"column":1,"nodeType":null,"messageId":"insert","endLine":316,"endColumn":1,"fix":{"range":[10664,10664],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `})` with `··})⏎······`","line":317,"column":7,"nodeType":null,"messageId":"replace","endLine":317,"endColumn":9,"fix":{"range":[10704,10706],"text":"  })\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎········`","line":318,"column":40,"nodeType":null,"messageId":"insert","endLine":318,"endColumn":40,"fix":{"range":[10748,10748],"text":"\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":319,"column":1,"nodeType":null,"messageId":"insert","endLine":319,"endColumn":1,"fix":{"range":[10774,10774],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `})` with `··})⏎······`","line":320,"column":7,"nodeType":null,"messageId":"replace","endLine":320,"endColumn":9,"fix":{"range":[10815,10817],"text":"  })\n      "}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ text: string; action: () => Promise<any>; successText?: string; failText?: string; timeout?: number; skipOnError?: boolean; }[]`.","line":358,"column":45,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":358,"endColumn":56},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Steps·must·be·a·non-empty·array'` with `⏎········'Steps·must·be·a·non-empty·array'⏎······`","line":358,"column":75,"nodeType":null,"messageId":"replace","endLine":358,"endColumn":108,"fix":{"range":[12301,12334],"text":"\n        'Steps must be a non-empty array'\n      "}},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":433,"column":27,"nodeType":"CallExpression","messageId":"unexpected","endLine":433,"endColumn":48},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":433,"column":27,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":433,"endColumn":48},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":441,"column":1,"nodeType":null,"messageId":"delete","endLine":441,"endColumn":7,"fix":{"range":[14990,14996],"text":""}},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":444,"column":7,"nodeType":"CallExpression","messageId":"unexpected","endLine":444,"endColumn":28},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":457,"column":4,"nodeType":null,"messageId":"insert","endLine":457,"endColumn":4,"fix":{"range":[15756,15756],"text":"\n"}}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":23,"fixableWarningCount":1,"source":"/**\n * Unit tests for SpinnerManager\n * Tests comprehensive error handling, validation, and lifecycle management\n */\n\nimport ora from 'ora';\nimport { SpinnerManager, SpinnerError } from '../spinner';\n\n// Mock ora\njest.mock('ora');\n\ndescribe('SpinnerManager', () => {\n  let spinnerManager: SpinnerManager;\n  let mockSpinner: any;\n  let consoleSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    mockSpinner = {\n      start: jest.fn().mockReturnThis(),\n      stop: jest.fn().mockReturnThis(),\n      succeed: jest.fn().mockReturnThis(),\n      fail: jest.fn().mockReturnThis(),\n      warn: jest.fn().mockReturnThis(),\n      info: jest.fn().mockReturnThis(),\n      clear: jest.fn().mockReturnThis(),\n      render: jest.fn().mockReturnThis(),\n      text: 'test text',\n      color: 'cyan',\n      isSpinning: false,\n    };\n\n    (ora as jest.Mock).mockReturnValue(mockSpinner);\n    consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n    spinnerManager = new SpinnerManager();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    consoleSpy.mockRestore();\n    if (spinnerManager && !spinnerManager['destroyed']) {\n      spinnerManager.destroy();\n    }\n  });\n\n  describe('SpinnerError', () => {\n    it('should create a SpinnerError with message and code', () => {\n      const error = new SpinnerError('Test message', 'TEST_CODE');\n      expect(error.message).toBe('Test message');\n      expect(error.code).toBe('TEST_CODE');\n      expect(error.name).toBe('SpinnerError');\n    });\n  });\n\n  describe('validation', () => {\n    it('should throw error for non-string text', () => {\n      expect(() => spinnerManager.start(123 as any)).toThrow(SpinnerError);\n      expect(() => spinnerManager.start(123 as any)).toThrow('Text must be a string');\n    });\n\n    it('should throw error for empty text', () => {\n      expect(() => spinnerManager.start('')).toThrow(SpinnerError);\n      expect(() => spinnerManager.start('')).toThrow('Text cannot be empty');\n    });\n\n    it('should truncate text that is too long', () => {\n      const longText = 'a'.repeat(250);\n      spinnerManager.start(longText);\n      \n      expect(ora).toHaveBeenCalledWith({\n        text: 'a'.repeat(197) + '...',\n        color: 'cyan',\n        spinner: 'dots',\n        hideCursor: true,\n      });\n    });\n\n    it('should trim whitespace from text', () => {\n      spinnerManager.start('  test text  ');\n      \n      expect(ora).toHaveBeenCalledWith({\n        text: 'test text',\n        color: 'cyan',\n        spinner: 'dots',\n        hideCursor: true,\n      });\n    });\n\n    it('should throw error when accessing destroyed spinner', () => {\n      spinnerManager.destroy();\n      expect(() => spinnerManager.start('test')).toThrow(SpinnerError);\n      expect(() => spinnerManager.start('test')).toThrow('SpinnerManager has been destroyed');\n    });\n  });\n\n  describe('start', () => {\n    it('should create and start a spinner with valid text', () => {\n      spinnerManager.start('Loading...');\n\n      expect(ora).toHaveBeenCalledWith({\n        text: 'Loading...',\n        color: 'cyan',\n        spinner: 'dots',\n        hideCursor: true,\n      });\n      expect(mockSpinner.start).toHaveBeenCalled();\n      expect(spinnerManager.isActive()).toBe(true);\n    });\n\n    it('should stop existing spinner before starting new one', () => {\n      spinnerManager.start('First spinner');\n      spinnerManager.start('Second spinner');\n\n      expect(mockSpinner.stop).toHaveBeenCalled();\n      expect(ora).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle ora creation failure', () => {\n      (ora as jest.Mock).mockReturnValue(null);\n      \n      expect(() => spinnerManager.start('test')).toThrow(SpinnerError);\n      expect(() => spinnerManager.start('test')).toThrow('Failed to create spinner instance');\n    });\n\n    it('should handle ora throwing error', () => {\n      (ora as jest.Mock).mockImplementation(() => {\n        throw new Error('Ora error');\n      });\n      \n      expect(() => spinnerManager.start('test')).toThrow(SpinnerError);\n      expect(() => spinnerManager.start('test')).toThrow('Failed to create spinner instance');\n    });\n  });\n\n  describe('update', () => {\n    it('should update spinner text when active', () => {\n      spinnerManager.start('Initial text');\n      spinnerManager.update('Updated text');\n\n      expect(mockSpinner.text).toBe('Updated text');\n    });\n\n    it('should throw error if no spinner exists', () => {\n      expect(() => spinnerManager.update('test')).toThrow(SpinnerError);\n      expect(() => spinnerManager.update('test')).toThrow('No active spinner to update');\n    });\n\n    it('should throw error if spinner not running', () => {\n      spinnerManager.start('test');\n      spinnerManager['isSpinning'] = false; // Simulate stopped state\n      \n      expect(() => spinnerManager.update('new text')).toThrow(SpinnerError);\n      expect(() => spinnerManager.update('new text')).toThrow('Spinner is not currently running');\n    });\n\n    it('should handle update errors gracefully', () => {\n      spinnerManager.start('test');\n      \n      // The current implementation doesn't throw on text assignment errors\n      // because it uses safeOperation wrapper that logs and continues\n      expect(() => spinnerManager.update('new text')).not.toThrow();\n    });\n  });\n\n  describe('stop methods', () => {\n    beforeEach(() => {\n      spinnerManager.start('test');\n    });\n\n    it('should call succeed with custom text', () => {\n      spinnerManager.succeed('Success message');\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('Success message');\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should call succeed with existing text if no text provided', () => {\n      spinnerManager.succeed();\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('test text');\n    });\n\n    it('should call fail with custom text', () => {\n      spinnerManager.fail('Error message');\n      expect(mockSpinner.fail).toHaveBeenCalledWith('Error message');\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should call warn with custom text', () => {\n      spinnerManager.warn('Warning message');\n      expect(mockSpinner.warn).toHaveBeenCalledWith('Warning message');\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should call info with custom text', () => {\n      spinnerManager.info('Info message');\n      expect(mockSpinner.info).toHaveBeenCalledWith('Info message');\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should call stop without text', () => {\n      spinnerManager.stop();\n      expect(mockSpinner.stop).toHaveBeenCalled();\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should handle stop errors gracefully', () => {\n      mockSpinner.succeed.mockImplementation(() => {\n        throw new Error('Stop error');\n      });\n\n      spinnerManager.succeed('test');\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Spinner operation failed'));\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should silently ignore stop when no spinner exists', () => {\n      const newManager = new SpinnerManager();\n      expect(() => newManager.stop()).not.toThrow();\n    });\n\n    it('should warn when stopping destroyed spinner', () => {\n      spinnerManager.destroy();\n      spinnerManager['stopSpinner']('stop');\n      expect(consoleSpy).toHaveBeenCalledWith('Attempted to stop destroyed spinner');\n    });\n  });\n\n  describe('withSpinner', () => {\n    it('should execute promise with spinner for success', async () => {\n      const testPromise = Promise.resolve('success result');\n\n      const result = await spinnerManager.withSpinner('Processing...', testPromise);\n\n      expect(ora).toHaveBeenCalledWith({\n        text: 'Processing...',\n        color: 'cyan',\n        spinner: 'dots',\n        hideCursor: true,\n      });\n      expect(mockSpinner.start).toHaveBeenCalled();\n      expect(mockSpinner.succeed).toHaveBeenCalled();\n      expect(result).toBe('success result');\n    });\n\n    it('should handle promise rejection', async () => {\n      const testError = new Error('Test error');\n      const testPromise = Promise.reject(testError);\n\n      await expect(spinnerManager.withSpinner('Processing...', testPromise)).rejects.toThrow('Test error');\n      expect(mockSpinner.fail).toHaveBeenCalledWith(expect.stringContaining('Failed: Processing...'));\n    });\n\n    it('should use custom success and fail text', async () => {\n      const testPromise = Promise.resolve('result');\n\n      await spinnerManager.withSpinner('Processing...', testPromise, {\n        successText: 'Custom success',\n        failText: 'Custom fail',\n      });\n\n      expect(mockSpinner.succeed).toHaveBeenCalledWith('Custom success');\n    });\n\n    it('should handle timeout', async () => {\n      const slowPromise = new Promise((resolve) => setTimeout(resolve, 1000));\n\n      await expect(\n        spinnerManager.withSpinner('Processing...', slowPromise, { timeout: 100 })\n      ).rejects.toThrow('Operation timed out after 100ms');\n      \n      expect(mockSpinner.fail).toHaveBeenCalled();\n    }, 500);\n\n    it('should validate promise parameter', async () => {\n      await expect(\n        spinnerManager.withSpinner('test', null as any)\n      ).rejects.toThrow('Promise is required and must be a valid Promise');\n    });\n\n    it('should clear timeout on success', async () => {\n      const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');\n      const testPromise = Promise.resolve('result');\n\n      await spinnerManager.withSpinner('Processing...', testPromise, { timeout: 1000 });\n\n      expect(clearTimeoutSpy).toHaveBeenCalled();\n      clearTimeoutSpy.mockRestore();\n    });\n  });\n\n  describe('withSteps', () => {\n    it('should execute steps with progress', async () => {\n      const step1 = jest.fn().mockResolvedValue('result1');\n      const step2 = jest.fn().mockResolvedValue('result2');\n\n      const steps = [\n        { text: 'Step 1', action: step1 },\n        { text: 'Step 2', action: step2 },\n      ];\n\n      const { results, errors } = await spinnerManager.withSteps(steps);\n\n      expect(step1).toHaveBeenCalled();\n      expect(step2).toHaveBeenCalled();\n      expect(results).toEqual(['result1', 'result2']);\n      expect(errors).toEqual([]);\n    });\n\n    it('should show progress indicators', async () => {\n      const steps = [\n        { text: 'First step', action: jest.fn().mockResolvedValue('r1') },\n        { text: 'Second step', action: jest.fn().mockResolvedValue('r2') },\n      ];\n\n      await spinnerManager.withSteps(steps, { showProgress: true });\n\n      expect(ora).toHaveBeenCalledWith(expect.objectContaining({\n        text: '[1/2] First step',\n      }));\n      expect(ora).toHaveBeenCalledWith(expect.objectContaining({\n        text: '[2/2] Second step',\n      }));\n    });\n\n    it('should handle step errors with stopOnError=false', async () => {\n      const step1 = jest.fn().mockResolvedValue('result1');\n      const step2 = jest.fn().mockRejectedValue(new Error('Step 2 failed'));\n      const step3 = jest.fn().mockResolvedValue('result3');\n\n      const steps = [\n        { text: 'Step 1', action: step1 },\n        { text: 'Step 2', action: step2 },\n        { text: 'Step 3', action: step3 },\n      ];\n\n      const { results, errors } = await spinnerManager.withSteps(steps, { stopOnError: false });\n\n      expect(results).toEqual(['result1', 'result3']);\n      expect(errors).toHaveLength(1);\n      expect(errors[0].message).toBe('Step 2 failed');\n    });\n\n    it('should stop on error by default', async () => {\n      const step1 = jest.fn().mockResolvedValue('result1');\n      const step2 = jest.fn().mockRejectedValue(new Error('Step 2 failed'));\n      const step3 = jest.fn().mockResolvedValue('result3');\n\n      const steps = [\n        { text: 'Step 1', action: step1 },\n        { text: 'Step 2', action: step2 },\n        { text: 'Step 3', action: step3 },\n      ];\n\n      await expect(spinnerManager.withSteps(steps)).rejects.toThrow('Step 2 failed');\n      expect(step3).not.toHaveBeenCalled();\n    });\n\n    it('should validate steps parameter', async () => {\n      await expect(spinnerManager.withSteps([])).rejects.toThrow('Steps must be a non-empty array');\n      await expect(spinnerManager.withSteps(null as any)).rejects.toThrow('Steps must be a non-empty array');\n    });\n\n    it('should handle invalid step', async () => {\n      const steps = [\n        { text: 'Valid step', action: jest.fn().mockResolvedValue('result') },\n        { text: 'Invalid step', action: null as any },\n      ];\n\n      await expect(spinnerManager.withSteps(steps)).rejects.toThrow('Invalid step at index 1');\n    });\n\n    it('should skip error step if skipOnError=true', async () => {\n      const step1 = jest.fn().mockResolvedValue('result1');\n      const step2 = jest.fn().mockRejectedValue(new Error('Step 2 failed'));\n      const step3 = jest.fn().mockResolvedValue('result3');\n\n      const steps = [\n        { text: 'Step 1', action: step1 },\n        { text: 'Step 2', action: step2, skipOnError: true },\n        { text: 'Step 3', action: step3 },\n      ];\n\n      const { results, errors } = await spinnerManager.withSteps(steps);\n\n      expect(results).toEqual(['result1', 'result3']);\n      expect(errors).toHaveLength(1);\n    });\n  });\n\n  describe('state management', () => {\n    it('should track active state correctly', () => {\n      expect(spinnerManager.isActive()).toBe(false);\n\n      spinnerManager.start('test');\n      expect(spinnerManager.isActive()).toBe(true);\n\n      spinnerManager.stop();\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n\n    it('should return false for active when destroyed', () => {\n      spinnerManager.start('test');\n      expect(spinnerManager.isActive()).toBe(true);\n\n      spinnerManager.destroy();\n      expect(spinnerManager.isActive()).toBe(false);\n    });\n  });\n\n  describe('destroy and cleanup', () => {\n    it('should destroy spinner and prevent further use', () => {\n      spinnerManager.start('test');\n      spinnerManager.destroy();\n\n      expect(spinnerManager.isActive()).toBe(false);\n      expect(() => spinnerManager.start('new')).toThrow('SpinnerManager has been destroyed');\n    });\n\n    it('should handle destroy when no spinner exists', () => {\n      expect(() => spinnerManager.destroy()).not.toThrow();\n    });\n\n    it('should handle spinner.stop error during force cleanup', () => {\n      spinnerManager.start('test');\n      mockSpinner.stop.mockImplementation(() => {\n        throw new Error('Stop error');\n      });\n\n      expect(() => spinnerManager.destroy()).not.toThrow();\n    });\n  });\n\n  describe('singleton instance', () => {\n    it('should export a singleton spinner instance', () => {\n      const { spinner } = require('../spinner');\n      expect(spinner).toBeInstanceOf(SpinnerManager);\n    });\n  });\n\n  describe('process cleanup', () => {\n    it('should set up process event listeners', () => {\n      const processOnSpy = jest.spyOn(process, 'on');\n      \n      // Re-require to trigger the process listeners setup\n      jest.resetModules();\n      require('../spinner');\n\n      expect(processOnSpy).toHaveBeenCalledWith('exit', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('SIGINT', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('SIGTERM', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('SIGUSR1', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('SIGUSR2', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('uncaughtException', expect.any(Function));\n      expect(processOnSpy).toHaveBeenCalledWith('unhandledRejection', expect.any(Function));\n\n      processOnSpy.mockRestore();\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/board-formatter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatStatus' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[918,920],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":81,"column":35,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":81,"endColumn":38},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatTaskCard'.","line":96,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":96,"endColumn":25},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatBoardList'.","line":132,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":132,"endColumn":18},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":137,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":147,"endColumn":6},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":143,"column":9,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":145,"endColumn":10},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateBoardStats'.","line":155,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":155,"endColumn":30},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":168,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":187,"endColumn":6},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":172,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":186,"endColumn":8},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":175,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":175,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[4246,4248],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":183,"column":13,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":183,"endColumn":33},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatBoardStats'.","line":195,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":195,"endColumn":27},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":208,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":211,"endColumn":8},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateColumnWidths'.","line":222,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":222,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any[]` typed value.","line":227,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":227,"endColumn":63},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'exportBoard'.","line":233,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":233,"endColumn":14},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":242,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":256,"endColumn":6},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":243,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":255,"endColumn":8},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6350,6352],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":250,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":250,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6381,6383],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":251,"column":25,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":251,"endColumn":27,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6412,6414],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":252,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":252,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6440,6442],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import chalk from 'chalk';\nimport Table from 'cli-table3';\nimport {\n  formatTaskListItem,\n  formatBoardColumn,\n  formatStatus,\n  formatPercentage,\n  truncate,\n} from './formatter';\n\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority?: string;\n  assignee?: string;\n  due_date?: string;\n  tags?: string[];\n}\n\nexport interface Column {\n  id: string;\n  name: string;\n  tasks: Task[];\n  order: number;\n}\n\nexport interface Board {\n  id: string;\n  name: string;\n  description?: string;\n  columns: Column[];\n}\n\n/**\n * Format board output for CLI display\n */\nexport class BoardFormatter {\n  /**\n   * Format a complete board view\n   */\n  formatBoard(\n    board: Board,\n    options?: {\n      maxWidth?: number;\n      showDescription?: boolean;\n      showStats?: boolean;\n    }\n  ): string {\n    const { maxWidth = 120, showDescription = true, showStats = true } = options || {};\n    const output: string[] = [];\n\n    // Board header\n    output.push(chalk.bold.cyan(`\\n📋 ${board.name}\\n`));\n\n    if (showDescription && board.description) {\n      output.push(chalk.gray(board.description));\n      output.push('');\n    }\n\n    // Board stats\n    if (showStats) {\n      const stats = this.calculateBoardStats(board);\n      output.push(this.formatBoardStats(stats));\n      output.push('');\n    }\n\n    // Create table for columns\n    const table = new Table({\n      head: board.columns.map(col => formatBoardColumn(col.name, col.tasks.length)),\n      style: { head: ['cyan'] },\n      colWidths: this.calculateColumnWidths(board.columns.length, maxWidth),\n      wordWrap: true,\n    });\n\n    // Find max tasks in any column\n    const maxTasks = Math.max(...board.columns.map(col => col.tasks.length));\n\n    // Add rows\n    for (let i = 0; i < maxTasks; i++) {\n      const row = board.columns.map(col => {\n        const task = col.tasks[i];\n        return task ? this.formatTaskCard(task) : '';\n      });\n      table.push(row);\n    }\n\n    output.push(table.toString());\n    return output.join('\\n');\n  }\n\n  /**\n   * Format a single task card for board view\n   */\n  private formatTaskCard(task: Task): string {\n    const lines: string[] = [];\n\n    // Task ID and title\n    lines.push(chalk.bold(`[${task.id}]`));\n    lines.push(truncate(task.title, 30));\n\n    // Priority and status\n    if (task.priority) {\n      lines.push(`Priority: ${task.priority}`);\n    }\n\n    // Assignee\n    if (task.assignee) {\n      lines.push(chalk.cyan(`@${task.assignee}`));\n    }\n\n    // Due date\n    if (task.due_date) {\n      const dueDate = new Date(task.due_date);\n      const isOverdue = dueDate < new Date();\n      const dateStr = dueDate.toLocaleDateString();\n      lines.push(isOverdue ? chalk.red(`⏰ ${dateStr}`) : chalk.gray(`📅 ${dateStr}`));\n    }\n\n    // Tags\n    if (task.tags && task.tags.length > 0) {\n      lines.push(task.tags.map(tag => chalk.magenta(`#${tag}`)).join(' '));\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Format board as a simple list view\n   */\n  formatBoardList(board: Board): string {\n    const output: string[] = [];\n\n    output.push(chalk.bold.cyan(`\\n📋 ${board.name}\\n`));\n\n    for (const column of board.columns) {\n      output.push(chalk.bold.underline(`\\n${column.name} (${column.tasks.length})`));\n\n      if (column.tasks.length === 0) {\n        output.push(chalk.gray('  No tasks'));\n      } else {\n        for (const task of column.tasks) {\n          output.push(`  ${formatTaskListItem(task)}`);\n        }\n      }\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate board statistics\n   */\n  private calculateBoardStats(board: Board): {\n    totalTasks: number;\n    tasksByColumn: Map<string, number>;\n    tasksByPriority: Map<string, number>;\n    overdueTasks: number;\n  } {\n    const stats = {\n      totalTasks: 0,\n      tasksByColumn: new Map<string, number>(),\n      tasksByPriority: new Map<string, number>(),\n      overdueTasks: 0,\n    };\n\n    for (const column of board.columns) {\n      stats.tasksByColumn.set(column.name, column.tasks.length);\n      stats.totalTasks += column.tasks.length;\n\n      for (const task of column.tasks) {\n        // Count by priority\n        if (task.priority) {\n          const count = stats.tasksByPriority.get(task.priority) || 0;\n          stats.tasksByPriority.set(task.priority, count + 1);\n        }\n\n        // Count overdue\n        if (task.due_date) {\n          const dueDate = new Date(task.due_date);\n          if (dueDate < new Date()) {\n            stats.overdueTasks++;\n          }\n        }\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Format board statistics\n   */\n  private formatBoardStats(stats: ReturnType<BoardFormatter['calculateBoardStats']>): string {\n    const lines: string[] = [];\n\n    lines.push(chalk.gray('─'.repeat(40)));\n    lines.push(chalk.bold('Board Statistics:'));\n    lines.push(`  Total Tasks: ${stats.totalTasks}`);\n\n    if (stats.overdueTasks > 0) {\n      lines.push(chalk.red(`  Overdue Tasks: ${stats.overdueTasks}`));\n    }\n\n    if (stats.tasksByPriority.size > 0) {\n      lines.push('  By Priority:');\n      for (const [priority, count] of stats.tasksByPriority) {\n        const percentage = formatPercentage(count, stats.totalTasks);\n        lines.push(`    ${priority}: ${count} (${percentage})`);\n      }\n    }\n\n    lines.push(chalk.gray('─'.repeat(40)));\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Calculate column widths for table display\n   */\n  private calculateColumnWidths(columnCount: number, maxWidth: number): number[] {\n    const borderWidth = (columnCount + 1) * 3; // Account for table borders\n    const availableWidth = maxWidth - borderWidth;\n    const columnWidth = Math.floor(availableWidth / columnCount);\n\n    return Array(columnCount).fill(Math.max(columnWidth, 20));\n  }\n\n  /**\n   * Format board for export (CSV, JSON, etc.)\n   */\n  exportBoard(board: Board, format: 'csv' | 'json' = 'json'): string {\n    if (format === 'json') {\n      return JSON.stringify(board, null, 2);\n    }\n\n    // CSV format\n    const lines: string[] = [];\n    lines.push('Column,Task ID,Title,Status,Priority,Assignee,Due Date,Tags');\n\n    for (const column of board.columns) {\n      for (const task of column.tasks) {\n        const row = [\n          column.name,\n          task.id,\n          `\"${task.title.replace(/\"/g, '\"\"')}\"`,\n          task.status,\n          task.priority || '',\n          task.assignee || '',\n          task.due_date || '',\n          (task.tags || []).join(';'),\n        ];\n        lines.push(row.join(','));\n      }\n    }\n\n    return lines.join('\\n');\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/command-injection-prevention.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":4,"column":3,"nodeType":null,"messageId":"delete","endLine":4,"endColumn":4,"fix":{"range":[101,102],"text":""}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Import \"SpawnOptions\" is only used as types.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"aImportIsOnlyTypes","endLine":9,"endColumn":53,"fix":{"range":[283,311],"text":"import type { SpawnOptions } from 'child_process';\nimport { spawn"}},{"ruleId":"max-classes-per-file","severity":2,"message":"File has too many classes (2). Maximum allowed is 1.","line":9,"column":1,"nodeType":"Program","messageId":"maximumExceeded","endLine":564,"endColumn":2},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":46,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":46,"endColumn":51,"fix":{"range":[1174,1174],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":47,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":47,"endColumn":48,"fix":{"range":[1225,1225],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":48,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":48,"endColumn":49,"fix":{"range":[1273,1273],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":49,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":49,"endColumn":41,"fix":{"range":[1322,1322],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":50,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":50,"endColumn":47,"fix":{"range":[1363,1363],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'rmdir',·'del',·'format',` with `⏎······'rmdir',⏎······'del',⏎······'format',⏎·····`","line":55,"column":12,"nodeType":null,"messageId":"replace","endLine":55,"endColumn":38,"fix":{"range":[1526,1552],"text":"\n      'rmdir',\n      'del',\n      'format',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'curl',·'nc',·'netcat',` with `⏎······'curl',⏎······'nc',⏎······'netcat',⏎·····`","line":56,"column":14,"nodeType":null,"messageId":"replace","endLine":56,"endColumn":38,"fix":{"range":[1575,1599],"text":"\n      'curl',\n      'nc',\n      'netcat',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'scp',·'ftp',` with `⏎······'scp',⏎······'ftp',⏎·····`","line":57,"column":13,"nodeType":null,"messageId":"replace","endLine":57,"endColumn":27,"fix":{"range":[1622,1636],"text":"\n      'scp',\n      'ftp',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'python3',·'node',·'ruby',·'perl',` with `⏎······'python3',⏎······'node',⏎······'ruby',⏎······'perl',⏎·····`","line":58,"column":16,"nodeType":null,"messageId":"replace","endLine":58,"endColumn":51,"fix":{"range":[1660,1695],"text":"\n      'python3',\n      'node',\n      'ruby',\n      'perl',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'bash',·'zsh',·'fish',·'csh',` with `⏎······'bash',⏎······'zsh',⏎······'fish',⏎······'csh',⏎·····`","line":59,"column":12,"nodeType":null,"messageId":"replace","endLine":59,"endColumn":42,"fix":{"range":[1714,1744],"text":"\n      'bash',\n      'zsh',\n      'fish',\n      'csh',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'powershell',` with `⏎······'powershell',⏎·····`","line":60,"column":13,"nodeType":null,"messageId":"replace","endLine":60,"endColumn":27,"fix":{"range":[1765,1779],"text":"\n      'powershell',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'exec',·'source',·'sudo',` with `⏎······'exec',⏎······'source',⏎······'sudo',⏎·····`","line":61,"column":14,"nodeType":null,"messageId":"replace","endLine":61,"endColumn":40,"fix":{"range":[1801,1827],"text":"\n      'exec',\n      'source',\n      'sudo',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'chown',·'mount',` with `⏎······'chown',⏎······'mount',⏎·····`","line":62,"column":15,"nodeType":null,"messageId":"replace","endLine":62,"endColumn":33,"fix":{"range":[1848,1866],"text":"\n      'chown',\n      'mount',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'ufw',` with `⏎······'ufw',⏎·····`","line":63,"column":18,"nodeType":null,"messageId":"replace","endLine":63,"endColumn":25,"fix":{"range":[1894,1901],"text":"\n      'ufw',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'service',` with `⏎······'service',⏎·····`","line":64,"column":19,"nodeType":null,"messageId":"replace","endLine":64,"endColumn":30,"fix":{"range":[1933,1944],"text":"\n      'service',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'shutdown',·'halt',` with `⏎······'shutdown',⏎······'halt',⏎·····`","line":65,"column":16,"nodeType":null,"messageId":"replace","endLine":65,"endColumn":36,"fix":{"range":[1973,1993],"text":"\n      'shutdown',\n      'halt',\n     "}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\>.","line":73,"column":12,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":73,"endColumn":13,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2188,2189],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2188,2188],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00.","line":81,"column":7,"nodeType":"Literal","messageId":"unexpected","endLine":81,"endColumn":13},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":83,"column":13,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":83,"endColumn":14,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2384,2385],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2384,2384],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'printf',·'cat',·'head',` with `⏎······'printf',⏎······'cat',⏎······'head',⏎·····`","line":98,"column":14,"nodeType":null,"messageId":"replace","endLine":98,"endColumn":39,"fix":{"range":[2794,2819],"text":"\n      'printf',\n      'cat',\n      'head',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'dir',·'pwd',·'whoami',` with `⏎······'dir',⏎······'pwd',⏎······'whoami',⏎·····`","line":99,"column":12,"nodeType":null,"messageId":"replace","endLine":99,"endColumn":36,"fix":{"range":[2839,2863],"text":"\n      'dir',\n      'pwd',\n      'whoami',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'uptime',` with `⏎······'uptime',⏎·····`","line":100,"column":14,"nodeType":null,"messageId":"replace","endLine":100,"endColumn":24,"fix":{"range":[2883,2893],"text":"\n      'uptime',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'npm',·'yarn',` with `⏎······'npm',⏎······'yarn',⏎·····`","line":101,"column":13,"nodeType":null,"messageId":"replace","endLine":101,"endColumn":28,"fix":{"range":[2915,2930],"text":"\n      'npm',\n      'yarn',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'tsc',·'eslint',` with `⏎······'tsc',⏎······'eslint',⏎·····`","line":102,"column":14,"nodeType":null,"messageId":"replace","endLine":102,"endColumn":31,"fix":{"range":[2952,2969],"text":"\n      'tsc',\n      'eslint',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'find',·'sort',·'uniq',` with `⏎······'find',⏎······'sort',⏎······'uniq',⏎·····`","line":103,"column":14,"nodeType":null,"messageId":"replace","endLine":103,"endColumn":38,"fix":{"range":[2995,3019],"text":"\n      'find',\n      'sort',\n      'uniq',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `!options.allowedCommands·&&·!this.allowedCommands.has(sanitizedCommand.toLowerCase())` with `⏎······!options.allowedCommands·&&⏎······!this.allowedCommands.has(sanitizedCommand.toLowerCase())⏎····`","line":158,"column":16,"nodeType":null,"messageId":"replace","endLine":158,"endColumn":101,"fix":{"range":[4667,4752],"text":"\n      !options.allowedCommands &&\n      !this.allowedCommands.has(sanitizedCommand.toLowerCase())\n    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":263,"column":1,"nodeType":null,"messageId":"delete","endLine":263,"endColumn":5,"fix":{"range":[8074,8078],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":266,"column":1,"nodeType":null,"messageId":"delete","endLine":266,"endColumn":5,"fix":{"range":[8182,8186],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎········`Command·execution·blocked:·${validation.blockedPatterns.join(',·')}`⏎······` with ``Command·execution·blocked:·${validation.blockedPatterns.join(',·')}``","line":268,"column":23,"nodeType":null,"messageId":"replace","endLine":270,"endColumn":7,"fix":{"range":[8237,8322],"text":"`Command execution blocked: ${validation.blockedPatterns.join(', ')}`"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8404,8528],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``[CommandInjectionPrevention]·Executing:·${validation.sanitizedCommand}·${validation.sanitizedArgs.join('·')}`` with `⏎········`[CommandInjectionPrevention]·Executing:·${validation.sanitizedCommand}·${validation.sanitizedArgs.join('·')}`⏎······`","line":275,"column":19,"nodeType":null,"messageId":"replace","endLine":275,"endColumn":129,"fix":{"range":[8416,8526],"text":"\n        `[CommandInjectionPrevention] Executing: ${validation.sanitizedCommand} ${validation.sanitizedArgs.join(' ')}`\n      "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8581,8670],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":284,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":284,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[8849,8851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":297,"column":1,"nodeType":null,"messageId":"delete","endLine":297,"endColumn":7,"fix":{"range":[9314,9320],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(data)` with `data`","line":301,"column":32,"nodeType":null,"messageId":"replace","endLine":301,"endColumn":38,"fix":{"range":[9399,9405],"text":"data"}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":302,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":302,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toString on an `any` value.","line":302,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":302,"endColumn":32},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(data)` with `data`","line":305,"column":32,"nodeType":null,"messageId":"replace","endLine":305,"endColumn":38,"fix":{"range":[9488,9494],"text":"data"}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":306,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":306,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .toString on an `any` value.","line":306,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":306,"endColumn":32},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(code)` with `code`","line":309,"column":25,"nodeType":null,"messageId":"replace","endLine":309,"endColumn":31,"fix":{"range":[9570,9576],"text":"code"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `········`","line":311,"column":1,"nodeType":null,"messageId":"delete","endLine":311,"endColumn":9,"fix":{"range":[9631,9639],"text":""}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":316,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":316,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9780,9782],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(error)` with `error`","line":323,"column":25,"nodeType":null,"messageId":"replace","endLine":323,"endColumn":32,"fix":{"range":[9943,9950],"text":"error"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'duration' is assigned a value but never used.","line":324,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":324,"endColumn":23},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `········`","line":325,"column":1,"nodeType":null,"messageId":"delete","endLine":325,"endColumn":9,"fix":{"range":[10005,10013],"text":""}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'escapeShellArg'.","line":344,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":344,"endColumn":17},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·`","line":347,"column":33,"nodeType":null,"messageId":"delete","endLine":347,"endColumn":34,"fix":{"range":[10540,10541],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `···`","line":348,"column":31,"nodeType":null,"messageId":"delete","endLine":348,"endColumn":34,"fix":{"range":[10595,10598],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":349,"column":29,"nodeType":null,"messageId":"delete","endLine":349,"endColumn":33,"fix":{"range":[10648,10652],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":350,"column":28,"nodeType":null,"messageId":"delete","endLine":350,"endColumn":33,"fix":{"range":[10703,10708],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `·····`","line":351,"column":29,"nodeType":null,"messageId":"delete","endLine":351,"endColumn":34,"fix":{"range":[10757,10762],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":352,"column":29,"nodeType":null,"messageId":"delete","endLine":352,"endColumn":33,"fix":{"range":[10818,10822],"text":""}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":358,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":358,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":360,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":360,"endColumn":15},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":367,"column":1,"nodeType":null,"messageId":"delete","endLine":367,"endColumn":7,"fix":{"range":[11288,11294],"text":""}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":368,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":368,"endColumn":16},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":368,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","endLine":374,"endColumn":8,"fix":{"range":[11369,11519],"text":"this.safeExecute(baseCommand, args, {\n          ...options,\n          allowedFlags,\n          logExecution: true,\n        })"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'validateFilePath'.","line":416,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":416,"endColumn":19},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `filePath:·string,·allowedDirectories:·string[]·=·[]` with `⏎····filePath:·string,⏎····allowedDirectories:·string[]·=·[]⏎··`","line":416,"column":20,"nodeType":null,"messageId":"replace","endLine":416,"endColumn":71,"fix":{"range":[12365,12416],"text":"\n    filePath: string,\n    allowedDirectories: string[] = []\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `command:·string,·args:·string[]·=·[],·options:·CommandExecutionOptions·=·{})·=>⏎·` with `⏎··command:·string,⏎··args:·string[]·=·[],⏎··options:·CommandExecutionOptions·=·{}⏎)·=>`","line":471,"column":29,"nodeType":null,"messageId":"replace","endLine":472,"endColumn":2,"fix":{"range":[14005,14086],"text":"\n  command: string,\n  args: string[] = [],\n  options: CommandExecutionOptions = {}\n) =>"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":471,"column":106,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":471,"endColumn":108},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `command:·string,·args:·string[]·=·[],·options:·CommandExecutionOptions·=·{})·=>⏎·` with `⏎··command:·string,⏎··args:·string[]·=·[],⏎··options:·CommandExecutionOptions·=·{}⏎)·=>`","line":474,"column":33,"nodeType":null,"messageId":"replace","endLine":475,"endColumn":2,"fix":{"range":[14184,14265],"text":"\n  command: string,\n  args: string[] = [],\n  options: CommandExecutionOptions = {}\n) =>"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":474,"column":110,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":474,"endColumn":112},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":477,"column":85,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":477,"endColumn":87},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":480,"column":87,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":480,"endColumn":89},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `dirPath:·string·=·'.',·allowedDirectories:·string[]·=·[]` with `⏎····dirPath:·string·=·'.',⏎····allowedDirectories:·string[]·=·[]⏎··`","line":511,"column":34,"nodeType":null,"messageId":"replace","endLine":511,"endColumn":90,"fix":{"range":[15451,15507],"text":"\n    dirPath: string = '.',\n    allowedDirectories: string[] = []\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'log',·'diff',·'branch',·'remote',` with `⏎······'log',⏎······'diff',⏎······'branch',⏎······'remote',⏎·····`","line":534,"column":16,"nodeType":null,"messageId":"replace","endLine":534,"endColumn":51,"fix":{"range":[16247,16282],"text":"\n      'log',\n      'diff',\n      'branch',\n      'remote',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'commit',·'push',·'pull',·'fetch',` with `⏎······'commit',⏎······'push',⏎······'pull',⏎······'fetch',⏎·····`","line":535,"column":13,"nodeType":null,"messageId":"replace","endLine":535,"endColumn":48,"fix":{"range":[16305,16340],"text":"\n      'commit',\n      'push',\n      'pull',\n      'fetch',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'rebase',·'stash',·'tag',·'show',` with `⏎······'rebase',⏎······'stash',⏎······'tag',⏎······'show',⏎·····`","line":536,"column":15,"nodeType":null,"messageId":"replace","endLine":536,"endColumn":49,"fix":{"range":[16367,16401],"text":"\n      'rebase',\n      'stash',\n      'tag',\n      'show',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'update',·'list',·'outdated',` with `⏎······'update',⏎······'list',⏎······'outdated',⏎·····`","line":552,"column":17,"nodeType":null,"messageId":"replace","endLine":552,"endColumn":47,"fix":{"range":[16744,16774],"text":"\n      'update',\n      'list',\n      'outdated',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'start',·'test',·'build',` with `⏎······'start',⏎······'test',⏎······'build',⏎·····`","line":553,"column":13,"nodeType":null,"messageId":"replace","endLine":553,"endColumn":39,"fix":{"range":[16796,16822],"text":"\n      'start',\n      'test',\n      'build',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'search',·'view',` with `⏎······'search',⏎······'view',⏎·····`","line":554,"column":14,"nodeType":null,"messageId":"replace","endLine":554,"endColumn":32,"fix":{"range":[16847,16865],"text":"\n      'search',\n      'view',\n     "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":564,"column":2,"nodeType":null,"messageId":"insert","endLine":564,"endColumn":2,"fix":{"range":[17086,17086],"text":"\n"}}],"suppressedMessages":[],"errorCount":61,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":55,"fixableWarningCount":0,"source":"/**\n * Command Injection Prevention Module\n * Addresses TASK-120: Add command injection prevention\n * \n * This module provides comprehensive protection against command injection attacks\n * in CLI applications by sanitizing inputs and preventing execution of malicious commands.\n */\n\nimport { spawn, SpawnOptions } from 'child_process';\nimport path from 'path';\nimport { inputSanitizer } from './input-sanitizer';\n\nexport interface CommandExecutionOptions {\n  allowedCommands?: string[];\n  allowedFlags?: string[];\n  restrictToWorkingDir?: boolean;\n  timeout?: number;\n  env?: Record<string, string>;\n  validateArgs?: boolean;\n  logExecution?: boolean;\n}\n\nexport interface CommandValidationResult {\n  safe: boolean;\n  sanitizedCommand: string;\n  sanitizedArgs: string[];\n  warnings: string[];\n  blockedPatterns: string[];\n}\n\nexport interface ExecutionResult {\n  success: boolean;\n  stdout: string;\n  stderr: string;\n  exitCode: number;\n  duration: number;\n  command: string;\n  args: string[];\n}\n\n/**\n * Command injection prevention class with comprehensive security measures\n */\nexport class CommandInjectionPrevention {\n  private static instance: CommandInjectionPrevention;\n  private readonly dangerousCommands: Set<string>;\n  private readonly dangerousPatterns: RegExp[];\n  private readonly allowedCommands: Set<string>;\n  private readonly maxArgLength: number;\n  private readonly maxTotalArgsLength: number;\n\n  constructor() {\n    // Commands that should never be executed\n    this.dangerousCommands = new Set([\n      'rm', 'rmdir', 'del', 'format', 'fdisk',\n      'wget', 'curl', 'nc', 'netcat', 'telnet',\n      'ssh', 'scp', 'ftp', 'tftp',\n      'python', 'python3', 'node', 'ruby', 'perl', 'php',\n      'sh', 'bash', 'zsh', 'fish', 'csh', 'tcsh',\n      'cmd', 'powershell', 'pwsh',\n      'eval', 'exec', 'source', 'sudo', 'su',\n      'chmod', 'chown', 'mount', 'umount',\n      'iptables', 'ufw', 'firewalld',\n      'systemctl', 'service', 'launchctl',\n      'reboot', 'shutdown', 'halt', 'poweroff',\n    ]);\n\n    // Dangerous patterns that indicate injection attempts\n    this.dangerousPatterns = [\n      // Command chaining\n      /[;&|`]/,\n      // Process substitution\n      /<\\(|\\>\\(/,\n      // Command substitution\n      /\\$\\(/,\n      // Backticks\n      /`/,\n      // Redirection attempts\n      /[<>]+/,\n      // Null bytes\n      /\\x00/,\n      // Path traversal\n      /\\.\\.[\\/\\\\]/,\n      // Variable expansion\n      /\\$\\{[^}]*\\}/,\n      // Globbing attempts\n      /\\*|\\?|\\[.*\\]/,\n      // Script execution\n      /\\.(sh|bat|cmd|ps1|py|rb|pl|php)(\\s|$)/i,\n      // Network operations\n      /(wget|curl|nc|netcat)\\s+/i,\n      // Remote execution\n      /(ssh|scp|ftp|telnet)\\s+/i,\n    ];\n\n    // Safe commands that are allowed by default\n    this.allowedCommands = new Set([\n      'echo', 'printf', 'cat', 'head', 'tail',\n      'ls', 'dir', 'pwd', 'whoami', 'id',\n      'date', 'uptime', 'uname',\n      'git', 'npm', 'yarn', 'pnpm',\n      'node', 'tsc', 'eslint', 'prettier',\n      'grep', 'find', 'sort', 'uniq', 'wc',\n    ]);\n\n    this.maxArgLength = 1000;\n    this.maxTotalArgsLength = 10000;\n  }\n\n  static getInstance(): CommandInjectionPrevention {\n    if (!CommandInjectionPrevention.instance) {\n      CommandInjectionPrevention.instance = new CommandInjectionPrevention();\n    }\n    return CommandInjectionPrevention.instance;\n  }\n\n  /**\n   * Validate and sanitize a command before execution\n   */\n  validateCommand(\n    command: string,\n    args: string[] = [],\n    options: CommandExecutionOptions = {}\n  ): CommandValidationResult {\n    const warnings: string[] = [];\n    const blockedPatterns: string[] = [];\n    let safe = true;\n\n    // Sanitize command name\n    const commandSanitized = inputSanitizer.sanitizeText(command, {\n      allowHtml: false,\n      maxLength: 100,\n      stripControlChars: true,\n      preventInjection: true,\n      escapeSpecialChars: false,\n      allowedCharacters: /[\\w\\-_.]/,\n    });\n\n    if (commandSanitized.modified) {\n      warnings.push('Command was sanitized');\n      if (commandSanitized.warnings.length > 0) {\n        warnings.push(...commandSanitized.warnings);\n      }\n    }\n\n    const sanitizedCommand = commandSanitized.sanitized;\n\n    // Check if command is in dangerous list\n    if (this.dangerousCommands.has(sanitizedCommand.toLowerCase())) {\n      safe = false;\n      blockedPatterns.push(`Dangerous command: ${sanitizedCommand}`);\n    }\n\n    // Check if command is allowed (if allowlist is specified)\n    if (options.allowedCommands && !options.allowedCommands.includes(sanitizedCommand)) {\n      safe = false;\n      blockedPatterns.push(`Command not in allowlist: ${sanitizedCommand}`);\n    } else if (!options.allowedCommands && !this.allowedCommands.has(sanitizedCommand.toLowerCase())) {\n      // Default allowlist check\n      warnings.push(`Command not in default safe list: ${sanitizedCommand}`);\n    }\n\n    // Sanitize arguments\n    const sanitizedArgs: string[] = [];\n    let totalArgsLength = 0;\n\n    args.forEach((arg, index) => {\n      // Check individual arg length\n      if (arg.length > this.maxArgLength) {\n        safe = false;\n        blockedPatterns.push(`Argument ${index} exceeds maximum length (${this.maxArgLength})`);\n        return;\n      }\n\n      totalArgsLength += arg.length;\n\n      // Sanitize the argument\n      const argSanitized = inputSanitizer.sanitizeText(arg, {\n        allowHtml: false,\n        maxLength: this.maxArgLength,\n        stripControlChars: true,\n        preventInjection: true,\n        escapeSpecialChars: true,\n      });\n\n      if (argSanitized.modified) {\n        warnings.push(`Argument ${index} was sanitized`);\n      }\n\n      // Check for dangerous patterns in arguments\n      this.dangerousPatterns.forEach(pattern => {\n        if (pattern.test(arg)) {\n          safe = false;\n          blockedPatterns.push(`Dangerous pattern in argument ${index}: ${pattern.source}`);\n        }\n      });\n\n      // Validate flags if specified\n      if (options.allowedFlags && arg.startsWith('-')) {\n        const flag = arg.replace(/^-+/, '');\n        if (!options.allowedFlags.includes(flag)) {\n          safe = false;\n          blockedPatterns.push(`Flag not allowed: ${arg}`);\n        }\n      }\n\n      // Path traversal protection\n      if (arg.includes('../') || arg.includes('..\\\\')) {\n        safe = false;\n        blockedPatterns.push(`Path traversal attempt in argument ${index}`);\n      }\n\n      // Working directory restriction\n      if (options.restrictToWorkingDir && path.isAbsolute(arg)) {\n        const resolved = path.resolve(arg);\n        const cwd = process.cwd();\n        if (!resolved.startsWith(cwd)) {\n          safe = false;\n          blockedPatterns.push(`Argument ${index} points outside working directory`);\n        }\n      }\n\n      sanitizedArgs.push(argSanitized.sanitized);\n    });\n\n    // Check total arguments length\n    if (totalArgsLength > this.maxTotalArgsLength) {\n      safe = false;\n      blockedPatterns.push(`Total arguments length exceeds maximum (${this.maxTotalArgsLength})`);\n    }\n\n    // Additional security checks for the complete command\n    const fullCommand = `${sanitizedCommand} ${sanitizedArgs.join(' ')}`;\n    const suspiciousCheck = inputSanitizer.detectSuspiciousPatterns(fullCommand);\n    if (suspiciousCheck.suspicious) {\n      warnings.push(`Suspicious patterns detected: ${suspiciousCheck.patterns.join(', ')}`);\n      // Mark as unsafe if critical patterns are detected\n      const criticalPatterns = ['Script tag', 'JavaScript protocol', 'Remote script execution'];\n      if (suspiciousCheck.patterns.some(p => criticalPatterns.includes(p))) {\n        safe = false;\n        blockedPatterns.push(...suspiciousCheck.patterns);\n      }\n    }\n\n    return {\n      safe,\n      sanitizedCommand,\n      sanitizedArgs,\n      warnings,\n      blockedPatterns,\n    };\n  }\n\n  /**\n   * Safely execute a command with comprehensive protection\n   */\n  async safeExecute(\n    command: string,\n    args: string[] = [],\n    options: CommandExecutionOptions = {}\n  ): Promise<ExecutionResult> {\n    const startTime = Date.now();\n    \n    // Validate the command first\n    const validation = this.validateCommand(command, args, options);\n    \n    if (!validation.safe) {\n      throw new Error(\n        `Command execution blocked: ${validation.blockedPatterns.join(', ')}`\n      );\n    }\n\n    // Log execution if requested\n    if (options.logExecution) {\n      console.log(`[CommandInjectionPrevention] Executing: ${validation.sanitizedCommand} ${validation.sanitizedArgs.join(' ')}`);\n      if (validation.warnings.length > 0) {\n        console.warn(`[CommandInjectionPrevention] Warnings: ${validation.warnings.join(', ')}`);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      const spawnOptions: SpawnOptions = {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        timeout: options.timeout || 30000,\n        env: {\n          ...process.env,\n          ...options.env,\n          // Remove potentially dangerous environment variables\n          LD_PRELOAD: undefined,\n          LD_LIBRARY_PATH: undefined,\n          PATH: process.env.PATH, // Keep PATH but don't allow overriding\n        },\n        shell: false, // Never use shell to prevent injection\n      };\n\n      const child = spawn(validation.sanitizedCommand, validation.sanitizedArgs, spawnOptions);\n      \n      let stdout = '';\n      let stderr = '';\n\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      child.on('close', (code) => {\n        const duration = Date.now() - startTime;\n        \n        resolve({\n          success: code === 0,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n          exitCode: code || 0,\n          duration,\n          command: validation.sanitizedCommand,\n          args: validation.sanitizedArgs,\n        });\n      });\n\n      child.on('error', (error) => {\n        const duration = Date.now() - startTime;\n        \n        reject(new Error(`Command execution failed: ${error.message}`));\n      });\n\n      // Set up timeout handling\n      if (options.timeout) {\n        setTimeout(() => {\n          child.kill('SIGTERM');\n          setTimeout(() => {\n            child.kill('SIGKILL');\n          }, 5000);\n        }, options.timeout);\n      }\n    });\n  }\n\n  /**\n   * Escape shell arguments safely\n   */\n  escapeShellArg(arg: string): string {\n    // Replace all potentially dangerous characters\n    return arg\n      .replace(/'/g, \"'\\\"'\\\"'\")  // Escape single quotes\n      .replace(/\\\\/g, '\\\\\\\\')    // Escape backslashes\n      .replace(/\\$/g, '\\\\$')     // Escape dollar signs\n      .replace(/`/g, '\\\\`')      // Escape backticks\n      .replace(/!/g, '\\\\!')      // Escape exclamation marks\n      .replace(/\"/g, '\\\\\"');     // Escape double quotes\n  }\n\n  /**\n   * Create a safe command builder\n   */\n  createSafeCommand(baseCommand: string, allowedFlags: string[] = []) {\n    return {\n      addArg: (arg: string) => {\n        const validation = this.validateCommand(baseCommand, [arg], { allowedFlags });\n        if (!validation.safe) {\n          throw new Error(`Invalid argument: ${validation.blockedPatterns.join(', ')}`);\n        }\n        return validation.sanitizedArgs[0];\n      },\n      \n      execute: (args: string[], options: CommandExecutionOptions = {}) => {\n        return this.safeExecute(baseCommand, args, {\n          ...options,\n          allowedFlags,\n          logExecution: true,\n        });\n      },\n    };\n  }\n\n  /**\n   * Add custom command to allowed list\n   */\n  addAllowedCommand(command: string): void {\n    this.allowedCommands.add(command.toLowerCase());\n  }\n\n  /**\n   * Remove command from allowed list\n   */\n  removeAllowedCommand(command: string): void {\n    this.allowedCommands.delete(command.toLowerCase());\n  }\n\n  /**\n   * Check if a command is in the dangerous list\n   */\n  isDangerousCommand(command: string): boolean {\n    return this.dangerousCommands.has(command.toLowerCase());\n  }\n\n  /**\n   * Get list of allowed commands\n   */\n  getAllowedCommands(): string[] {\n    return Array.from(this.allowedCommands);\n  }\n\n  /**\n   * Get list of dangerous commands\n   */\n  getDangerousCommands(): string[] {\n    return Array.from(this.dangerousCommands);\n  }\n\n  /**\n   * Validate a file path for safe access\n   */\n  validateFilePath(filePath: string, allowedDirectories: string[] = []): {\n    safe: boolean;\n    normalizedPath: string;\n    warnings: string[];\n  } {\n    const warnings: string[] = [];\n    let safe = true;\n\n    // Sanitize the file path\n    const sanitized = inputSanitizer.sanitizeFilePath(filePath);\n    if (sanitized.modified) {\n      warnings.push('File path was sanitized');\n    }\n\n    const normalizedPath = path.normalize(sanitized.sanitized);\n\n    // Check for path traversal\n    if (normalizedPath.includes('../') || normalizedPath.includes('..\\\\')) {\n      safe = false;\n      warnings.push('Path traversal detected');\n    }\n\n    // Check if path is within allowed directories\n    if (allowedDirectories.length > 0) {\n      const resolved = path.resolve(normalizedPath);\n      const isInAllowedDir = allowedDirectories.some(dir => {\n        const allowedDir = path.resolve(dir);\n        return resolved.startsWith(allowedDir);\n      });\n\n      if (!isInAllowedDir) {\n        safe = false;\n        warnings.push('Path outside allowed directories');\n      }\n    }\n\n    // Check for dangerous file extensions\n    const dangerousExtensions = ['.sh', '.bat', '.cmd', '.ps1', '.py', '.rb', '.pl', '.php'];\n    const ext = path.extname(normalizedPath).toLowerCase();\n    if (dangerousExtensions.includes(ext)) {\n      warnings.push(`Potentially dangerous file extension: ${ext}`);\n    }\n\n    return {\n      safe,\n      normalizedPath,\n      warnings,\n    };\n  }\n}\n\n// Export singleton instance and utility functions\nexport const commandInjectionPrevention = CommandInjectionPrevention.getInstance();\n\n// Convenience functions\nexport const safeExecute = (command: string, args: string[] = [], options: CommandExecutionOptions = {}) =>\n  commandInjectionPrevention.safeExecute(command, args, options);\n\nexport const validateCommand = (command: string, args: string[] = [], options: CommandExecutionOptions = {}) =>\n  commandInjectionPrevention.validateCommand(command, args, options);\n\nexport const createSafeCommand = (baseCommand: string, allowedFlags: string[] = []) =>\n  commandInjectionPrevention.createSafeCommand(baseCommand, allowedFlags);\n\nexport const validateFilePath = (filePath: string, allowedDirectories: string[] = []) =>\n  commandInjectionPrevention.validateFilePath(filePath, allowedDirectories);\n\n/**\n * Safe wrapper for common CLI operations\n */\nexport class SafeCliOperations {\n  /**\n   * Safe file reading\n   */\n  static async safeFileRead(filePath: string, allowedDirectories: string[] = []): Promise<string> {\n    const pathValidation = validateFilePath(filePath, allowedDirectories);\n    if (!pathValidation.safe) {\n      throw new Error(`Unsafe file path: ${pathValidation.warnings.join(', ')}`);\n    }\n\n    const result = await safeExecute('cat', [pathValidation.normalizedPath], {\n      timeout: 5000,\n      restrictToWorkingDir: allowedDirectories.length === 0,\n    });\n\n    if (!result.success) {\n      throw new Error(`Failed to read file: ${result.stderr}`);\n    }\n\n    return result.stdout;\n  }\n\n  /**\n   * Safe directory listing\n   */\n  static async safeDirectoryList(dirPath: string = '.', allowedDirectories: string[] = []): Promise<string[]> {\n    const pathValidation = validateFilePath(dirPath, allowedDirectories);\n    if (!pathValidation.safe) {\n      throw new Error(`Unsafe directory path: ${pathValidation.warnings.join(', ')}`);\n    }\n\n    const result = await safeExecute('ls', ['-la', pathValidation.normalizedPath], {\n      timeout: 10000,\n      restrictToWorkingDir: allowedDirectories.length === 0,\n    });\n\n    if (!result.success) {\n      throw new Error(`Failed to list directory: ${result.stderr}`);\n    }\n\n    return result.stdout.split('\\n').filter(line => line.trim().length > 0);\n  }\n\n  /**\n   * Safe Git operations\n   */\n  static async safeGitCommand(args: string[]): Promise<ExecutionResult> {\n    const allowedGitArgs = [\n      'status', 'log', 'diff', 'branch', 'remote', 'config',\n      'add', 'commit', 'push', 'pull', 'fetch', 'checkout',\n      'merge', 'rebase', 'stash', 'tag', 'show', 'blame',\n    ];\n\n    return safeExecute('git', args, {\n      allowedFlags: allowedGitArgs,\n      timeout: 30000,\n      restrictToWorkingDir: true,\n      logExecution: true,\n    });\n  }\n\n  /**\n   * Safe NPM operations\n   */\n  static async safeNpmCommand(args: string[]): Promise<ExecutionResult> {\n    const allowedNpmArgs = [\n      'install', 'update', 'list', 'outdated', 'audit',\n      'run', 'start', 'test', 'build', 'version',\n      'info', 'search', 'view', 'help',\n    ];\n\n    return safeExecute('npm', args, {\n      allowedFlags: allowedNpmArgs,\n      timeout: 120000, // NPM operations can take longer\n      restrictToWorkingDir: true,\n      logExecution: true,\n    });\n  }\n}","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/dashboard-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chalk' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1047,1050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1047,1050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1093,1096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1093,1096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"default-param-last","severity":2,"message":"Default parameters should be last.","line":55,"column":15,"nodeType":"AssignmentPattern","messageId":"shouldBeLast","endLine":55,"endColumn":52},{"ruleId":"new-cap","severity":2,"message":"A constructor name should not start with a lowercase letter.","line":80,"column":29,"nodeType":"NewExpression","messageId":"lower","endLine":80,"endColumn":33},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":101,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":101,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2545,2545],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":172,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":172,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":172,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":172,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":172,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":187,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":198,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":187,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":187,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":202,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":202,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":202,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":202,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":216,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":219,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":216,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":216,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":216,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":216,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":223,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":223,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .log on an `any` value.","line":223,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":223,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":242,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":256,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":242,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":242,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":242,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":242,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":259,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":282,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":259,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":259,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":259,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":259,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":285,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":297,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":285,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":285,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":285,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":285,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":299,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":299,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setData on an `any` value.","line":299,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":299,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":323,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":327,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":323,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":323,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":323,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":330,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":330,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setPercent on an `any` value.","line":330,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":330,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":333,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":345,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":333,"column":23,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":333,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":333,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":347,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":347,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setData on an `any` value.","line":347,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":347,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":358,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":362,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":358,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":358,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":358,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":358,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":364,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":364,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setData on an `any` value.","line":364,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":364,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":367,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":372,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":367,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":367,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":367,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":367,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":374,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":374,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setContent on an `any` value.","line":374,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":374,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":405,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":405,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10430,10430],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":413,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":417,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":413,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":413,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":413,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":413,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":420,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":420,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setContent on an `any` value.","line":420,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":420,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":429,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":432,"endColumn":7},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":429,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":429,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .set on an `any` value.","line":429,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":429,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":435,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":435,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .setContent on an `any` value.","line":435,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":22},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":580,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":580,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[15067,15067],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":604,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":604,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[15557,15557],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"default-case","severity":2,"message":"Expected a default case.","line":627,"column":7,"nodeType":"SwitchStatement","messageId":"missingDefaultCase","endLine":637,"endColumn":8},{"ruleId":"default-case","severity":2,"message":"Expected a default case.","line":645,"column":7,"nodeType":"SwitchStatement","messageId":"missingDefaultCase","endLine":655,"endColumn":8},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":665,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":667,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":666,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":666,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .destroy on an `any` value.","line":666,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":666,"endColumn":21},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'getStatusColor'.","line":674,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":674,"endColumn":25},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'generateSampleData'.","line":687,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":687,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":748,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":748,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[19468,19468],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":764,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":764,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .focus on an `any` value.","line":766,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":766,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":767,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":767,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .focus on an `any` value.","line":767,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":767,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":783,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":783,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .focus on an `any` value.","line":785,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":785,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":786,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":786,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .focus on an `any` value.","line":786,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":786,"endColumn":19},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":807,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":807,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[21201,21201],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .constructor on an `any` value.","line":885,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":885,"endColumn":62},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":898,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":898,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[23597,23599],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":918,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":918,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Node`.","line":920,"column":26,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":920,"endColumn":37},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":934,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":934,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[24365,24365],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":71,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import blessed from 'blessed';\nimport contrib from 'blessed-contrib';\nimport chalk from 'chalk';\nimport { DashboardDataService } from '../services/dashboard-data';\nimport type { ApiClient } from '../client';\nimport { ThemeHelper, getThemeNames } from '../ui/themes/dashboard-themes';\n\nexport interface DashboardData {\n  tasks: {\n    total: number;\n    byStatus: Record<string, number>;\n    byPriority: Record<string, number>;\n    completed: number;\n    overdue: number;\n  };\n  velocity: Array<{ period: string; completed: number }>;\n  teamMembers: Array<{ name: string; taskCount: number; load: number }>;\n  burndown: Array<{ day: string; remaining: number; ideal: number }>;\n  activity: Array<{ timestamp: string; event: string; user: string }>;\n}\n\nexport interface DashboardConfig {\n  refreshInterval: number;\n  theme: string;\n  showHelp: boolean;\n  autoRefresh: boolean;\n}\n\n/**\n * Manages terminal dashboards using blessed-contrib\n */\nexport class DashboardManager {\n  private readonly screen: blessed.Widgets.Screen;\n\n  private readonly grid: any;\n\n  private readonly widgets: Map<string, any> = new Map();\n\n  private readonly config: DashboardConfig;\n\n  private readonly dataService: DashboardDataService;\n\n  private readonly themeHelper: ThemeHelper;\n\n  private refreshTimer?: NodeJS.Timeout;\n\n  private currentLayout: 'overview' | 'velocity' | 'personal' = 'overview';\n\n  private focusedWidget: string | null = null;\n\n  private isFullscreen = false;\n\n  private debugMode = false;\n\n  constructor(config: Partial<DashboardConfig> = {}, apiClient?: ApiClient) {\n    this.config = {\n      refreshInterval: 30000, // 30 seconds\n      theme: 'dark',\n      showHelp: true,\n      autoRefresh: true,\n      ...config,\n    };\n\n    // Initialize data service\n    this.dataService = apiClient\n      ? new DashboardDataService(apiClient)\n      : new DashboardDataService({} as ApiClient);\n\n    // Initialize theme helper\n    this.themeHelper = new ThemeHelper(this.config.theme);\n\n    // Create screen\n    this.screen = blessed.screen({\n      smartCSR: true,\n      title: 'Kanban Dashboard',\n      dockBorders: true,\n    });\n\n    // Create grid\n    this.grid = new contrib.grid({\n      rows: 12,\n      cols: 12,\n      screen: this.screen,\n    });\n\n    this.setupKeyBindings();\n  }\n\n  /**\n   * Setup keyboard navigation\n   */\n  private setupKeyBindings(): void {\n    // Exit commands\n    this.screen.key(['q', 'C-c'], () => {\n      this.destroy();\n      process.exit(0);\n    });\n\n    // Dashboard controls\n    this.screen.key(['r', 'F5'], () => {\n      this.refreshData();\n    });\n\n    // Layout switching\n    this.screen.key(['1', 'F1'], () => {\n      this.switchLayout('overview');\n    });\n\n    this.screen.key(['2', 'F2'], () => {\n      this.switchLayout('velocity');\n    });\n\n    this.screen.key(['3', 'F3'], () => {\n      this.switchLayout('personal');\n    });\n\n    // Help and settings\n    this.screen.key(['h', '?', 'F12'], () => {\n      this.showHelp();\n    });\n\n    this.screen.key(['t', 'F9'], () => {\n      this.toggleTheme();\n    });\n\n    this.screen.key(['a', 'F10'], () => {\n      this.toggleAutoRefresh();\n    });\n\n    // Navigation within widgets\n    this.screen.key(['tab'], () => {\n      this.focusNextWidget();\n    });\n\n    this.screen.key(['S-tab'], () => {\n      this.focusPreviousWidget();\n    });\n\n    // Zoom/fullscreen toggle\n    this.screen.key(['f', 'F11'], () => {\n      this.toggleFullscreen();\n    });\n\n    // Quick actions\n    this.screen.key(['s'], () => {\n      this.showQuickStats();\n    });\n\n    this.screen.key(['e'], () => {\n      this.exportDashboard();\n    });\n\n    // Debug mode toggle\n    this.screen.key(['d'], () => {\n      this.toggleDebugMode();\n    });\n\n    // Reset view\n    this.screen.key(['escape'], () => {\n      this.resetView();\n    });\n  }\n\n  /**\n   * Create overview dashboard layout\n   */\n  createOverviewDashboard(data: DashboardData): void {\n    this.clearWidgets();\n\n    // Task status donut chart\n    const donutStyles = this.themeHelper.getDonutStyles();\n    const statusDonut = this.grid.set(0, 0, 6, 6, contrib.donut, {\n      label: 'Tasks by Status',\n      radius: 8,\n      arcWidth: 4,\n      remainColor: donutStyles.remainColor,\n      yPadding: 2,\n      data: Object.entries(data.tasks.byStatus).map(([status, count], index) => ({\n        label: status,\n        percent: (count / data.tasks.total) * 100,\n        color: donutStyles.colors[index % donutStyles.colors.length],\n      })),\n    });\n\n    // Priority bar chart\n    const barStyles = this.themeHelper.getBarStyles();\n    const priorityBar = this.grid.set(0, 6, 6, 6, contrib.bar, {\n      label: 'Tasks by Priority',\n      barWidth: 4,\n      barSpacing: 6,\n      xOffset: 0,\n      maxHeight: 9,\n      style: { fg: barStyles.textColor },\n      data: {\n        titles: Object.keys(data.tasks.byPriority),\n        data: Object.values(data.tasks.byPriority),\n      },\n    });\n\n    // Velocity line chart\n    const lineStyles = this.themeHelper.getLineStyles();\n    const velocityLine = this.grid.set(6, 0, 6, 8, contrib.line, {\n      ...lineStyles,\n      xLabelPadding: 3,\n      xPadding: 5,\n      label: 'Team Velocity (Last 8 Weeks)',\n      data: {\n        title: 'Completed Tasks',\n        x: data.velocity.map(v => v.period),\n        y: data.velocity.map(v => v.completed),\n      },\n    });\n\n    // Activity log\n    const logStyles = this.themeHelper.getLogStyles();\n    const activityLog = this.grid.set(6, 8, 6, 4, contrib.log, {\n      ...logStyles,\n      label: 'Recent Activity',\n    });\n\n    // Populate activity log\n    data.activity.forEach(activity => {\n      activityLog.log(`${activity.timestamp}: ${activity.event} (${activity.user})`);\n    });\n\n    this.widgets.set('statusDonut', statusDonut);\n    this.widgets.set('priorityBar', priorityBar);\n    this.widgets.set('velocityLine', velocityLine);\n    this.widgets.set('activityLog', activityLog);\n\n    this.addHeader('📊 Kanban Dashboard - Overview');\n    this.addFooter();\n  }\n\n  /**\n   * Create velocity-focused dashboard\n   */\n  createVelocityDashboard(data: DashboardData): void {\n    this.clearWidgets();\n\n    // Large velocity chart\n    const velocityLine = this.grid.set(0, 0, 8, 12, contrib.line, {\n      style: {\n        line: 'cyan',\n        text: 'white',\n        baseline: 'black',\n      },\n      xLabelPadding: 3,\n      xPadding: 5,\n      label: 'Team Velocity Trend',\n      data: {\n        title: 'Completed Tasks',\n        x: data.velocity.map(v => v.period),\n        y: data.velocity.map(v => v.completed),\n      },\n    });\n\n    // Burndown chart\n    const burndownLine = this.grid.set(8, 0, 4, 8, contrib.line, {\n      style: {\n        line: 'red',\n        text: 'white',\n        baseline: 'black',\n      },\n      xLabelPadding: 3,\n      xPadding: 5,\n      label: 'Sprint Burndown',\n      data: [\n        {\n          title: 'Actual',\n          x: data.burndown.map(b => b.day),\n          y: data.burndown.map(b => b.remaining),\n          style: { line: 'red' },\n        },\n        {\n          title: 'Ideal',\n          x: data.burndown.map(b => b.day),\n          y: data.burndown.map(b => b.ideal),\n          style: { line: 'green' },\n        },\n      ],\n    });\n\n    // Team capacity table\n    const teamTable = this.grid.set(8, 8, 4, 4, contrib.table, {\n      keys: true,\n      fg: 'white',\n      selectedFg: 'white',\n      selectedBg: 'blue',\n      interactive: false,\n      label: 'Team Capacity',\n      width: '30%',\n      height: '30%',\n      border: { type: 'line', fg: 'cyan' },\n      columnSpacing: 10,\n      columnWidth: [16, 12, 12],\n    });\n\n    teamTable.setData({\n      headers: ['Member', 'Tasks', 'Load %'],\n      data: data.teamMembers.map(member => [\n        member.name,\n        member.taskCount.toString(),\n        `${member.load}%`,\n      ]),\n    });\n\n    this.widgets.set('velocityLine', velocityLine);\n    this.widgets.set('burndownLine', burndownLine);\n    this.widgets.set('teamTable', teamTable);\n\n    this.addHeader('📈 Velocity Dashboard');\n    this.addFooter();\n  }\n\n  /**\n   * Create personal productivity dashboard\n   */\n  createPersonalDashboard(data: DashboardData): void {\n    this.clearWidgets();\n\n    // Personal task progress\n    const progressGauge = this.grid.set(0, 0, 6, 6, contrib.gauge, {\n      label: 'Personal Progress',\n      stroke: 'green',\n      fill: 'white',\n    });\n\n    const completionRate = (data.tasks.completed / data.tasks.total) * 100;\n    progressGauge.setPercent(completionRate);\n\n    // Task breakdown\n    const taskTable = this.grid.set(0, 6, 6, 6, contrib.table, {\n      keys: true,\n      fg: 'white',\n      selectedFg: 'white',\n      selectedBg: 'blue',\n      interactive: true,\n      label: 'My Tasks',\n      width: '30%',\n      height: '30%',\n      border: { type: 'line', fg: 'cyan' },\n      columnSpacing: 10,\n      columnWidth: [20, 12, 12],\n    });\n\n    taskTable.setData({\n      headers: ['Task', 'Priority', 'Status'],\n      data: [\n        ['Complete user auth', 'P1', 'In Progress'],\n        ['Fix login bug', 'P1', 'Todo'],\n        ['Update docs', 'P3', 'Done'],\n        ['Code review', 'P2', 'Todo'],\n      ],\n    });\n\n    // Time tracking sparkline\n    const timeSparkline = this.grid.set(6, 0, 3, 12, contrib.sparkline, {\n      label: 'Hours This Week',\n      tags: true,\n      style: { fg: 'blue' },\n    });\n\n    timeSparkline.setData(['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], [8, 7, 9, 6, 8]);\n\n    // Today's focus box\n    const focusBox = this.grid.set(9, 0, 3, 12, blessed.box, {\n      label: \"Today's Focus\",\n      border: { type: 'line', fg: 'yellow' },\n      style: { fg: 'white' },\n      padding: { left: 2, right: 2 },\n    });\n\n    focusBox.setContent(`\n🎯 Current Sprint Goals:\n• Complete user authentication system\n• Fix critical login bug \n• Prepare demo for stakeholders\n\n📝 Today's Tasks:\n• [In Progress] Implement OAuth integration\n• [Todo] Write unit tests for auth module\n• [Todo] Review PR #123\n\n⚡ Quick Stats:\n• 12 tasks completed this week\n• 3 hours average daily focus time\n• 85% sprint completion rate\n    `);\n\n    this.widgets.set('progressGauge', progressGauge);\n    this.widgets.set('taskTable', taskTable);\n    this.widgets.set('timeSparkline', timeSparkline);\n    this.widgets.set('focusBox', focusBox);\n\n    this.addHeader('👤 Personal Dashboard');\n    this.addFooter();\n  }\n\n  /**\n   * Switch between dashboard layouts\n   */\n  switchLayout(layout: 'overview' | 'velocity' | 'personal'): void {\n    this.currentLayout = layout;\n    this.refreshData();\n  }\n\n  /**\n   * Add header with current info\n   */\n  private addHeader(title: string): void {\n    const headerStyles = this.themeHelper.getHeaderStyles();\n    const header = this.grid.set(-1, 0, 1, 12, blessed.box, {\n      label: title,\n      ...headerStyles,\n      align: 'center',\n    });\n\n    const now = new Date().toLocaleString();\n    header.setContent(`${title} | ${now} | Press 'h' for help`);\n    this.widgets.set('header', header);\n  }\n\n  /**\n   * Add footer with controls\n   */\n  private addFooter(): void {\n    const footerStyles = this.themeHelper.getFooterStyles();\n    const footer = this.grid.set(12, 0, 1, 12, blessed.box, {\n      ...footerStyles,\n      align: 'center',\n    });\n\n    const currentTheme = this.themeHelper.getTheme().name;\n    footer.setContent(\n      `1-3:Layouts | Tab:Navigate | r:Refresh | t:Theme(${currentTheme}) | s:Stats | d:Debug | h:Help | q:Quit`\n    );\n    this.widgets.set('footer', footer);\n  }\n\n  /**\n   * Show error notification\n   */\n  private showErrorNotification(message: string): void {\n    const errorBox = blessed.box({\n      top: 1,\n      right: 1,\n      width: '40%',\n      height: 3,\n      border: { type: 'line', fg: 'red' },\n      style: { fg: 'white', bg: 'red' },\n      label: '⚠️  Error',\n      content: message,\n      padding: { left: 1, right: 1 },\n    });\n\n    this.screen.append(errorBox);\n    this.screen.render();\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      this.screen.remove(errorBox);\n      this.screen.render();\n    }, 5000);\n  }\n\n  /**\n   * Show theme change notification\n   */\n  private showThemeNotification(message: string): void {\n    const themeBox = blessed.box({\n      top: 1,\n      left: 1,\n      width: '30%',\n      height: 3,\n      border: { type: 'line', fg: this.themeHelper.getColor('primary') },\n      style: {\n        fg: this.themeHelper.getColor('foreground'),\n        bg: this.themeHelper.getColor('secondary'),\n      },\n      label: '🎨 Theme',\n      content: message,\n      padding: { left: 1, right: 1 },\n    });\n\n    this.screen.append(themeBox);\n    this.screen.render();\n\n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      this.screen.remove(themeBox);\n      this.screen.render();\n    }, 3000);\n  }\n\n  /**\n   * Show help overlay\n   */\n  private showHelp(): void {\n    const helpBox = blessed.box({\n      top: 'center',\n      left: 'center',\n      width: '50%',\n      height: '60%',\n      border: { type: 'line', fg: 'yellow' },\n      style: { fg: 'white', bg: 'black' },\n      label: '📖 Dashboard Help',\n      content: `\n🎮 Navigation & Controls:\n  Layout Switching:\n    1, F1      - Overview dashboard\n    2, F2      - Velocity dashboard  \n    3, F3      - Personal dashboard\n\n  Widget Navigation:\n    Tab        - Focus next widget\n    Shift+Tab  - Focus previous widget\n    F, F11     - Toggle fullscreen for focused widget\n    \n  Dashboard Controls:\n    r, F5      - Refresh data manually\n    a, F10     - Toggle auto-refresh\n    t, F9      - Cycle through themes\n    s          - Show quick statistics\n    d          - Toggle debug mode\n    e          - Export dashboard (coming soon)\n    \n  Help & Exit:\n    h, ?, F12  - Show this help\n    Escape     - Reset view to default\n    q, Ctrl+C  - Quit dashboard\n\n📊 Dashboard Layouts:\n  1 - Overview: Task status, priority breakdown, activity\n  2 - Velocity: Team performance, burndown charts, capacity\n  3 - Personal: Individual progress, focus areas, time tracking\n\n🎨 Themes:\n  Available: dark, light, high-contrast, solarized-dark\n  Use 't' to cycle through themes or --theme flag on startup\n\n⚙️  Features:\n  • Real-time data updates with configurable intervals\n  • Interactive charts and tables with focus navigation\n  • Multiple color themes for accessibility\n  • Debug mode for troubleshooting\n  • Export functionality (coming soon)\n\nPress any key to close this help...\n      `,\n      padding: { left: 2, right: 2 },\n    });\n\n    this.screen.append(helpBox);\n    helpBox.focus();\n\n    helpBox.key(['escape', 'enter', 'space'], () => {\n      this.screen.remove(helpBox);\n      this.screen.render();\n    });\n\n    this.screen.render();\n  }\n\n  /**\n   * Toggle between available themes\n   */\n  private toggleTheme(): void {\n    const themes = getThemeNames();\n    const currentIndex = themes.indexOf(this.config.theme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n\n    this.config.theme = themes[nextIndex];\n    this.themeHelper.setTheme(this.config.theme);\n\n    // Show theme change notification\n    this.showThemeNotification(`Theme changed to: ${this.config.theme}`);\n\n    // Refresh dashboard with new theme\n    this.refreshData();\n  }\n\n  /**\n   * Toggle auto-refresh\n   */\n  private toggleAutoRefresh(): void {\n    this.config.autoRefresh = !this.config.autoRefresh;\n\n    if (this.config.autoRefresh) {\n      this.startAutoRefresh();\n    } else {\n      this.stopAutoRefresh();\n    }\n  }\n\n  /**\n   * Start auto-refresh timer\n   */\n  startAutoRefresh(): void {\n    this.stopAutoRefresh(); // Clear existing timer\n\n    if (this.config.autoRefresh) {\n      this.refreshTimer = setInterval(() => {\n        this.refreshData();\n      }, this.config.refreshInterval);\n    }\n  }\n\n  /**\n   * Stop auto-refresh timer\n   */\n  stopAutoRefresh(): void {\n    if (this.refreshTimer) {\n      clearInterval(this.refreshTimer);\n      this.refreshTimer = undefined;\n    }\n  }\n\n  /**\n   * Refresh dashboard data\n   */\n  async refreshData(): Promise<void> {\n    try {\n      // Fetch real data from API or fallback to sample data\n      const data = await this.dataService.fetchDashboardData();\n\n      switch (this.currentLayout) {\n        case 'overview':\n          this.createOverviewDashboard(data);\n          break;\n        case 'velocity':\n          this.createVelocityDashboard(data);\n          break;\n        case 'personal':\n          this.createPersonalDashboard(data);\n          break;\n      }\n\n      this.screen.render();\n    } catch (error) {\n      // Show error notification and use sample data\n      this.showErrorNotification(`Data refresh failed: ${error.message}`);\n      const fallbackData = this.generateSampleData();\n\n      switch (this.currentLayout) {\n        case 'overview':\n          this.createOverviewDashboard(fallbackData);\n          break;\n        case 'velocity':\n          this.createVelocityDashboard(fallbackData);\n          break;\n        case 'personal':\n          this.createPersonalDashboard(fallbackData);\n          break;\n      }\n\n      this.screen.render();\n    }\n  }\n\n  /**\n   * Clear all widgets\n   */\n  private clearWidgets(): void {\n    for (const widget of this.widgets.values()) {\n      widget.destroy();\n    }\n    this.widgets.clear();\n  }\n\n  /**\n   * Get color for task status\n   */\n  private getStatusColor(status: string): string {\n    const colors = {\n      todo: 'gray',\n      in_progress: 'yellow',\n      done: 'green',\n      blocked: 'red',\n    };\n    return colors[status as keyof typeof colors] || 'white';\n  }\n\n  /**\n   * Generate sample data for demo\n   */\n  private generateSampleData(): DashboardData {\n    return {\n      tasks: {\n        total: 45,\n        byStatus: {\n          todo: 18,\n          in_progress: 12,\n          done: 13,\n          blocked: 2,\n        },\n        byPriority: {\n          P1: 8,\n          P2: 15,\n          P3: 18,\n          P4: 4,\n        },\n        completed: 13,\n        overdue: 3,\n      },\n      velocity: [\n        { period: 'W1', completed: 12 },\n        { period: 'W2', completed: 15 },\n        { period: 'W3', completed: 18 },\n        { period: 'W4', completed: 14 },\n        { period: 'W5', completed: 20 },\n        { period: 'W6', completed: 16 },\n        { period: 'W7', completed: 22 },\n        { period: 'W8', completed: 19 },\n      ],\n      teamMembers: [\n        { name: 'Alice', taskCount: 8, load: 85 },\n        { name: 'Bob', taskCount: 6, load: 70 },\n        { name: 'Charlie', taskCount: 10, load: 95 },\n        { name: 'Diana', taskCount: 7, load: 75 },\n      ],\n      burndown: [\n        { day: 'Day 1', remaining: 45, ideal: 45 },\n        { day: 'Day 2', remaining: 42, ideal: 40 },\n        { day: 'Day 3', remaining: 38, ideal: 35 },\n        { day: 'Day 4', remaining: 35, ideal: 30 },\n        { day: 'Day 5', remaining: 30, ideal: 25 },\n        { day: 'Day 6', remaining: 28, ideal: 20 },\n        { day: 'Day 7', remaining: 25, ideal: 15 },\n        { day: 'Day 8', remaining: 20, ideal: 10 },\n        { day: 'Day 9', remaining: 15, ideal: 5 },\n        { day: 'Day 10', remaining: 12, ideal: 0 },\n      ],\n      activity: [\n        { timestamp: '14:32', event: 'Task completed: User Auth', user: 'Alice' },\n        { timestamp: '14:15', event: 'New task created: Fix login bug', user: 'Bob' },\n        { timestamp: '13:45', event: 'Task moved to In Progress', user: 'Charlie' },\n        { timestamp: '13:20', event: 'Comment added to TASK-123', user: 'Diana' },\n        { timestamp: '12:55', event: 'Task assigned to Alice', user: 'Bob' },\n      ],\n    };\n  }\n\n  /**\n   * Start the dashboard\n   */\n  start(): void {\n    this.refreshData();\n    this.startAutoRefresh();\n    this.screen.render();\n  }\n\n  /**\n   * Focus next widget for navigation\n   */\n  private focusNextWidget(): void {\n    const widgetKeys = Array.from(this.widgets.keys());\n    if (widgetKeys.length === 0) return;\n\n    const currentIndex = this.focusedWidget ? widgetKeys.indexOf(this.focusedWidget) : -1;\n    const nextIndex = (currentIndex + 1) % widgetKeys.length;\n\n    this.focusedWidget = widgetKeys[nextIndex];\n    const widget = this.widgets.get(this.focusedWidget);\n\n    if (widget?.focus) {\n      widget.focus();\n      this.screen.render();\n    }\n  }\n\n  /**\n   * Focus previous widget for navigation\n   */\n  private focusPreviousWidget(): void {\n    const widgetKeys = Array.from(this.widgets.keys());\n    if (widgetKeys.length === 0) return;\n\n    const currentIndex = this.focusedWidget ? widgetKeys.indexOf(this.focusedWidget) : -1;\n    const prevIndex = currentIndex <= 0 ? widgetKeys.length - 1 : currentIndex - 1;\n\n    this.focusedWidget = widgetKeys[prevIndex];\n    const widget = this.widgets.get(this.focusedWidget);\n\n    if (widget?.focus) {\n      widget.focus();\n      this.screen.render();\n    }\n  }\n\n  /**\n   * Toggle fullscreen mode for focused widget\n   */\n  private toggleFullscreen(): void {\n    if (!this.focusedWidget) {\n      this.showNotification('No widget focused. Use Tab to focus a widget first.');\n      return;\n    }\n\n    this.isFullscreen = !this.isFullscreen;\n\n    if (this.isFullscreen) {\n      this.showNotification(`Fullscreen mode: ${this.focusedWidget} (press F or F11 to exit)`);\n      // In a real implementation, this would resize the focused widget to full screen\n    } else {\n      this.showNotification('Exited fullscreen mode');\n      this.refreshData(); // Restore normal layout\n    }\n  }\n\n  /**\n   * Show quick statistics overlay\n   */\n  private showQuickStats(): void {\n    const statsBox = blessed.box({\n      top: 'center',\n      left: 'center',\n      width: '60%',\n      height: '50%',\n      border: { type: 'line', fg: this.themeHelper.getColor('primary') },\n      style: {\n        fg: this.themeHelper.getColor('foreground'),\n        bg: this.themeHelper.getColor('background'),\n      },\n      label: '📊 Quick Statistics',\n      content: `\n📈 Performance Metrics:\n  • Dashboard Refresh Rate: ${this.config.refreshInterval / 1000}s\n  • Active Widgets: ${this.widgets.size}\n  • Current Theme: ${this.themeHelper.getTheme().name}\n  • Auto-refresh: ${this.config.autoRefresh ? 'Enabled' : 'Disabled'}\n\n🎮 Navigation Tips:\n  • Tab/Shift+Tab: Navigate between widgets\n  • F/F11: Toggle fullscreen for focused widget\n  • 1-3/F1-F3: Switch dashboard layouts\n  • t/F9: Cycle through themes\n  • r/F5: Manual refresh\n  • s: Show this quick stats\n  • h/?: Full help\n\nPress any key to close...\n      `,\n      padding: { left: 2, right: 2 },\n    });\n\n    this.screen.append(statsBox);\n    statsBox.focus();\n\n    statsBox.key(['escape', 'enter', 'space', 's'], () => {\n      this.screen.remove(statsBox);\n      this.screen.render();\n    });\n\n    this.screen.render();\n  }\n\n  /**\n   * Export dashboard (placeholder)\n   */\n  private exportDashboard(): void {\n    this.showNotification('Export functionality coming soon! (PNG/SVG export)');\n  }\n\n  /**\n   * Toggle debug mode\n   */\n  private toggleDebugMode(): void {\n    this.debugMode = !this.debugMode;\n\n    if (this.debugMode) {\n      this.showNotification('Debug mode enabled - showing widget info');\n      this.showDebugOverlay();\n    } else {\n      this.showNotification('Debug mode disabled');\n      this.hideDebugOverlay();\n    }\n  }\n\n  /**\n   * Show debug overlay with widget information\n   */\n  private showDebugOverlay(): void {\n    const debugInfo = Array.from(this.widgets.entries())\n      .map(([name, widget]) => `${name}: ${widget.constructor.name}`)\n      .join('\\n');\n\n    const debugBox = blessed.box({\n      top: 0,\n      right: 0,\n      width: '25%',\n      height: '30%',\n      border: { type: 'line', fg: 'yellow' },\n      style: { fg: 'yellow', bg: 'black' },\n      label: '🐛 Debug Info',\n      content: `\nWidgets: ${this.widgets.size}\nFocused: ${this.focusedWidget || 'none'}\nLayout: ${this.currentLayout}\nFullscreen: ${this.isFullscreen}\nTheme: ${this.themeHelper.getTheme().name}\n\nActive Widgets:\n${debugInfo}\n      `,\n      padding: { left: 1, right: 1 },\n    });\n\n    this.widgets.set('debug', debugBox);\n    this.screen.append(debugBox);\n    this.screen.render();\n  }\n\n  /**\n   * Hide debug overlay\n   */\n  private hideDebugOverlay(): void {\n    const debugWidget = this.widgets.get('debug');\n    if (debugWidget) {\n      this.screen.remove(debugWidget);\n      this.widgets.delete('debug');\n      this.screen.render();\n    }\n  }\n\n  /**\n   * Reset view to default state\n   */\n  private resetView(): void {\n    this.isFullscreen = false;\n    this.focusedWidget = null;\n    this.debugMode = false;\n    this.hideDebugOverlay();\n    this.refreshData();\n    this.showNotification('View reset to default state');\n  }\n\n  /**\n   * Show general notification\n   */\n  private showNotification(message: string): void {\n    const notificationBox = blessed.box({\n      top: 1,\n      left: 'center',\n      width: '50%',\n      height: 3,\n      border: { type: 'line', fg: this.themeHelper.getColor('info') },\n      style: {\n        fg: this.themeHelper.getColor('foreground'),\n        bg: this.themeHelper.getColor('secondary'),\n      },\n      label: 'ℹ️  Info',\n      content: message,\n      padding: { left: 1, right: 1 },\n    });\n\n    this.screen.append(notificationBox);\n    this.screen.render();\n\n    // Auto-remove after 3 seconds\n    setTimeout(() => {\n      this.screen.remove(notificationBox);\n      this.screen.render();\n    }, 3000);\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.stopAutoRefresh();\n    this.clearWidgets();\n    this.screen.destroy();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/formatter.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·format,·isToday,·isTomorrow,·isYesterday,·isThisWeek,·isThisYear,·formatDistanceToNow·` with `⏎··format,⏎··isToday,⏎··isTomorrow,⏎··isYesterday,⏎··isThisWeek,⏎··isThisYear,⏎··formatDistanceToNow,⏎`","line":2,"column":9,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":96,"fix":{"range":[35,122],"text":"\n  format,\n  isToday,\n  isTomorrow,\n  isYesterday,\n  isThisWeek,\n  isThisYear,\n  formatDistanceToNow,\n"}},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":18,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":18,"endColumn":16},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":80,"column":1,"nodeType":null,"messageId":"delete","endLine":80,"endColumn":3,"fix":{"range":[2383,2385],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":84,"column":1,"nodeType":null,"messageId":"delete","endLine":84,"endColumn":3,"fix":{"range":[2454,2456],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":88,"column":1,"nodeType":null,"messageId":"delete","endLine":88,"endColumn":3,"fix":{"range":[2531,2533],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":92,"column":1,"nodeType":null,"messageId":"delete","endLine":92,"endColumn":3,"fix":{"range":[2613,2615],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":97,"column":1,"nodeType":null,"messageId":"delete","endLine":97,"endColumn":3,"fix":{"range":[2740,2742],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":101,"column":1,"nodeType":null,"messageId":"delete","endLine":101,"endColumn":3,"fix":{"range":[2821,2823],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":105,"column":1,"nodeType":null,"messageId":"delete","endLine":105,"endColumn":3,"fix":{"range":[2903,2905],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":114,"column":1,"nodeType":null,"messageId":"delete","endLine":114,"endColumn":3,"fix":{"range":[3162,3164],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":118,"column":1,"nodeType":null,"messageId":"delete","endLine":118,"endColumn":3,"fix":{"range":[3232,3234],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":122,"column":1,"nodeType":null,"messageId":"delete","endLine":122,"endColumn":3,"fix":{"range":[3321,3323],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":126,"column":1,"nodeType":null,"messageId":"delete","endLine":126,"endColumn":3,"fix":{"range":[3408,3410],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":130,"column":1,"nodeType":null,"messageId":"delete","endLine":130,"endColumn":3,"fix":{"range":[3485,3487],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":134,"column":1,"nodeType":null,"messageId":"delete","endLine":134,"endColumn":3,"fix":{"range":[3564,3566],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":144,"column":1,"nodeType":null,"messageId":"delete","endLine":144,"endColumn":3,"fix":{"range":[3892,3894],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":149,"column":1,"nodeType":null,"messageId":"delete","endLine":149,"endColumn":3,"fix":{"range":[4025,4027],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":154,"column":1,"nodeType":null,"messageId":"delete","endLine":154,"endColumn":3,"fix":{"range":[4206,4208],"text":""}},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":163,"column":19,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":163,"endColumn":89},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":180,"column":1,"nodeType":null,"messageId":"delete","endLine":180,"endColumn":3,"fix":{"range":[4958,4960],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":186,"column":1,"nodeType":null,"messageId":"delete","endLine":186,"endColumn":3,"fix":{"range":[5214,5216],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":198,"column":1,"nodeType":null,"messageId":"delete","endLine":198,"endColumn":3,"fix":{"range":[5464,5466],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":202,"column":1,"nodeType":null,"messageId":"delete","endLine":202,"endColumn":3,"fix":{"range":[5525,5527],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":205,"column":1,"nodeType":null,"messageId":"delete","endLine":205,"endColumn":3,"fix":{"range":[5602,5604],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":209,"column":1,"nodeType":null,"messageId":"delete","endLine":209,"endColumn":3,"fix":{"range":[5662,5664],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":367,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9433,9436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9433,9436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":410,"column":3,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":417,"endColumn":4}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":23,"fixableWarningCount":0,"source":"import chalk from 'chalk';\nimport { format, isToday, isTomorrow, isYesterday, isThisWeek, isThisYear, formatDistanceToNow } from 'date-fns';\n\n/**\n * Utility functions for formatting CLI output\n */\n\n/**\n * Format file size in human-readable format\n */\nexport function formatFileSize(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(1)} ${units[unitIndex]}`;\n}\n\n/**\n * Format duration in human-readable format\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`;\n\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days}d ${hours % 24}h`;\n  if (hours > 0) return `${hours}h ${minutes % 60}m`;\n  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n  return `${seconds}s`;\n}\n\n/**\n * Format date/time in various formats\n */\nexport function formatDateTime(date: Date | string, formatStr = 'yyyy-MM-dd HH:mm:ss'): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return format(dateObj, formatStr);\n}\n\n/**\n * Format relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffMs = now.getTime() - dateObj.getTime();\n\n  const minutes = Math.floor(diffMs / 60000);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  return 'just now';\n}\n\n/**\n * Format relative time using date-fns (more natural language)\n */\nexport function formatRelativeTimeNatural(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return formatDistanceToNow(dateObj, { addSuffix: true });\n}\n\n/**\n * Format date for due dates with smart context\n */\nexport function formatDueDate(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isToday(dateObj)) {\n    return chalk.yellow('Due today');\n  }\n  \n  if (isTomorrow(dateObj)) {\n    return chalk.yellow('Due tomorrow');\n  }\n  \n  if (isYesterday(dateObj)) {\n    return chalk.red('Overdue (yesterday)');\n  }\n  \n  const now = new Date();\n  if (dateObj < now) {\n    return chalk.red(`Overdue (${formatDistanceToNow(dateObj)} ago)`);\n  }\n  \n  if (isThisWeek(dateObj)) {\n    return `Due ${format(dateObj, 'EEEE')}`;\n  }\n  \n  if (isThisYear(dateObj)) {\n    return `Due ${format(dateObj, 'MMM d')}`;\n  }\n  \n  return `Due ${format(dateObj, 'MMM d, yyyy')}`;\n}\n\n/**\n * Format date with time if it's today, date only otherwise\n */\nexport function formatSmartDateTime(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isToday(dateObj)) {\n    return format(dateObj, 'HH:mm');\n  }\n  \n  if (isYesterday(dateObj)) {\n    return `Yesterday ${format(dateObj, 'HH:mm')}`;\n  }\n  \n  if (isTomorrow(dateObj)) {\n    return `Tomorrow ${format(dateObj, 'HH:mm')}`;\n  }\n  \n  if (isThisWeek(dateObj)) {\n    return format(dateObj, 'EEE HH:mm');\n  }\n  \n  if (isThisYear(dateObj)) {\n    return format(dateObj, 'MMM d HH:mm');\n  }\n  \n  return format(dateObj, 'MMM d, yyyy HH:mm');\n}\n\n/**\n * Format time range\n */\nexport function formatTimeRange(startDate: Date | string, endDate: Date | string): string {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  \n  // Same day\n  if (isToday(start) && isToday(end)) {\n    return `Today ${format(start, 'HH:mm')} - ${format(end, 'HH:mm')}`;\n  }\n  \n  // Same date\n  if (format(start, 'yyyy-MM-dd') === format(end, 'yyyy-MM-dd')) {\n    return `${format(start, 'MMM d')} ${format(start, 'HH:mm')} - ${format(end, 'HH:mm')}`;\n  }\n  \n  // Different dates\n  return `${formatSmartDateTime(start)} - ${formatSmartDateTime(end)}`;\n}\n\n/**\n * Format timestamp for logs and debugging\n */\nexport function formatTimestamp(date?: Date | string): string {\n  const dateObj = date ? (typeof date === 'string' ? new Date(date) : date) : new Date();\n  return format(dateObj, 'yyyy-MM-dd HH:mm:ss.SSS');\n}\n\n/**\n * Format ISO date for API calls\n */\nexport function formatISODate(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toISOString();\n}\n\n/**\n * Format date for human display (short format)\n */\nexport function formatDateShort(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isToday(dateObj)) return 'Today';\n  if (isYesterday(dateObj)) return 'Yesterday';\n  if (isTomorrow(dateObj)) return 'Tomorrow';\n  if (isThisWeek(dateObj)) return format(dateObj, 'EEEE');\n  if (isThisYear(dateObj)) return format(dateObj, 'MMM d');\n  \n  return format(dateObj, 'MMM d, yyyy');\n}\n\n/**\n * Format working hours (business time)\n */\nexport function formatWorkingHours(hours: number): string {\n  if (hours < 1) {\n    const minutes = Math.round(hours * 60);\n    return `${minutes}min`;\n  }\n  \n  if (hours < 8) {\n    return `${hours.toFixed(1)}h`;\n  }\n  \n  const days = Math.floor(hours / 8);\n  const remainingHours = hours % 8;\n  \n  if (remainingHours === 0) {\n    return `${days}d`;\n  }\n  \n  return `${days}d ${remainingHours.toFixed(1)}h`;\n}\n\n/**\n * Format task priority with color\n */\nexport function formatPriority(priority: string): string {\n  const colors = {\n    P1: chalk.red,\n    P2: chalk.yellow,\n    P3: chalk.blue,\n    P4: chalk.green,\n    P5: chalk.gray,\n    CRITICAL: chalk.bgRed.white,\n    HIGH: chalk.red,\n    MEDIUM: chalk.yellow,\n    LOW: chalk.green,\n  };\n\n  const colorFn = colors[priority as keyof typeof colors] || chalk.white;\n  return colorFn(priority);\n}\n\n/**\n * Format task status with color and icon\n */\nexport function formatStatus(status: string): string {\n  const statusMap = {\n    todo: { icon: '○', color: chalk.gray },\n    in_progress: { icon: '◐', color: chalk.yellow },\n    'in-progress': { icon: '◐', color: chalk.yellow },\n    done: { icon: '●', color: chalk.green },\n    completed: { icon: '✓', color: chalk.green },\n    blocked: { icon: '✕', color: chalk.red },\n    cancelled: { icon: '⊘', color: chalk.gray },\n  };\n\n  const config = statusMap[status.toLowerCase() as keyof typeof statusMap] || {\n    icon: '?',\n    color: chalk.white,\n  };\n\n  return `${config.color(config.icon)} ${config.color(status)}`;\n}\n\n/**\n * Format percentage with color coding\n */\nexport function formatPercentage(value: number, total: number): string {\n  const percentage = total > 0 ? (value / total) * 100 : 0;\n  const rounded = Math.round(percentage);\n\n  let color = chalk.green;\n  if (rounded < 25) color = chalk.red;\n  else if (rounded < 50) color = chalk.yellow;\n  else if (rounded < 75) color = chalk.blue;\n\n  return color(`${rounded}%`);\n}\n\n/**\n * Format board column with task count\n */\nexport function formatBoardColumn(name: string, taskCount: number, maxWidth = 20): string {\n  const truncatedName = name.length > maxWidth ? `${name.substring(0, maxWidth - 3)}...` : name;\n\n  return `${chalk.bold(truncatedName)} (${taskCount})`;\n}\n\n/**\n * Format task list item\n */\nexport function formatTaskListItem(task: {\n  id: string;\n  title: string;\n  priority?: string;\n  status?: string;\n  assignee?: string;\n}): string {\n  const parts = [chalk.dim(`[${task.id}]`), task.title];\n\n  if (task.priority) {\n    parts.push(formatPriority(task.priority));\n  }\n\n  if (task.status) {\n    parts.push(formatStatus(task.status));\n  }\n\n  if (task.assignee) {\n    parts.push(chalk.cyan(`@${task.assignee}`));\n  }\n\n  return parts.join(' ');\n}\n\n/**\n * Format error message with stack trace\n */\nexport function formatError(error: Error | string, showStack = false): string {\n  if (typeof error === 'string') {\n    return chalk.red(`✖ ${error}`);\n  }\n\n  const message = chalk.red(`✖ ${error.message}`);\n\n  if (showStack && error.stack) {\n    const stack = error.stack\n      .split('\\n')\n      .slice(1)\n      .map(line => chalk.gray(`  ${line.trim()}`))\n      .join('\\n');\n\n    return `${message}\\n${stack}`;\n  }\n\n  return message;\n}\n\n/**\n * Format success message\n */\nexport function formatSuccess(message: string): string {\n  return chalk.green(`✓ ${message}`);\n}\n\n/**\n * Format warning message\n */\nexport function formatWarning(message: string): string {\n  return chalk.yellow(`⚠ ${message}`);\n}\n\n/**\n * Format info message\n */\nexport function formatInfo(message: string): string {\n  return chalk.blue(`ℹ ${message}`);\n}\n\n/**\n * Create a progress bar string\n */\nexport function formatProgressBar(current: number, total: number, width = 20): string {\n  const percentage = total > 0 ? current / total : 0;\n  const filled = Math.round(width * percentage);\n  const empty = width - filled;\n\n  const bar = '█'.repeat(filled) + '░'.repeat(empty);\n  const percentStr = formatPercentage(current, total);\n\n  return `[${bar}] ${percentStr} (${current}/${total})`;\n}\n\n/**\n * Format key-value pairs for display\n */\nexport function formatKeyValue(key: string, value: any, keyWidth = 15): string {\n  const paddedKey = key.padEnd(keyWidth);\n  return `${chalk.gray(paddedKey)} ${value}`;\n}\n\n/**\n * Format a divider line\n */\nexport function formatDivider(char = '─', width = 60): string {\n  return chalk.gray(char.repeat(width));\n}\n\n/**\n * Format a header with dividers\n */\nexport function formatHeader(title: string, width = 60): string {\n  const padding = Math.max(0, width - title.length - 2);\n  const leftPad = Math.floor(padding / 2);\n  const rightPad = padding - leftPad;\n\n  return [\n    formatDivider('═', width),\n    `${' '.repeat(leftPad)}${chalk.bold(title)}${' '.repeat(rightPad)}`,\n    formatDivider('═', width),\n  ].join('\\n');\n}\n\n/**\n * Truncate text with ellipsis\n */\nexport function truncate(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return `${text.substring(0, maxLength - 3)}...`;\n}\n\n/**\n * Wrap text to specified width\n */\nexport function wrapText(text: string, width: number): string[] {\n  const words = text.split(' ');\n  const lines: string[] = [];\n  let currentLine = '';\n\n  for (const word of words) {\n    if (`${currentLine} ${word}`.trim().length <= width) {\n      currentLine = `${currentLine} ${word}`.trim();\n    } else {\n      if (currentLine) lines.push(currentLine);\n      currentLine = word;\n    }\n  }\n\n  if (currentLine) lines.push(currentLine);\n  return lines;\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/input-sanitizer.ts","messages":[{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":32,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":32,"endColumn":23,"fix":{"range":[746,746],"text":"\n"}},{"ruleId":"@typescript-eslint/prefer-readonly","severity":1,"message":"Member 'purify' is never reassigned; mark it as `readonly`.","line":32,"column":3,"nodeType":"PropertyDefinition","messageId":"preferReadonly","endLine":32,"endColumn":23,"fix":{"range":[757,757],"text":"readonly "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[765,768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[765,768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":36,"column":11,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":36,"endColumn":40,"fix":{"range":[867,896],"text":"{window} = new JSDOM('')"}},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `WindowLike | undefined`.","line":37,"column":29,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":37,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":38,"column":1,"nodeType":null,"messageId":"delete","endLine":38,"endColumn":5,"fix":{"range":[942,946],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":40,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .addHook on an `any` value.","line":40,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":40,"endColumn":24},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `(node)` with `node`","line":40,"column":51,"nodeType":null,"messageId":"replace","endLine":40,"endColumn":57,"fix":{"range":[1048,1054],"text":"node"}},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .nodeName on an `any` value.","line":42,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .nodeName on an `any` value.","line":42,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":43,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .remove on an `any` value.","line":43,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":20},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":86,"column":32,"nodeType":"Literal","messageId":"unexpected","endLine":86,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":101,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":101,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":101,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sanitize on an `any` value.","line":101,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":103,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":103,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":103,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":103,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .sanitize on an `any` value.","line":103,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":103,"endColumn":39},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'preventCommandInjection'.","line":144,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":144,"endColumn":34},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":149,"column":13,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":149,"endColumn":14,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4232,4233],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4232,4232],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00.","line":151,"column":7,"nodeType":"Literal","messageId":"unexpected","endLine":151,"endColumn":14},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'escapeCliSpecialChars'.","line":181,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":181,"endColumn":32},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":183,"column":1,"nodeType":null,"messageId":"delete","endLine":183,"endColumn":5,"fix":{"range":[4958,4962],"text":""}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":214,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":214,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[5841,5842],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[5841,5841],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-new","severity":2,"message":"Do not use 'new' for side effects.","line":234,"column":7,"nodeType":"ExpressionStatement","messageId":"noNewStatement","endLine":234,"endColumn":33},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":340,"column":1,"nodeType":null,"messageId":"delete","endLine":340,"endColumn":5,"fix":{"range":[9035,9039],"text":""}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":342,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":342,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9135,9137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'detectSuspiciousPatterns'.","line":352,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":352,"endColumn":27},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":368,"column":1,"nodeType":null,"messageId":"delete","endLine":368,"endColumn":5,"fix":{"range":[10148,10152],"text":""}},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":410,"column":9,"nodeType":"Literal","messageId":"unexpected","endLine":410,"endColumn":48},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":417,"column":60,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":417,"endColumn":61,"suggestions":[{"messageId":"removeEscape","fix":{"range":[11578,11579],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[11578,11578],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":417,"column":77,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":417,"endColumn":78,"suggestions":[{"messageId":"removeEscape","fix":{"range":[11595,11596],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[11595,11595],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":417,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":417,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[11603,11605],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":438,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":438,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":439,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":439,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":440,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":440,"endColumn":67},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎·`","line":440,"column":67,"nodeType":null,"messageId":"insert","endLine":440,"endColumn":67,"fix":{"range":[12363,12363],"text":"\n "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":441,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":441,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":442,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":442,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":443,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":443,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":444,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":444,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":445,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":445,"endColumn":51},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":457,"column":1,"nodeType":null,"messageId":"delete","endLine":457,"endColumn":5,"fix":{"range":[13204,13208],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":462,"column":1,"nodeType":null,"messageId":"delete","endLine":462,"endColumn":5,"fix":{"range":[13431,13435],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":468,"column":1,"nodeType":null,"messageId":"delete","endLine":468,"endColumn":5,"fix":{"range":[13653,13657],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":473,"column":1,"nodeType":null,"messageId":"delete","endLine":473,"endColumn":5,"fix":{"range":[13797,13801],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":476,"column":2,"nodeType":null,"messageId":"insert","endLine":476,"endColumn":2,"fix":{"range":[13825,13825],"text":"\n"}}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":13,"fixableWarningCount":1,"source":"import DOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\n\n/**\n * Comprehensive input sanitization utility for CLI prompts\n * Addresses TASK-119: Implement input sanitization for all prompts\n */\n\nexport interface SanitizationOptions {\n  allowHtml?: boolean;\n  maxLength?: number;\n  allowedCharacters?: RegExp;\n  stripControlChars?: boolean;\n  normalizeWhitespace?: boolean;\n  preventInjection?: boolean;\n  escapeSpecialChars?: boolean;\n}\n\nexport interface SanitizationResult {\n  sanitized: string;\n  modified: boolean;\n  warnings: string[];\n  originalLength: number;\n  sanitizedLength: number;\n}\n\n/**\n * Main input sanitizer class with security-focused features\n */\nexport class InputSanitizer {\n  private static instance: InputSanitizer;\n  private purify: any;\n\n  constructor() {\n    // Initialize DOMPurify with JSDOM for server-side sanitization\n    const window = new JSDOM('').window;\n    this.purify = DOMPurify(window as any);\n    \n    // Configure DOMPurify for strict sanitization\n    this.purify.addHook('beforeSanitizeElements', (node) => {\n      // Remove all script tags and event handlers\n      if (node.nodeName === 'SCRIPT' || node.nodeName === 'IFRAME') {\n        node.remove();\n      }\n    });\n  }\n\n  static getInstance(): InputSanitizer {\n    if (!InputSanitizer.instance) {\n      InputSanitizer.instance = new InputSanitizer();\n    }\n    return InputSanitizer.instance;\n  }\n\n  /**\n   * Sanitize text input with comprehensive security checks\n   */\n  sanitizeText(input: string, options: SanitizationOptions = {}): SanitizationResult {\n    const {\n      allowHtml = false,\n      maxLength = 1000,\n      stripControlChars = true,\n      normalizeWhitespace = true,\n      preventInjection = true,\n      escapeSpecialChars = true,\n    } = options;\n\n    let sanitized = input;\n    const warnings: string[] = [];\n    const originalLength = input.length;\n\n    // 1. Basic safety checks\n    if (typeof sanitized !== 'string') {\n      sanitized = String(sanitized);\n      warnings.push('Input was converted to string');\n    }\n\n    // 2. Length validation\n    if (sanitized.length > maxLength) {\n      sanitized = sanitized.substring(0, maxLength);\n      warnings.push(`Input truncated to ${maxLength} characters`);\n    }\n\n    // 3. Strip control characters (except common whitespace)\n    if (stripControlChars) {\n      const controlCharRegex = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g;\n      const beforeStrip = sanitized;\n      sanitized = sanitized.replace(controlCharRegex, '');\n      if (beforeStrip !== sanitized) {\n        warnings.push('Control characters removed');\n      }\n    }\n\n    // 4. Command injection prevention\n    if (preventInjection) {\n      sanitized = this.preventCommandInjection(sanitized, warnings);\n    }\n\n    // 5. HTML sanitization\n    if (!allowHtml) {\n      sanitized = this.purify.sanitize(sanitized, { ALLOWED_TAGS: [] });\n    } else {\n      sanitized = this.purify.sanitize(sanitized);\n    }\n\n    // 6. Escape special characters for CLI safety\n    if (escapeSpecialChars) {\n      sanitized = this.escapeCliSpecialChars(sanitized, warnings);\n    }\n\n    // 7. Normalize whitespace\n    if (normalizeWhitespace) {\n      const beforeNormalize = sanitized;\n      sanitized = sanitized\n        .replace(/\\s+/g, ' ') // Multiple spaces to single\n        .replace(/^\\s+|\\s+$/g, '') // Trim\n        .replace(/\\t/g, '    '); // Tabs to spaces\n      if (beforeNormalize !== sanitized) {\n        warnings.push('Whitespace normalized');\n      }\n    }\n\n    // 8. Additional character restrictions\n    if (options.allowedCharacters) {\n      const beforeFilter = sanitized;\n      sanitized = sanitized.replace(new RegExp(`[^${options.allowedCharacters.source}]`, 'g'), '');\n      if (beforeFilter !== sanitized) {\n        warnings.push('Invalid characters removed');\n      }\n    }\n\n    return {\n      sanitized,\n      modified: sanitized !== input,\n      warnings,\n      originalLength,\n      sanitizedLength: sanitized.length,\n    };\n  }\n\n  /**\n   * Prevent command injection attacks\n   */\n  private preventCommandInjection(input: string, warnings: string[]): string {\n    const dangerousPatterns = [\n      // Shell injection patterns\n      /[;&|`$(){}[\\]\\\\]/g,\n      // Path traversal\n      /\\.\\.[\\/\\\\]/g,\n      // Null bytes\n      /\\x00/g,\n      // Process substitution\n      /<\\(/g,\n      />\\(/g,\n      // Command substitution\n      /\\$\\(/g,\n      // Backticks\n      /`/g,\n    ];\n\n    let sanitized = input;\n    let hasInjectionAttempt = false;\n\n    dangerousPatterns.forEach(pattern => {\n      if (pattern.test(sanitized)) {\n        sanitized = sanitized.replace(pattern, '');\n        hasInjectionAttempt = true;\n      }\n    });\n\n    if (hasInjectionAttempt) {\n      warnings.push('Potential command injection patterns removed');\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Escape CLI special characters\n   */\n  private escapeCliSpecialChars(input: string, warnings: string[]): string {\n    const beforeEscape = input;\n    \n    // Escape common shell metacharacters that are safe to keep but should be escaped\n    const escapeMap: Record<string, string> = {\n      '\"': '\\\\\"',\n      \"'\": \"\\\\'\",\n      '\\\\': '\\\\\\\\',\n    };\n\n    let escaped = input;\n    Object.entries(escapeMap).forEach(([char, replacement]) => {\n      escaped = escaped.replace(new RegExp(`\\\\${char}`, 'g'), replacement);\n    });\n\n    if (beforeEscape !== escaped) {\n      warnings.push('Special characters escaped');\n    }\n\n    return escaped;\n  }\n\n  /**\n   * Sanitize file path inputs\n   */\n  sanitizeFilePath(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 255,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: false, // File paths may need some special chars\n      allowedCharacters: /[\\w\\-.\\s\\/\\\\:]/,\n    });\n  }\n\n  /**\n   * Sanitize URL inputs\n   */\n  sanitizeUrl(input: string): SanitizationResult {\n    const result = this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 2048,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: false,\n      allowedCharacters: /[\\w\\-._~:/?#[\\]@!$&'()*+,;=%]/,\n    });\n\n    // Additional URL validation\n    try {\n      new URL(result.sanitized);\n    } catch {\n      result.warnings.push('Invalid URL format detected');\n      result.sanitized = '';\n    }\n\n    return result;\n  }\n\n  /**\n   * Sanitize email inputs\n   */\n  sanitizeEmail(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 254, // RFC 5321 limit\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: false,\n      allowedCharacters: /[\\w\\-_.@+]/,\n    });\n  }\n\n  /**\n   * Sanitize task title with specific rules\n   */\n  sanitizeTaskTitle(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 200,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: true,\n      allowedCharacters: /[\\w\\s\\-_.()[\\]!?@#%&+=]/,\n    });\n  }\n\n  /**\n   * Sanitize description/long text inputs\n   */\n  sanitizeDescription(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 2000,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: false, // Descriptions can have more varied content\n      allowedCharacters: /[\\w\\s\\-_.()[\\]!?@#%&+=:;,.\"']/,\n    });\n  }\n\n  /**\n   * Sanitize board/column names\n   */\n  sanitizeName(input: string, maxLength: number = 50): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: true,\n      allowedCharacters: /[\\w\\s\\-_]/,\n    });\n  }\n\n  /**\n   * Sanitize tag names (more restrictive)\n   */\n  sanitizeTag(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 20,\n      stripControlChars: true,\n      normalizeWhitespace: true,\n      preventInjection: true,\n      escapeSpecialChars: true,\n      allowedCharacters: /[\\w\\-_]/,\n    });\n  }\n\n  /**\n   * Sanitize command-line arguments\n   */\n  sanitizeCliArgument(input: string): SanitizationResult {\n    return this.sanitizeText(input, {\n      allowHtml: false,\n      maxLength: 500,\n      stripControlChars: true,\n      normalizeWhitespace: false, // Preserve exact spacing in CLI args\n      preventInjection: true,\n      escapeSpecialChars: true,\n    });\n  }\n\n  /**\n   * Batch sanitize multiple inputs\n   */\n  sanitizeBatch(\n    inputs: Record<string, string>,\n    sanitizers: Record<string, (input: string) => SanitizationResult>\n  ): Record<string, SanitizationResult> {\n    const results: Record<string, SanitizationResult> = {};\n    \n    Object.entries(inputs).forEach(([key, value]) => {\n      const sanitizer = sanitizers[key] || this.sanitizeText.bind(this);\n      results[key] = sanitizer(value);\n    });\n\n    return results;\n  }\n\n  /**\n   * Check if input contains suspicious patterns\n   */\n  detectSuspiciousPatterns(input: string): { suspicious: boolean; patterns: string[] } {\n    const suspiciousPatterns = [\n      { pattern: /javascript:/i, name: 'JavaScript protocol' },\n      { pattern: /data:/i, name: 'Data protocol' },\n      { pattern: /vbscript:/i, name: 'VBScript protocol' },\n      { pattern: /<script/i, name: 'Script tag' },\n      { pattern: /on\\w+\\s*=/i, name: 'Event handler' },\n      { pattern: /eval\\s*\\(/i, name: 'Eval function' },\n      { pattern: /expression\\s*\\(/i, name: 'CSS expression' },\n      { pattern: /\\$\\{.*\\}/g, name: 'Template literal injection' },\n      { pattern: /\\{\\{.*\\}\\}/g, name: 'Template engine injection' },\n      { pattern: /rm\\s+-rf/i, name: 'Destructive command' },\n      { pattern: /curl\\s+.*\\|\\s*sh/i, name: 'Remote script execution' },\n    ];\n\n    const detectedPatterns: string[] = [];\n    \n    suspiciousPatterns.forEach(({ pattern, name }) => {\n      if (pattern.test(input)) {\n        detectedPatterns.push(name);\n      }\n    });\n\n    return {\n      suspicious: detectedPatterns.length > 0,\n      patterns: detectedPatterns,\n    };\n  }\n\n  /**\n   * Generate security report for input\n   */\n  generateSecurityReport(input: string): {\n    safe: boolean;\n    score: number; // 0-100, higher is safer\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let score = 100;\n\n    // Check length\n    if (input.length > 1000) {\n      issues.push('Input exceeds recommended length');\n      recommendations.push('Consider shortening the input');\n      score -= 10;\n    }\n\n    // Check for suspicious patterns\n    const suspiciousCheck = this.detectSuspiciousPatterns(input);\n    if (suspiciousCheck.suspicious) {\n      issues.push(`Suspicious patterns detected: ${suspiciousCheck.patterns.join(', ')}`);\n      recommendations.push('Remove or escape suspicious content');\n      score -= 30;\n    }\n\n    // Check for control characters\n    if (/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/.test(input)) {\n      issues.push('Contains control characters');\n      recommendations.push('Remove non-printable characters');\n      score -= 15;\n    }\n\n    // Check for excessive special characters\n    const specialCharCount = (input.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g) || []).length;\n    const specialCharRatio = specialCharCount / input.length;\n    if (specialCharRatio > 0.3) {\n      issues.push('High ratio of special characters');\n      recommendations.push('Review special character usage');\n      score -= 10;\n    }\n\n    return {\n      safe: score >= 70,\n      score: Math.max(0, score),\n      issues,\n      recommendations,\n    };\n  }\n}\n\n// Export singleton instance\nexport const inputSanitizer = InputSanitizer.getInstance();\n\n// Utility functions for quick access\nexport const sanitizeTaskTitle = (input: string) => inputSanitizer.sanitizeTaskTitle(input);\nexport const sanitizeDescription = (input: string) => inputSanitizer.sanitizeDescription(input);\nexport const sanitizeName = (input: string, maxLength?: number) => inputSanitizer.sanitizeName(input, maxLength);\nexport const sanitizeTag = (input: string) => inputSanitizer.sanitizeTag(input);\nexport const sanitizeEmail = (input: string) => inputSanitizer.sanitizeEmail(input);\nexport const sanitizeUrl = (input: string) => inputSanitizer.sanitizeUrl(input);\nexport const sanitizeFilePath = (input: string) => inputSanitizer.sanitizeFilePath(input);\nexport const detectSuspicious = (input: string) => inputSanitizer.detectSuspiciousPatterns(input);\n\n/**\n * Safe prompt wrapper that automatically sanitizes input\n */\nexport function createSafePromptValidator(\n  sanitizeFunction: (input: string) => SanitizationResult,\n  additionalValidation?: (input: string) => true | string\n) {\n  return (input: string): true | string => {\n    // First, sanitize the input\n    const sanitized = sanitizeFunction(input);\n    \n    // Check if input was modified significantly\n    if (sanitized.modified && sanitized.warnings.length > 0) {\n      return `Input modified during sanitization: ${sanitized.warnings.join(', ')}. Please try again.`;\n    }\n    \n    // Check security score\n    const securityReport = inputSanitizer.generateSecurityReport(input);\n    if (!securityReport.safe) {\n      return `Security issues detected: ${securityReport.issues.join(', ')}`;\n    }\n    \n    // Run additional validation if provided\n    if (additionalValidation) {\n      return additionalValidation(sanitized.sanitized);\n    }\n    \n    return true;\n  };\n}","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/keyboard-handler.ts","messages":[{"ruleId":"max-classes-per-file","severity":2,"message":"File has too many classes (2). Maximum allowed is 1.","line":1,"column":1,"nodeType":"Program","messageId":"maximumExceeded","endLine":331,"endColumn":4},{"ruleId":"@typescript-eslint/prefer-readonly","severity":1,"message":"Member 'shortcuts' is never reassigned; mark it as `readonly`.","line":14,"column":3,"nodeType":"PropertyDefinition","messageId":"preferReadonly","endLine":14,"endColumn":64,"fix":{"range":[269,269],"text":"readonly "}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":15,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":15,"endColumn":28,"fix":{"range":[322,322],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":16,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":16,"endColumn":31,"fix":{"range":[350,350],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":17,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":17,"endColumn":56,"fix":{"range":[381,381],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":44,"column":1,"nodeType":null,"messageId":"delete","endLine":44,"endColumn":5,"fix":{"range":[892,896],"text":""}},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":50,"column":32,"nodeType":"CallExpression","messageId":"voidReturnArgument","endLine":50,"endColumn":62},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":61,"column":1,"nodeType":null,"messageId":"delete","endLine":61,"endColumn":5,"fix":{"range":[1298,1302],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":74,"column":1,"nodeType":null,"messageId":"delete","endLine":74,"endColumn":5,"fix":{"range":[1602,1606],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1666,1721],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1937,2005],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"clear"},"fix":{"range":[2215,2231],"text":""},"desc":"Remove the console.clear()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":103,"column":1,"nodeType":null,"messageId":"delete","endLine":103,"endColumn":5,"fix":{"range":[2232,2236],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2241,2299],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2304,2344],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":106,"column":1,"nodeType":null,"messageId":"delete","endLine":106,"endColumn":5,"fix":{"range":[2345,2349],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2684,2738],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2855,2912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2973,3028],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3144,3201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3223,3265],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3270,3342],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":140,"column":1,"nodeType":null,"messageId":"delete","endLine":140,"endColumn":5,"fix":{"range":[3439,3443],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"clear"},"fix":{"range":[3478,3494],"text":""},"desc":"Remove the console.clear()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3499,3564],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatKeyDisplay'.","line":149,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":149,"endColumn":27},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":151,"column":1,"nodeType":null,"messageId":"delete","endLine":151,"endColumn":5,"fix":{"range":[3704,3708],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":160,"column":1,"nodeType":null,"messageId":"delete","endLine":160,"endColumn":5,"fix":{"range":[4099,4103],"text":""}},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'action' has no 'await' expression.","line":190,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":190,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4797,4857],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'action' has no 'await' expression.","line":200,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":200,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5070,5134],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5299,5340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5972,6016],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6063,6103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6136,6238],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.red('❌·Refresh·failed:'),·error·instanceof·Error·?·error.message·:·String(error)` with `⏎··········chalk.red('❌·Refresh·failed:'),⏎··········error·instanceof·Error·?·error.message·:·String(error)⏎········`","line":249,"column":23,"nodeType":null,"messageId":"replace","endLine":249,"endColumn":109,"fix":{"range":[6150,6236],"text":"\n          chalk.red('❌ Refresh failed:'),\n          error instanceof Error ? error.message : String(error)\n        "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6266,6346],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-use-before-define","severity":2,"message":"'ScopedKeyboardHandler' was used before it was defined.","line":260,"column":16,"nodeType":"Identifier","messageId":"noUseBeforeDefine","endLine":260,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-readonly","severity":1,"message":"Member 'parent' is never reassigned; mark it as `readonly`.","line":268,"column":3,"nodeType":"PropertyDefinition","messageId":"preferReadonly","endLine":268,"endColumn":35,"fix":{"range":[6661,6661],"text":"readonly "}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":269,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":269,"endColumn":31,"fix":{"range":[6685,6685],"text":"\n"}},{"ruleId":"@typescript-eslint/prefer-readonly","severity":1,"message":"Member 'contextName' is never reassigned; mark it as `readonly`.","line":269,"column":3,"nodeType":"PropertyDefinition","messageId":"preferReadonly","endLine":269,"endColumn":31,"fix":{"range":[6696,6696],"text":"readonly "}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":270,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":270,"endColumn":70,"fix":{"range":[6716,6716],"text":"\n"}},{"ruleId":"@typescript-eslint/prefer-readonly","severity":1,"message":"Member 'scopedShortcuts' is never reassigned; mark it as `readonly`.","line":270,"column":3,"nodeType":"PropertyDefinition","messageId":"preferReadonly","endLine":270,"endColumn":70,"fix":{"range":[6727,6727],"text":"readonly "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":285,"column":1,"nodeType":null,"messageId":"delete","endLine":285,"endColumn":5,"fix":{"range":[7128,7132],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎······`","line":295,"column":16,"nodeType":null,"messageId":"insert","endLine":295,"endColumn":16,"fix":{"range":[7386,7386],"text":"\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":331,"column":4,"nodeType":null,"messageId":"insert","endLine":331,"endColumn":4,"fix":{"range":[8124,8124],"text":"\n"}}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":17,"fixableWarningCount":4,"source":"import chalk from 'chalk';\n\nexport interface KeyboardShortcut {\n  key: string;\n  description: string;\n  action: () => Promise<void> | void;\n  global?: boolean;\n}\n\n/**\n * Global keyboard shortcut handler for CLI applications\n */\nexport class KeyboardHandler {\n  private shortcuts: Map<string, KeyboardShortcut> = new Map();\n  private isActive = false;\n  private helpVisible = false;\n  private refreshCallback?: () => Promise<void> | void;\n\n  constructor() {\n    this.setupDefaultShortcuts();\n  }\n\n  /**\n   * Register a new keyboard shortcut\n   */\n  register(shortcut: KeyboardShortcut): void {\n    this.shortcuts.set(shortcut.key, shortcut);\n  }\n\n  /**\n   * Remove a keyboard shortcut\n   */\n  unregister(key: string): void {\n    this.shortcuts.delete(key);\n  }\n\n  /**\n   * Activate global keyboard listening\n   */\n  activate(): void {\n    if (this.isActive) return;\n\n    this.isActive = true;\n    \n    // Set up raw mode for real-time key capture\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true);\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      process.stdin.on('data', this.handleKeyPress.bind(this));\n    }\n  }\n\n  /**\n   * Deactivate global keyboard listening\n   */\n  deactivate(): void {\n    if (!this.isActive) return;\n\n    this.isActive = false;\n    \n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(false);\n      process.stdin.pause();\n      process.stdin.removeAllListeners('data');\n    }\n  }\n\n  /**\n   * Handle key press events\n   */\n  private async handleKeyPress(key: string): Promise<void> {\n    const keyCode = key.charCodeAt(0);\n    \n    // Handle Ctrl+C (exit)\n    if (keyCode === 3) {\n      console.log(chalk.yellow('\\n⚠️  Interrupted by user'));\n      process.exit(130);\n    }\n\n    // Handle specific key combinations\n    const shortcut = this.shortcuts.get(key);\n    if (shortcut) {\n      try {\n        await shortcut.action();\n      } catch (error) {\n        console.error(chalk.red(`Error executing shortcut ${key}:`), error);\n      }\n    }\n  }\n\n  /**\n   * Show help overlay with all available shortcuts\n   */\n  showHelp(): void {\n    if (this.helpVisible) {\n      this.hideHelp();\n      return;\n    }\n\n    this.helpVisible = true;\n    console.clear();\n    \n    console.log(chalk.cyan.bold('\\n📋 Keyboard Shortcuts\\n'));\n    console.log(chalk.gray('─'.repeat(50)));\n    \n    const globalShortcuts = Array.from(this.shortcuts.values())\n      .filter(s => s.global)\n      .sort((a, b) => a.key.localeCompare(b.key));\n\n    const localShortcuts = Array.from(this.shortcuts.values())\n      .filter(s => !s.global)\n      .sort((a, b) => a.key.localeCompare(b.key));\n\n    if (globalShortcuts.length > 0) {\n      console.log(chalk.yellow.bold('\\nGlobal Shortcuts:'));\n      globalShortcuts.forEach(shortcut => {\n        const keyDisplay = this.formatKeyDisplay(shortcut.key);\n        console.log(`  ${keyDisplay} - ${shortcut.description}`);\n      });\n    }\n\n    if (localShortcuts.length > 0) {\n      console.log(chalk.yellow.bold('\\nContext Shortcuts:'));\n      localShortcuts.forEach(shortcut => {\n        const keyDisplay = this.formatKeyDisplay(shortcut.key);\n        console.log(`  ${keyDisplay} - ${shortcut.description}`);\n      });\n    }\n\n    console.log(chalk.gray('\\n─'.repeat(50)));\n    console.log(chalk.gray('Press ? again to hide help, Ctrl+C to exit\\n'));\n  }\n\n  /**\n   * Hide help overlay\n   */\n  hideHelp(): void {\n    if (!this.helpVisible) return;\n    \n    this.helpVisible = false;\n    console.clear();\n    console.log(chalk.gray('Help hidden. Press ? to show again.\\n'));\n  }\n\n  /**\n   * Format key display for help\n   */\n  private formatKeyDisplay(key: string): string {\n    const keyCode = key.charCodeAt(0);\n    \n    if (keyCode === 3) return chalk.cyan('Ctrl+C');\n    if (keyCode === 18) return chalk.cyan('Ctrl+R');\n    if (keyCode === 6) return chalk.cyan('Ctrl+F');\n    if (keyCode === 14) return chalk.cyan('Ctrl+N');\n    if (key === '?') return chalk.cyan('?');\n    if (key === 'q') return chalk.cyan('q');\n    if (key === 'r') return chalk.cyan('r');\n    if (key === '/') return chalk.cyan('/');\n    \n    return chalk.cyan(key);\n  }\n\n  /**\n   * Set up default global shortcuts\n   */\n  private setupDefaultShortcuts(): void {\n    // Help shortcut\n    this.register({\n      key: '?',\n      description: 'Show/hide keyboard shortcuts help',\n      action: () => this.showHelp(),\n      global: true,\n    });\n\n    // Refresh shortcut (Ctrl+R)\n    this.register({\n      key: String.fromCharCode(18), // Ctrl+R\n      description: 'Refresh current view',\n      action: async () => {\n        await this.executeRefresh();\n      },\n      global: true,\n    });\n\n    // Search shortcut (Ctrl+F or /)\n    this.register({\n      key: '/',\n      description: 'Search/filter',\n      action: async () => {\n        console.log(chalk.cyan('🔍 Search mode (not implemented)'));\n      },\n      global: true,\n    });\n\n    // New item shortcut (Ctrl+N)\n    this.register({\n      key: String.fromCharCode(14), // Ctrl+N\n      description: 'Create new item',\n      action: async () => {\n        console.log(chalk.cyan('📝 Create new item (not implemented)'));\n      },\n      global: true,\n    });\n\n    // Quit shortcut\n    this.register({\n      key: 'q',\n      description: 'Quit application',\n      action: () => {\n        console.log(chalk.yellow('👋 Goodbye!'));\n        process.exit(0);\n      },\n      global: true,\n    });\n  }\n\n  /**\n   * Get all registered shortcuts\n   */\n  getShortcuts(): KeyboardShortcut[] {\n    return Array.from(this.shortcuts.values());\n  }\n\n  /**\n   * Check if handler is currently active\n   */\n  isActivated(): boolean {\n    return this.isActive;\n  }\n\n  /**\n   * Set refresh callback for Ctrl+R functionality\n   */\n  setRefreshCallback(callback: () => Promise<void> | void): void {\n    this.refreshCallback = callback;\n  }\n\n  /**\n   * Execute refresh action\n   */\n  private async executeRefresh(): Promise<void> {\n    if (this.refreshCallback) {\n      try {\n        console.log(chalk.cyan('🔄 Refreshing...'));\n        await this.refreshCallback();\n        console.log(chalk.green('✅ Refreshed'));\n      } catch (error) {\n        console.error(chalk.red('❌ Refresh failed:'), error instanceof Error ? error.message : String(error));\n      }\n    } else {\n      console.log(chalk.yellow('⚠️  No refresh action available in current context'));\n    }\n  }\n\n  /**\n   * Create a scoped keyboard handler for specific contexts\n   */\n  createScope(contextName: string): ScopedKeyboardHandler {\n    return new ScopedKeyboardHandler(this, contextName);\n  }\n}\n\n/**\n * Scoped keyboard handler for specific UI contexts\n */\nexport class ScopedKeyboardHandler {\n  private parent: KeyboardHandler;\n  private contextName: string;\n  private scopedShortcuts: Map<string, KeyboardShortcut> = new Map();\n\n  constructor(parent: KeyboardHandler, contextName: string) {\n    this.parent = parent;\n    this.contextName = contextName;\n  }\n\n  /**\n   * Register a context-specific shortcut\n   */\n  register(shortcut: Omit<KeyboardShortcut, 'global'>): void {\n    const scopedShortcut: KeyboardShortcut = {\n      ...shortcut,\n      global: false,\n    };\n    \n    this.scopedShortcuts.set(shortcut.key, scopedShortcut);\n    this.parent.register(scopedShortcut);\n  }\n\n  /**\n   * Activate this scope (removes other scope shortcuts)\n   */\n  activate(): void {\n    // Clean up previous scope shortcuts\n    this.parent.getShortcuts()\n      .filter(s => !s.global)\n      .forEach(s => this.parent.unregister(s.key));\n\n    // Add this scope's shortcuts\n    this.scopedShortcuts.forEach(shortcut => {\n      this.parent.register(shortcut);\n    });\n  }\n\n  /**\n   * Deactivate this scope\n   */\n  deactivate(): void {\n    this.scopedShortcuts.forEach((_, key) => {\n      this.parent.unregister(key);\n    });\n  }\n}\n\n// Export singleton instance\nexport const keyboardHandler = new KeyboardHandler();\n\n// Cleanup on process exit\nprocess.on('exit', () => {\n  keyboardHandler.deactivate();\n});\n\nprocess.on('SIGINT', () => {\n  keyboardHandler.deactivate();\n  process.exit(130);\n});\n\nprocess.on('SIGTERM', () => {\n  keyboardHandler.deactivate();\n  process.exit(143);\n});","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/secure-cli-wrapper.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`chalk` import should occur before import of `./command-injection-prevention`","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":27,"fix":{"range":[205,378],"text":"import chalk from 'chalk';\nimport { commandInjectionPrevention, validateCommand } from './command-injection-prevention';\nimport { inputSanitizer } from './input-sanitizer';\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":35,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":35,"endColumn":48,"fix":{"range":[995,995],"text":"\n"}},{"ruleId":"lines-between-class-members","severity":2,"message":"Expected blank line between class members.","line":36,"column":3,"nodeType":"PropertyDefinition","messageId":"always","endLine":36,"endColumn":34,"fix":{"range":[1043,1043],"text":"\n"}},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":90,"column":18,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":90,"endColumn":47,"fix":{"range":[2607,2636],"text":"`${arg.substring(0, 100)  }...`"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Argument·${index}·exceeds·maximum·length·(${this.config.maxArgumentLength})`` with `⏎············`Argument·${index}·exceeds·maximum·length·(${this.config.maxArgumentLength})`⏎··········`","line":94,"column":27,"nodeType":null,"messageId":"replace","endLine":94,"endColumn":104,"fix":{"range":[2740,2817],"text":"\n            `Argument ${index} exceeds maximum length (${this.config.maxArgumentLength})`\n          "}},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to function parameter 'arg'.","line":97,"column":9,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":97,"endColumn":12},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Blocked·pattern·detected·in·argument·${index}:·${blockedPattern.source}`` with `⏎············`Blocked·pattern·detected·in·argument·${index}:·${blockedPattern.source}`⏎··········`","line":110,"column":27,"nodeType":null,"messageId":"replace","endLine":110,"endColumn":100,"fix":{"range":[3375,3448],"text":"\n            `Blocked pattern detected in argument ${index}: ${blockedPattern.source}`\n          "}},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to function parameter 'arg'.","line":113,"column":9,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":113,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4589,4592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4589,4592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":146,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":146,"endColumn":71},{"ruleId":"arrow-body-style","severity":2,"message":"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","line":146,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"unexpectedSingleBlock","endLine":211,"endColumn":6,"fix":{"range":[4624,7250],"text":"originalAction(async (...args: any[]) => {\n        try {\n          // Extract options and command arguments\n          const options = args[args.length - 1];\n          const commandArgs = args.slice(0, -1);\n\n          // Validate command arguments\n          if (this.config.enableCommandValidation && commandArgs.length > 0) {\n            const stringArgs = commandArgs.map(arg => String(arg));\n            const validation = validateCommand(name, stringArgs);\n            \n            if (!validation.safe) {\n              this.logSecurityEvent({\n                type: 'command_blocked',\n                details: `Command validation failed: ${validation.blockedPatterns.join(', ')}`,\n                input: `${name} ${stringArgs.join(' ')}`,\n                risk: 'critical',\n              });\n              throw new Error(`Command blocked: ${validation.blockedPatterns.join(', ')}`);\n            }\n\n            if (validation.warnings.length > 0) {\n              this.logSecurityEvent({\n                type: 'suspicious_pattern',\n                details: `Command warnings: ${validation.warnings.join(', ')}`,\n                input: `${name} ${stringArgs.join(' ')}`,\n                risk: 'medium',\n              });\n              if (this.config.logSecurityEvents) {\n                console.warn(chalk.yellow(`⚠️  Security warnings: ${validation.warnings.join(', ')}`));\n              }\n            }\n          }\n\n          // Check for suspicious patterns in options\n          if (options && typeof options === 'object') {\n            for (const [key, value] of Object.entries(options)) {\n              if (typeof value === 'string') {\n                const suspicious = inputSanitizer.detectSuspiciousPatterns(value);\n                if (suspicious.suspicious) {\n                  this.logSecurityEvent({\n                    type: 'suspicious_pattern',\n                    details: `Suspicious pattern in option ${key}: ${suspicious.patterns.join(', ')}`,\n                    input: value,\n                    risk: 'medium',\n                  });\n                  if (this.config.strictMode) {\n                    throw new Error(`Suspicious pattern detected in option ${key}`);\n                  }\n                }\n              }\n            }\n          }\n\n          // Execute the original function\n          return await fn(...args);\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('blocked')) {\n            console.error(chalk.red(`🚫 Security: ${error.message}`));\n            process.exit(1);\n          }\n          throw error;\n        }\n      })"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4670,4673],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4670,4673],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":150,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":150,"endColumn":48},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `············`","line":157,"column":1,"nodeType":null,"messageId":"delete","endLine":157,"endColumn":13,"fix":{"range":[5099,5111],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5927,6014],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `chalk.yellow(`⚠️··Security·warnings:·${validation.warnings.join(',·')}`)` with `⏎··················chalk.yellow(`⚠️··Security·warnings:·${validation.warnings.join(',·')}`)⏎················`","line":176,"column":30,"nodeType":null,"messageId":"replace","endLine":176,"endColumn":102,"fix":{"range":[5940,6012],"text":"\n                  chalk.yellow(`⚠️  Security warnings: ${validation.warnings.join(', ')}`)\n                "}},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":183,"column":13,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":198,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{ [s: string]: unknown; } | ArrayLike<unknown>`.","line":183,"column":55,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":183,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any` array type.","line":202,"column":27,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":202,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7102,7160],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":221,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":221,"endColumn":50},{"ruleId":"no-underscore-dangle","severity":2,"message":"Unexpected dangling '_' in '_actionHandler'.","line":221,"column":28,"nodeType":"MemberExpression","messageId":"unexpectedUnderscore","endLine":221,"endColumn":50},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":222,"column":1,"nodeType":null,"messageId":"delete","endLine":222,"endColumn":5,"fix":{"range":[7468,7472],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7536,7539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7536,7539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎············args.filter(arg·=>·typeof·arg·===·'string')⏎··········` with `args.filter(arg·=>·typeof·arg·===·'string')`","line":227,"column":56,"nodeType":null,"messageId":"replace","endLine":229,"endColumn":11,"fix":{"range":[7652,7719],"text":"args.filter(arg => typeof arg === 'string')"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7819,7900],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":236,"column":11,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":236,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of an `any` typed value.","line":236,"column":24,"nodeType":"Identifier","messageId":"unsafeCall","endLine":236,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8134,8192],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8908,9022],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":301,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":301,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9661,9663],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":302,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":302,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9731,9733],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":339,"column":1,"nodeType":null,"messageId":"delete","endLine":339,"endColumn":5,"fix":{"range":[10541,10545],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":343,"column":1,"nodeType":null,"messageId":"delete","endLine":343,"endColumn":5,"fix":{"range":[10741,10745],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":351,"column":1,"nodeType":null,"messageId":"delete","endLine":351,"endColumn":7,"fix":{"range":[11002,11008],"text":""}},{"ruleId":"prefer-const","severity":2,"message":"'report' is never reassigned. Use 'const' instead.","line":375,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":375,"endColumn":15,"fix":{"range":[11549,12517],"text":"const report = `\n🔒 CLI Security Report\n===================\n\nTotal Security Events: ${stats.totalEvents}\n\nEvents by Type:\n${Object.entries(stats.eventsByType)\n  .map(([type, count]) => `  ${type}: ${count}`)\n  .join('\\n')}\n\nEvents by Risk Level:\n${Object.entries(stats.eventsByRisk)\n  .map(([risk, count]) => `  ${risk}: ${count}`)\n  .join('\\n')}\n\nRecent Events (last 10):\n${recentEvents\n  .map(\n    event =>\n      `  ${event.timestamp.toISOString()} [${event.risk.toUpperCase()}] ${event.type}: ${event.details}`\n  )\n  .join('\\n')}\n\nSecurity Configuration:\n  Input Sanitization: ${this.config.enableInputSanitization ? 'Enabled' : 'Disabled'}\n  Command Validation: ${this.config.enableCommandValidation ? 'Enabled' : 'Disabled'}\n  Strict Mode: ${this.config.strictMode ? 'Enabled' : 'Disabled'}\n  Max Argument Length: ${this.config.maxArgumentLength}\n  Allowed Commands: ${this.config.allowedCommands.length}\n  Blocked Patterns: ${this.config.blockedPatterns.length}\n`;"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'npm',·'yarn',·'pnpm',·'node',·'tsc',·'eslint',` with `⏎····'npm',⏎····'yarn',⏎····'pnpm',⏎····'node',⏎····'tsc',⏎····'eslint',⏎···`","line":420,"column":11,"nodeType":null,"messageId":"replace","endLine":420,"endColumn":59,"fix":{"range":[12856,12904],"text":"\n    'npm',\n    'yarn',\n    'pnpm',\n    'node',\n    'tsc',\n    'eslint',\n   "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·'ls',·'grep',·'find',·'head',·'tail',·'wc',·'sort',` with `⏎····'ls',⏎····'grep',⏎····'find',⏎····'head',⏎····'tail',⏎····'wc',⏎····'sort',⏎···`","line":421,"column":11,"nodeType":null,"messageId":"replace","endLine":421,"endColumn":63,"fix":{"range":[12927,12979],"text":"\n    'ls',\n    'grep',\n    'find',\n    'head',\n    'tail',\n    'wc',\n    'sort',\n   "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":425,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":425,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":428,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":428,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":430,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":430,"endColumn":55},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to property of function parameter 'program'.","line":444,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":444,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":444,"column":19,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":444,"endColumn":27},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":444,"column":19,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":444,"endColumn":27},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `·`","line":444,"column":27,"nodeType":null,"messageId":"insert","endLine":444,"endColumn":27,"fix":{"range":[13811,13811],"text":" "}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":444,"column":27,"nodeType":"FunctionExpression","messageId":"missingSpace","endLine":444,"endColumn":28,"fix":{"range":[13811,13811],"text":" "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":444,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13848,13851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13848,13851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":445,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":445,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[13877,13879],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":446,"column":1,"nodeType":null,"messageId":"delete","endLine":446,"endColumn":5,"fix":{"range":[13894,13898],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":449,"column":1,"nodeType":null,"messageId":"delete","endLine":449,"endColumn":5,"fix":{"range":[13999,14003],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":451,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":451,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14038,14120],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":452,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":452,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14127,14200],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[14279,14364],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14656,14711],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":2,"message":"Missing radix parameter.","line":477,"column":65,"nodeType":"CallExpression","messageId":"missingRadix","endLine":477,"endColumn":80,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14926,14926],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":479,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":479,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14976,15034],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":483,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":483,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15066,15120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":492,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":492,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15330,15496],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15669,15723],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":513,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":513,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15895,15949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15956,16001],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":518,"column":2,"nodeType":null,"messageId":"insert","endLine":518,"endColumn":2,"fix":{"range":[16030,16030],"text":"\n"}}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":21,"fixableWarningCount":1,"source":"/**\n * Secure CLI Wrapper\n * Integrates command injection prevention and input sanitization for the entire CLI\n * Addresses TASK-120: Command injection prevention\n */\n\nimport { Command } from 'commander';\nimport { commandInjectionPrevention, validateCommand } from './command-injection-prevention';\nimport { inputSanitizer } from './input-sanitizer';\nimport chalk from 'chalk';\n\nexport interface SecurityConfig {\n  enableInputSanitization: boolean;\n  enableCommandValidation: boolean;\n  logSecurityEvents: boolean;\n  strictMode: boolean;\n  maxArgumentLength: number;\n  allowedCommands: string[];\n  blockedPatterns: RegExp[];\n}\n\nexport interface SecurityEvent {\n  timestamp: Date;\n  type: 'input_sanitized' | 'command_blocked' | 'suspicious_pattern' | 'validation_failed';\n  details: string;\n  input: string;\n  risk: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Secure CLI wrapper with comprehensive protection\n */\nexport class SecureCliWrapper {\n  private static instance: SecureCliWrapper;\n  private securityEvents: SecurityEvent[] = [];\n  private config: SecurityConfig;\n\n  constructor(config: Partial<SecurityConfig> = {}) {\n    this.config = {\n      enableInputSanitization: true,\n      enableCommandValidation: true,\n      logSecurityEvents: true,\n      strictMode: false,\n      maxArgumentLength: 1000,\n      allowedCommands: [],\n      blockedPatterns: [\n        /rm\\s+-rf/i,\n        /curl.*\\|.*sh/i,\n        /wget.*\\|.*sh/i,\n        /eval\\s*\\(/i,\n        /exec\\s*\\(/i,\n        /system\\s*\\(/i,\n        /passthru\\s*\\(/i,\n        /shell_exec\\s*\\(/i,\n        /`[^`]*`/,\n        /\\$\\([^)]*\\)/,\n        /<\\([^)]*\\)/,\n      ],\n      ...config,\n    };\n\n    // Configure command injection prevention with CLI-specific settings\n    if (this.config.allowedCommands.length > 0) {\n      this.config.allowedCommands.forEach(cmd => {\n        commandInjectionPrevention.addAllowedCommand(cmd);\n      });\n    }\n  }\n\n  static getInstance(config?: Partial<SecurityConfig>): SecureCliWrapper {\n    if (!SecureCliWrapper.instance) {\n      SecureCliWrapper.instance = new SecureCliWrapper(config);\n    }\n    return SecureCliWrapper.instance;\n  }\n\n  /**\n   * Sanitize and validate CLI arguments\n   */\n  sanitizeArguments(args: string[]): { sanitized: string[]; warnings: string[] } {\n    const sanitized: string[] = [];\n    const warnings: string[] = [];\n\n    args.forEach((arg, index) => {\n      // Check length\n      if (arg.length > this.config.maxArgumentLength) {\n        this.logSecurityEvent({\n          type: 'validation_failed',\n          details: `Argument ${index} exceeds maximum length`,\n          input: arg.substring(0, 100) + '...',\n          risk: 'medium',\n        });\n        if (this.config.strictMode) {\n          throw new Error(`Argument ${index} exceeds maximum length (${this.config.maxArgumentLength})`);\n        }\n        warnings.push(`Argument ${index} truncated`);\n        arg = arg.substring(0, this.config.maxArgumentLength);\n      }\n\n      // Check for blocked patterns\n      const blockedPattern = this.config.blockedPatterns.find(pattern => pattern.test(arg));\n      if (blockedPattern) {\n        this.logSecurityEvent({\n          type: 'command_blocked',\n          details: `Blocked pattern detected: ${blockedPattern.source}`,\n          input: arg,\n          risk: 'high',\n        });\n        if (this.config.strictMode) {\n          throw new Error(`Blocked pattern detected in argument ${index}: ${blockedPattern.source}`);\n        }\n        warnings.push(`Blocked pattern removed from argument ${index}`);\n        arg = arg.replace(blockedPattern, '');\n      }\n\n      // Sanitize input if enabled\n      if (this.config.enableInputSanitization) {\n        const sanitizationResult = inputSanitizer.sanitizeCliArgument(arg);\n        if (sanitizationResult.modified) {\n          this.logSecurityEvent({\n            type: 'input_sanitized',\n            details: `Argument ${index} sanitized: ${sanitizationResult.warnings.join(', ')}`,\n            input: arg,\n            risk: 'low',\n          });\n          warnings.push(`Argument ${index} sanitized`);\n        }\n        sanitized.push(sanitizationResult.sanitized);\n      } else {\n        sanitized.push(arg);\n      }\n    });\n\n    return { sanitized, warnings };\n  }\n\n  /**\n   * Create a secure command wrapper\n   */\n  createSecureCommand(name: string, description: string): Command {\n    const command = new Command(name);\n    command.description(description);\n\n    // Override the action method to add security checks\n    const originalAction = command.action.bind(command);\n    command.action = (fn: (...args: any[]) => void | Promise<void>) => {\n      return originalAction(async (...args: any[]) => {\n        try {\n          // Extract options and command arguments\n          const options = args[args.length - 1];\n          const commandArgs = args.slice(0, -1);\n\n          // Validate command arguments\n          if (this.config.enableCommandValidation && commandArgs.length > 0) {\n            const stringArgs = commandArgs.map(arg => String(arg));\n            const validation = validateCommand(name, stringArgs);\n            \n            if (!validation.safe) {\n              this.logSecurityEvent({\n                type: 'command_blocked',\n                details: `Command validation failed: ${validation.blockedPatterns.join(', ')}`,\n                input: `${name} ${stringArgs.join(' ')}`,\n                risk: 'critical',\n              });\n              throw new Error(`Command blocked: ${validation.blockedPatterns.join(', ')}`);\n            }\n\n            if (validation.warnings.length > 0) {\n              this.logSecurityEvent({\n                type: 'suspicious_pattern',\n                details: `Command warnings: ${validation.warnings.join(', ')}`,\n                input: `${name} ${stringArgs.join(' ')}`,\n                risk: 'medium',\n              });\n              if (this.config.logSecurityEvents) {\n                console.warn(chalk.yellow(`⚠️  Security warnings: ${validation.warnings.join(', ')}`));\n              }\n            }\n          }\n\n          // Check for suspicious patterns in options\n          if (options && typeof options === 'object') {\n            for (const [key, value] of Object.entries(options)) {\n              if (typeof value === 'string') {\n                const suspicious = inputSanitizer.detectSuspiciousPatterns(value);\n                if (suspicious.suspicious) {\n                  this.logSecurityEvent({\n                    type: 'suspicious_pattern',\n                    details: `Suspicious pattern in option ${key}: ${suspicious.patterns.join(', ')}`,\n                    input: value,\n                    risk: 'medium',\n                  });\n                  if (this.config.strictMode) {\n                    throw new Error(`Suspicious pattern detected in option ${key}`);\n                  }\n                }\n              }\n            }\n          }\n\n          // Execute the original function\n          return await fn(...args);\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('blocked')) {\n            console.error(chalk.red(`🚫 Security: ${error.message}`));\n            process.exit(1);\n          }\n          throw error;\n        }\n      });\n    };\n\n    return command;\n  }\n\n  /**\n   * Wrap an existing command with security features\n   */\n  secureCommand(command: Command): Command {\n    // Store original action\n    const originalAction = command._actionHandler;\n    \n    if (originalAction) {\n      command.action(async (...args: any[]) => {\n        try {\n          // Apply security checks\n          const sanitizedArgs = this.sanitizeArguments(\n            args.filter(arg => typeof arg === 'string')\n          );\n\n          if (sanitizedArgs.warnings.length > 0 && this.config.logSecurityEvents) {\n            console.warn(chalk.yellow(`⚠️  Security: ${sanitizedArgs.warnings.join(', ')}`));\n          }\n\n          // Execute original action with sanitized args\n          return await originalAction(...args);\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('blocked')) {\n            console.error(chalk.red(`🚫 Security: ${error.message}`));\n            process.exit(1);\n          }\n          throw error;\n        }\n      });\n    }\n\n    return command;\n  }\n\n  /**\n   * Log security events\n   */\n  private logSecurityEvent(event: Omit<SecurityEvent, 'timestamp'>): void {\n    const fullEvent: SecurityEvent = {\n      ...event,\n      timestamp: new Date(),\n    };\n\n    this.securityEvents.push(fullEvent);\n\n    // Keep only last 1000 events\n    if (this.securityEvents.length > 1000) {\n      this.securityEvents = this.securityEvents.slice(-1000);\n    }\n\n    if (this.config.logSecurityEvents) {\n      const color = {\n        low: chalk.blue,\n        medium: chalk.yellow,\n        high: chalk.magenta,\n        critical: chalk.red,\n      }[event.risk];\n\n      console.log(\n        color(`🔒 Security [${event.risk.toUpperCase()}]: ${event.type} - ${event.details}`)\n      );\n    }\n  }\n\n  /**\n   * Get security events\n   */\n  getSecurityEvents(limit?: number): SecurityEvent[] {\n    const events = this.securityEvents.slice().reverse();\n    return limit ? events.slice(0, limit) : events;\n  }\n\n  /**\n   * Get security statistics\n   */\n  getSecurityStats(): {\n    totalEvents: number;\n    eventsByType: Record<string, number>;\n    eventsByRisk: Record<string, number>;\n    lastEvent?: SecurityEvent;\n  } {\n    const eventsByType: Record<string, number> = {};\n    const eventsByRisk: Record<string, number> = {};\n\n    this.securityEvents.forEach(event => {\n      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;\n      eventsByRisk[event.risk] = (eventsByRisk[event.risk] || 0) + 1;\n    });\n\n    return {\n      totalEvents: this.securityEvents.length,\n      eventsByType,\n      eventsByRisk,\n      lastEvent: this.securityEvents[this.securityEvents.length - 1],\n    };\n  }\n\n  /**\n   * Clear security events\n   */\n  clearSecurityEvents(): void {\n    this.securityEvents = [];\n  }\n\n  /**\n   * Update security configuration\n   */\n  updateConfig(newConfig: Partial<SecurityConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Get current security configuration\n   */\n  getConfig(): SecurityConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Validate program arguments before execution\n   */\n  validateProgramArgs(argv: string[]): { safe: boolean; sanitized: string[]; warnings: string[] } {\n    const sanitizedResult = this.sanitizeArguments(argv);\n    \n    // Additional validation for the entire command line\n    const fullCommand = sanitizedResult.sanitized.join(' ');\n    const suspicious = inputSanitizer.detectSuspiciousPatterns(fullCommand);\n    \n    if (suspicious.suspicious) {\n      this.logSecurityEvent({\n        type: 'suspicious_pattern',\n        details: `Command line contains suspicious patterns: ${suspicious.patterns.join(', ')}`,\n        input: fullCommand,\n        risk: 'high',\n      });\n      \n      if (this.config.strictMode) {\n        return {\n          safe: false,\n          sanitized: sanitizedResult.sanitized,\n          warnings: [...sanitizedResult.warnings, 'Suspicious patterns detected'],\n        };\n      }\n    }\n\n    return {\n      safe: true,\n      sanitized: sanitizedResult.sanitized,\n      warnings: sanitizedResult.warnings,\n    };\n  }\n\n  /**\n   * Create security report\n   */\n  generateSecurityReport(): string {\n    const stats = this.getSecurityStats();\n    const recentEvents = this.getSecurityEvents(10);\n\n    let report = `\n🔒 CLI Security Report\n===================\n\nTotal Security Events: ${stats.totalEvents}\n\nEvents by Type:\n${Object.entries(stats.eventsByType)\n  .map(([type, count]) => `  ${type}: ${count}`)\n  .join('\\n')}\n\nEvents by Risk Level:\n${Object.entries(stats.eventsByRisk)\n  .map(([risk, count]) => `  ${risk}: ${count}`)\n  .join('\\n')}\n\nRecent Events (last 10):\n${recentEvents\n  .map(\n    event =>\n      `  ${event.timestamp.toISOString()} [${event.risk.toUpperCase()}] ${event.type}: ${event.details}`\n  )\n  .join('\\n')}\n\nSecurity Configuration:\n  Input Sanitization: ${this.config.enableInputSanitization ? 'Enabled' : 'Disabled'}\n  Command Validation: ${this.config.enableCommandValidation ? 'Enabled' : 'Disabled'}\n  Strict Mode: ${this.config.strictMode ? 'Enabled' : 'Disabled'}\n  Max Argument Length: ${this.config.maxArgumentLength}\n  Allowed Commands: ${this.config.allowedCommands.length}\n  Blocked Patterns: ${this.config.blockedPatterns.length}\n`;\n\n    return report;\n  }\n}\n\n// Export singleton instance and utilities\nexport const secureCliWrapper = SecureCliWrapper.getInstance({\n  enableInputSanitization: true,\n  enableCommandValidation: true,\n  logSecurityEvents: process.env.NODE_ENV !== 'production',\n  strictMode: false,\n  maxArgumentLength: 1000,\n  allowedCommands: [\n    'git', 'npm', 'yarn', 'pnpm', 'node', 'tsc', 'eslint', 'prettier',\n    'cat', 'ls', 'grep', 'find', 'head', 'tail', 'wc', 'sort', 'uniq',\n  ],\n});\n\nexport const createSecureCommand = (name: string, description: string) =>\n  secureCliWrapper.createSecureCommand(name, description);\n\nexport const secureCommand = (command: Command) => secureCliWrapper.secureCommand(command);\n\nexport const validateProgramArgs = (argv: string[]) => secureCliWrapper.validateProgramArgs(argv);\n\n/**\n * Security middleware for Commander.js programs\n */\nexport function addSecurityMiddleware(program: Command): Command {\n  // Add global security options\n  program\n    .option('--security-report', 'show security report')\n    .option('--security-strict', 'enable strict security mode')\n    .option('--security-events [limit]', 'show recent security events');\n\n  // Hook into the program's action handling\n  const originalParse = program.parse.bind(program);\n  program.parse = function(argv?: readonly string[], options?: any) {\n    const args = argv || process.argv;\n    \n    // Validate arguments before parsing\n    const validation = validateProgramArgs(args.slice(2));\n    \n    if (!validation.safe) {\n      console.error(chalk.red('🚫 Security: Command blocked due to security concerns'));\n      console.error(chalk.yellow('Warnings:', validation.warnings.join(', ')));\n      process.exit(1);\n    }\n\n    if (validation.warnings.length > 0) {\n      console.warn(chalk.yellow('⚠️  Security warnings:', validation.warnings.join(', ')));\n    }\n\n    return originalParse.call(this, argv, options);\n  };\n\n  // Add security command\n  const securityCmd = program.command('security').description('Security management commands');\n\n  securityCmd\n    .command('report')\n    .description('Show security report')\n    .action(() => {\n      console.log(secureCliWrapper.generateSecurityReport());\n    });\n\n  securityCmd\n    .command('events [limit]')\n    .description('Show recent security events')\n    .action((limit?: string) => {\n      const events = secureCliWrapper.getSecurityEvents(limit ? parseInt(limit) : 20);\n      if (events.length === 0) {\n        console.log(chalk.green('✅ No security events recorded'));\n        return;\n      }\n\n      console.log(chalk.blue('🔒 Recent Security Events:'));\n      events.forEach(event => {\n        const color = {\n          low: chalk.blue,\n          medium: chalk.yellow,\n          high: chalk.magenta,\n          critical: chalk.red,\n        }[event.risk];\n\n        console.log(\n          `${event.timestamp.toISOString()} ${color(`[${event.risk.toUpperCase()}]`)} ${\n            event.type\n          }: ${event.details}`\n        );\n      });\n    });\n\n  securityCmd\n    .command('clear')\n    .description('Clear security event log')\n    .action(() => {\n      secureCliWrapper.clearSecurityEvents();\n      console.log(chalk.green('✅ Security events cleared'));\n    });\n\n  securityCmd\n    .command('config')\n    .description('Show security configuration')\n    .action(() => {\n      const config = secureCliWrapper.getConfig();\n      console.log(chalk.blue('🔧 Security Configuration:'));\n      console.log(JSON.stringify(config, null, 2));\n    });\n\n  return program;\n}","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/spinner.ts","messages":[{"ruleId":"max-classes-per-file","severity":2,"message":"File has too many classes (2). Maximum allowed is 1.","line":1,"column":1,"nodeType":"Program","messageId":"maximumExceeded","endLine":361,"endColumn":1},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `message:·string,·public·code:·string` with `⏎····message:·string,⏎····public·code:·string⏎··`","line":8,"column":15,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":51,"fix":{"range":[154,190],"text":"\n    message: string,\n    public code: string\n  "}},{"ruleId":"prefer-template","severity":1,"message":"Unexpected string concatenation.","line":43,"column":14,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":43,"endColumn":63,"fix":{"range":[985,1034],"text":"`${text.substring(0, this.maxTextLength - 3)  }...`"}},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'safeOperation'.","line":52,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":52,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1249,1349],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Spinner·operation·failed:·${error·instanceof·Error·?·error.message·:·String(error)}`` with `⏎········`Spinner·operation·failed:·${error·instanceof·Error·?·error.message·:·String(error)}`⏎······`","line":56,"column":20,"nodeType":null,"messageId":"replace","endLine":56,"endColumn":105,"fix":{"range":[1262,1347],"text":"\n        `Spinner operation failed: ${error instanceof Error ? error.message : String(error)}`\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `()·=>·⏎` with `⏎········()·=>⏎··`","line":72,"column":41,"nodeType":null,"messageId":"replace","endLine":73,"endColumn":1,"fix":{"range":[1634,1641],"text":"\n        () =>\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":74,"column":1,"nodeType":null,"messageId":"insert","endLine":74,"endColumn":1,"fix":{"range":[1655,1655],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··········` with `············`","line":75,"column":1,"nodeType":null,"messageId":"replace","endLine":75,"endColumn":11,"fix":{"range":[1686,1696],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":76,"column":1,"nodeType":null,"messageId":"insert","endLine":76,"endColumn":1,"fix":{"range":[1711,1711],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··········` with `············`","line":77,"column":1,"nodeType":null,"messageId":"replace","endLine":77,"endColumn":11,"fix":{"range":[1738,1748],"text":"            "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":78,"column":1,"nodeType":null,"messageId":"insert","endLine":78,"endColumn":1,"fix":{"range":[1766,1766],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Failed·to·start·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`,·'START_FAILED'` with `⏎········`Failed·to·start·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`,⏎········'START_FAILED'⏎······`","line":91,"column":30,"nodeType":null,"messageId":"replace","endLine":91,"endColumn":130,"fix":{"range":[2101,2201],"text":"\n        `Failed to start spinner: ${error instanceof Error ? error.message : String(error)}`,\n        'START_FAILED'\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Failed·to·update·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`,·'UPDATE_FAILED'` with `⏎········`Failed·to·update·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`,⏎········'UPDATE_FAILED'⏎······`","line":118,"column":30,"nodeType":null,"messageId":"replace","endLine":118,"endColumn":132,"fix":{"range":[2824,2926],"text":"\n        `Failed to update spinner: ${error instanceof Error ? error.message : String(error)}`,\n        'UPDATE_FAILED'\n      "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3141,3193],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3678,3776],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Failed·to·stop·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`` with `⏎········`Failed·to·stop·spinner:·${error·instanceof·Error·?·error.message·:·String(error)}`⏎······`","line":150,"column":20,"nodeType":null,"messageId":"replace","endLine":150,"endColumn":103,"fix":{"range":[3691,3774],"text":"\n        `Failed to stop spinner: ${error instanceof Error ? error.message : String(error)}`\n      "}},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Expected non-Promise value in a boolean conditional.","line":239,"column":10,"nodeType":"Identifier","messageId":"conditional","endLine":239,"endColumn":17},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":269,"column":1,"nodeType":null,"messageId":"delete","endLine":269,"endColumn":7,"fix":{"range":[6209,6215],"text":""}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6340,6342],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":272,"column":1,"nodeType":null,"messageId":"delete","endLine":272,"endColumn":7,"fix":{"range":[6380,6386],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6589,6592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6589,6592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6814,6817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6814,6817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":299,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":299,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[7050,7052],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7076,7079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7076,7079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":303,"column":39,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":303,"endColumn":42},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `······`","line":305,"column":1,"nodeType":null,"messageId":"delete","endLine":305,"endColumn":7,"fix":{"range":[7195,7201],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace ``Invalid·step·at·index·${i}:·action·must·be·a·function`,·'INVALID_STEP'` with `⏎··········`Invalid·step·at·index·${i}:·action·must·be·a·function`,⏎··········'INVALID_STEP'⏎········`","line":307,"column":40,"nodeType":null,"messageId":"replace","endLine":307,"endColumn":111,"fix":{"range":[7297,7368],"text":"\n          `Invalid step at index ${i}: action must be a function`,\n          'INVALID_STEP'\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `········`","line":309,"column":1,"nodeType":null,"messageId":"delete","endLine":309,"endColumn":9,"fix":{"range":[7399,7407],"text":""}},{"ruleId":"no-continue","severity":2,"message":"Unexpected use of continue statement.","line":313,"column":9,"nodeType":"ContinueStatement","messageId":"unexpected","endLine":313,"endColumn":18},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··········?·`[${i·+·1}/${steps.length}]·${step.text}`·⏎··········` with `?·`[${i·+·1}/${steps.length}]·${step.text}`·`","line":317,"column":43,"nodeType":null,"messageId":"replace","endLine":319,"endColumn":11,"fix":{"range":[7571,7637],"text":"? `[${i + 1}/${steps.length}] ${step.text}` "}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":321,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":329,"endColumn":10},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":321,"column":24,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":329,"endColumn":10},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··········progressText,⏎··········step.action(),⏎·········` with `progressText,·step.action(),`","line":321,"column":47,"nodeType":null,"messageId":"replace","endLine":324,"endColumn":10,"fix":{"range":[7697,7756],"text":"progressText, step.action(),"}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":325,"column":1,"nodeType":null,"messageId":"delete","endLine":325,"endColumn":3,"fix":{"range":[7759,7761],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `············` with `··········`","line":326,"column":1,"nodeType":null,"messageId":"replace","endLine":326,"endColumn":13,"fix":{"range":[7802,7814],"text":"          "}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":327,"column":1,"nodeType":null,"messageId":"delete","endLine":327,"endColumn":3,"fix":{"range":[7839,7841],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `··}⏎········` with `}`","line":328,"column":9,"nodeType":null,"messageId":"replace","endLine":329,"endColumn":9,"fix":{"range":[7882,7894],"text":"}"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":350,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":350,"endColumn":22}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":22,"fixableWarningCount":1,"source":"import type { Ora } from 'ora';\nimport ora from 'ora';\n\n/**\n * Error thrown by SpinnerManager\n */\nexport class SpinnerError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'SpinnerError';\n  }\n}\n\n/**\n * Manages loading spinners for CLI operations with comprehensive error handling\n */\nexport class SpinnerManager {\n  private spinner: Ora | null = null;\n\n  private isSpinning = false;\n\n  private destroyed = false;\n\n  private readonly maxTextLength = 200;\n\n  /**\n   * Validate text input\n   */\n  private validateText(text: string): string {\n    if (this.destroyed) {\n      throw new SpinnerError('SpinnerManager has been destroyed', 'DESTROYED');\n    }\n\n    if (typeof text !== 'string') {\n      throw new SpinnerError('Text must be a string', 'INVALID_TYPE');\n    }\n\n    if (text.length === 0) {\n      throw new SpinnerError('Text cannot be empty', 'EMPTY_TEXT');\n    }\n\n    if (text.length > this.maxTextLength) {\n      return text.substring(0, this.maxTextLength - 3) + '...';\n    }\n\n    return text.trim();\n  }\n\n  /**\n   * Safe spinner operation wrapper\n   */\n  private safeOperation<T>(operation: () => T, fallback: T): T {\n    try {\n      return operation();\n    } catch (error) {\n      console.warn(`Spinner operation failed: ${error instanceof Error ? error.message : String(error)}`);\n      return fallback;\n    }\n  }\n\n  /**\n   * Start a new spinner with the given text\n   */\n  start(text: string): void {\n    try {\n      const validatedText = this.validateText(text);\n\n      if (this.isSpinning) {\n        this.stop();\n      }\n\n      this.spinner = this.safeOperation(() => \n        ora({\n          text: validatedText,\n          color: 'cyan',\n          spinner: 'dots',\n          hideCursor: true,\n        }).start(),\n        null\n      );\n\n      if (this.spinner) {\n        this.isSpinning = true;\n      } else {\n        throw new SpinnerError('Failed to create spinner instance', 'CREATION_FAILED');\n      }\n    } catch (error) {\n      if (error instanceof SpinnerError) {\n        throw error;\n      }\n      throw new SpinnerError(`Failed to start spinner: ${error instanceof Error ? error.message : String(error)}`, 'START_FAILED');\n    }\n  }\n\n  /**\n   * Update the spinner text\n   */\n  update(text: string): void {\n    try {\n      const validatedText = this.validateText(text);\n\n      if (!this.spinner) {\n        throw new SpinnerError('No active spinner to update', 'NO_SPINNER');\n      }\n\n      if (!this.isSpinning) {\n        throw new SpinnerError('Spinner is not currently running', 'NOT_RUNNING');\n      }\n\n      this.safeOperation(() => {\n        this.spinner!.text = validatedText;\n        return true;\n      }, false);\n    } catch (error) {\n      if (error instanceof SpinnerError) {\n        throw error;\n      }\n      throw new SpinnerError(`Failed to update spinner: ${error instanceof Error ? error.message : String(error)}`, 'UPDATE_FAILED');\n    }\n  }\n\n  /**\n   * Common stop logic with error handling\n   */\n  private stopSpinner(method: 'succeed' | 'fail' | 'warn' | 'info' | 'stop', text?: string): void {\n    try {\n      if (this.destroyed) {\n        console.warn('Attempted to stop destroyed spinner');\n        return;\n      }\n\n      if (!this.spinner || !this.isSpinning) {\n        // Silently ignore - not an error condition\n        return;\n      }\n\n      const finalText = text ? this.validateText(text) : this.spinner.text;\n\n      this.safeOperation(() => {\n        if (method === 'stop') {\n          this.spinner!.stop();\n        } else {\n          this.spinner![method](finalText);\n        }\n        return true;\n      }, false);\n\n      this.cleanup();\n    } catch (error) {\n      console.warn(`Failed to stop spinner: ${error instanceof Error ? error.message : String(error)}`);\n      this.forceCleanup();\n    }\n  }\n\n  /**\n   * Clean up spinner state\n   */\n  private cleanup(): void {\n    this.isSpinning = false;\n    this.spinner = null;\n  }\n\n  /**\n   * Force cleanup in case of errors\n   */\n  private forceCleanup(): void {\n    try {\n      if (this.spinner) {\n        this.spinner.stop();\n      }\n    } catch {\n      // Ignore errors during force cleanup\n    }\n    this.cleanup();\n  }\n\n  /**\n   * Stop the spinner with success\n   */\n  succeed(text?: string): void {\n    this.stopSpinner('succeed', text);\n  }\n\n  /**\n   * Stop the spinner with failure\n   */\n  fail(text?: string): void {\n    this.stopSpinner('fail', text);\n  }\n\n  /**\n   * Stop the spinner with warning\n   */\n  warn(text?: string): void {\n    this.stopSpinner('warn', text);\n  }\n\n  /**\n   * Stop the spinner with info\n   */\n  info(text?: string): void {\n    this.stopSpinner('info', text);\n  }\n\n  /**\n   * Stop the spinner without any status\n   */\n  stop(): void {\n    this.stopSpinner('stop');\n  }\n\n  /**\n   * Check if spinner is currently active\n   */\n  isActive(): boolean {\n    return this.isSpinning && !this.destroyed;\n  }\n\n  /**\n   * Destroy the spinner manager (cleanup)\n   */\n  destroy(): void {\n    this.forceCleanup();\n    this.destroyed = true;\n  }\n\n  /**\n   * Create a promise that shows a spinner while executing\n   */\n  async withSpinner<T>(\n    text: string,\n    promise: Promise<T>,\n    options?: {\n      successText?: string;\n      failText?: string;\n      timeout?: number;\n    }\n  ): Promise<T> {\n    if (!promise || typeof promise.then !== 'function') {\n      throw new SpinnerError('Promise is required and must be a valid Promise', 'INVALID_PROMISE');\n    }\n\n    this.start(text);\n\n    const timeout = options?.timeout;\n    let timeoutId: NodeJS.Timeout | undefined;\n\n    try {\n      let racePromise: Promise<T>;\n\n      if (timeout && timeout > 0) {\n        const timeoutPromise = new Promise<never>((_, reject) => {\n          timeoutId = setTimeout(() => {\n            reject(new SpinnerError(`Operation timed out after ${timeout}ms`, 'TIMEOUT'));\n          }, timeout);\n        });\n\n        racePromise = Promise.race([promise, timeoutPromise]);\n      } else {\n        racePromise = promise;\n      }\n\n      const result = await racePromise;\n      if (timeoutId) clearTimeout(timeoutId);\n      this.succeed(options?.successText);\n      return result;\n    } catch (error) {\n      if (timeoutId) clearTimeout(timeoutId);\n      \n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const failText = options?.failText || `Failed: ${text} - ${errorMessage}`;\n      \n      this.fail(failText);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a spinner for a multi-step process\n   */\n  async withSteps(\n    steps: Array<{\n      text: string;\n      action: () => Promise<any>;\n      successText?: string;\n      failText?: string;\n      timeout?: number;\n      skipOnError?: boolean;\n    }>,\n    options?: {\n      stopOnError?: boolean;\n      showProgress?: boolean;\n    }\n  ): Promise<{ results: any[]; errors: Error[] }> {\n    if (!Array.isArray(steps) || steps.length === 0) {\n      throw new SpinnerError('Steps must be a non-empty array', 'INVALID_STEPS');\n    }\n\n    const { stopOnError = true, showProgress = true } = options || {};\n    const results: any[] = [];\n    const errors: Error[] = [];\n\n    for (let i = 0; i < steps.length; i++) {\n      const step = steps[i];\n      \n      if (!step || typeof step.action !== 'function') {\n        const error = new SpinnerError(`Invalid step at index ${i}: action must be a function`, 'INVALID_STEP');\n        errors.push(error);\n        \n        if (stopOnError && !step?.skipOnError) {\n          throw error;\n        }\n        continue;\n      }\n\n      try {\n        const progressText = showProgress \n          ? `[${i + 1}/${steps.length}] ${step.text}` \n          : step.text;\n\n        const result = await this.withSpinner(\n          progressText,\n          step.action(),\n          {\n            successText: step.successText,\n            failText: step.failText,\n            timeout: step.timeout,\n          }\n        );\n\n        results.push(result);\n      } catch (error) {\n        const stepError = error instanceof Error ? error : new Error(String(error));\n        errors.push(stepError);\n\n        if (stopOnError && !step.skipOnError) {\n          throw stepError;\n        }\n      }\n    }\n\n    return { results, errors };\n  }\n}\n\n// Export singleton instance\nexport const spinner = new SpinnerManager();\n\n// Cleanup on process termination\nconst cleanup = () => {\n  spinner.destroy();\n};\n\nprocess.on('exit', cleanup);\nprocess.on('SIGINT', cleanup);\nprocess.on('SIGTERM', cleanup);\nprocess.on('SIGUSR1', cleanup);\nprocess.on('SIGUSR2', cleanup);\nprocess.on('uncaughtException', cleanup);\nprocess.on('unhandledRejection', cleanup);\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/task-list-formatter.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":80,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":119,"endColumn":6},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":134,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":145,"endColumn":8},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":138,"column":9,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":140,"endColumn":10},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":148,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":150,"endColumn":8},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatTaskListItem'.","line":163,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":163,"endColumn":29},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'formatTaskDetail'.","line":209,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":209,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":224,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":224,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[5930,5932],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":225,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":225,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6006,6008],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":237,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":237,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[6547,6549],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":266,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":269,"endColumn":8},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'sortTasks'.","line":304,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":304,"endColumn":20},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":308,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":308,"endColumn":71},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":309,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":309,"endColumn":91},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":310,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":310,"endColumn":91},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'groupTasks'.","line":337,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":337,"endColumn":21},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":340,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":361,"endColumn":6},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":348,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":348,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[9934,9936],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":351,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":351,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[10024,10026],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateTableWidths'.","line":369,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":369,"endColumn":31}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import chalk from 'chalk';\nimport Table from 'cli-table3';\nimport {\n  formatStatus,\n  formatPriority,\n  formatRelativeTime,\n  formatDateTime,\n  truncate,\n  formatProgressBar,\n  formatKeyValue,\n  formatDivider,\n  formatHeader,\n} from './formatter';\n\nexport interface TaskDetails {\n  id: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority?: string;\n  assignee?: string;\n  reporter?: string;\n  created_at: string;\n  updated_at: string;\n  due_date?: string;\n  estimated_hours?: number;\n  actual_hours?: number;\n  tags?: string[];\n  subtasks?: TaskDetails[];\n  dependencies?: string[];\n  comments_count?: number;\n  attachments_count?: number;\n  completion_percentage?: number;\n}\n\nexport interface TaskListOptions {\n  showDescription?: boolean;\n  showDates?: boolean;\n  showAssignee?: boolean;\n  showTags?: boolean;\n  sortBy?: 'priority' | 'due_date' | 'created' | 'updated' | 'status';\n  groupBy?: 'status' | 'priority' | 'assignee' | 'none';\n  maxItems?: number;\n  format?: 'table' | 'list' | 'compact';\n}\n\n/**\n * Format task lists for CLI display\n */\nexport class TaskListFormatter {\n  /**\n   * Format a list of tasks as a table\n   */\n  formatTaskTable(tasks: TaskDetails[], options: TaskListOptions = {}): string {\n    const {\n      showDescription = false,\n      showDates = true,\n      showAssignee = true,\n      showTags = false,\n      sortBy = 'priority',\n    } = options;\n\n    // Sort tasks\n    const sortedTasks = this.sortTasks(tasks, sortBy);\n\n    // Build table headers\n    const headers = ['ID', 'Title', 'Status', 'Priority'];\n    if (showAssignee) headers.push('Assignee');\n    if (showDates) headers.push('Due Date');\n    if (showTags) headers.push('Tags');\n\n    // Create table\n    const table = new Table({\n      head: headers,\n      style: { head: ['cyan'] },\n      colWidths: this.calculateTableWidths(headers, showDescription),\n    });\n\n    // Add rows\n    for (const task of sortedTasks) {\n      const row: string[] = [\n        task.id,\n        truncate(task.title, 40),\n        formatStatus(task.status),\n        task.priority ? formatPriority(task.priority) : '-',\n      ];\n\n      if (showAssignee) {\n        row.push(task.assignee ? chalk.cyan(`@${task.assignee}`) : '-');\n      }\n\n      if (showDates) {\n        if (task.due_date) {\n          const dueDate = new Date(task.due_date);\n          const isOverdue = dueDate < new Date() && task.status !== 'done';\n          const dateStr = formatDateTime(dueDate, 'MMM dd');\n          row.push(isOverdue ? chalk.red(dateStr) : dateStr);\n        } else {\n          row.push('-');\n        }\n      }\n\n      if (showTags) {\n        row.push(task.tags ? task.tags.map(t => chalk.magenta(`#${t}`)).join(' ') : '-');\n      }\n\n      table.push(row);\n\n      // Add description row if enabled\n      if (showDescription && task.description) {\n        const descRow = [\n          {\n            colSpan: headers.length,\n            content: chalk.gray(`  ${truncate(task.description, 100)}`),\n          },\n        ];\n        table.push(descRow);\n      }\n    }\n\n    return table.toString();\n  }\n\n  /**\n   * Format tasks as a detailed list\n   */\n  formatTaskList(tasks: TaskDetails[], options: TaskListOptions = {}): string {\n    const { groupBy = 'none', maxItems } = options;\n    const output: string[] = [];\n\n    if (groupBy !== 'none') {\n      const grouped = this.groupTasks(tasks, groupBy);\n\n      for (const [group, groupTasks] of grouped) {\n        output.push(chalk.bold.underline(`\\n${group} (${groupTasks.length})`));\n\n        const tasksToShow = maxItems ? groupTasks.slice(0, maxItems) : groupTasks;\n        for (const task of tasksToShow) {\n          output.push(this.formatTaskListItem(task));\n        }\n\n        if (maxItems && groupTasks.length > maxItems) {\n          output.push(chalk.gray(`  ... and ${groupTasks.length - maxItems} more`));\n        }\n      }\n    } else {\n      const tasksToShow = maxItems ? tasks.slice(0, maxItems) : tasks;\n      for (const task of tasksToShow) {\n        output.push(this.formatTaskListItem(task));\n      }\n\n      if (maxItems && tasks.length > maxItems) {\n        output.push(chalk.gray(`\\n... and ${tasks.length - maxItems} more tasks`));\n      }\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Format a single task list item\n   */\n  private formatTaskListItem(task: TaskDetails): string {\n    const lines: string[] = [];\n\n    // Main task line\n    const mainLine = [\n      chalk.dim(`[${task.id}]`),\n      task.title,\n      task.priority ? formatPriority(task.priority) : '',\n      formatStatus(task.status),\n    ]\n      .filter(Boolean)\n      .join(' ');\n\n    lines.push(`  ${mainLine}`);\n\n    // Additional details\n    const details: string[] = [];\n\n    if (task.assignee) {\n      details.push(chalk.cyan(`@${task.assignee}`));\n    }\n\n    if (task.due_date) {\n      const dueDate = new Date(task.due_date);\n      const isOverdue = dueDate < new Date() && task.status !== 'done';\n      details.push(\n        isOverdue\n          ? chalk.red(`Due: ${formatDateTime(dueDate, 'MMM dd')}`)\n          : chalk.gray(`Due: ${formatDateTime(dueDate, 'MMM dd')}`)\n      );\n    }\n\n    if (task.tags && task.tags.length > 0) {\n      details.push(task.tags.map(tag => chalk.magenta(`#${tag}`)).join(' '));\n    }\n\n    if (details.length > 0) {\n      lines.push(`    ${details.join(' | ')}`);\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Format detailed task view\n   */\n  formatTaskDetail(task: TaskDetails): string {\n    const output: string[] = [];\n\n    // Header\n    output.push(formatHeader(`Task ${task.id}`, 60));\n    output.push('');\n\n    // Title and status\n    output.push(chalk.bold(task.title));\n    output.push(formatStatus(task.status));\n    output.push('');\n\n    // Details section\n    output.push(chalk.bold('Details:'));\n    output.push(formatKeyValue('Priority', task.priority ? formatPriority(task.priority) : 'None'));\n    output.push(formatKeyValue('Assignee', task.assignee || 'Unassigned'));\n    output.push(formatKeyValue('Reporter', task.reporter || 'Unknown'));\n    output.push(formatKeyValue('Created', formatRelativeTime(task.created_at)));\n    output.push(formatKeyValue('Updated', formatRelativeTime(task.updated_at)));\n\n    if (task.due_date) {\n      const dueDate = new Date(task.due_date);\n      const isOverdue = dueDate < new Date() && task.status !== 'done';\n      const dueDateStr = formatDateTime(dueDate, 'MMM dd, yyyy');\n      output.push(formatKeyValue('Due Date', isOverdue ? chalk.red(dueDateStr) : dueDateStr));\n    }\n\n    // Time tracking\n    if (task.estimated_hours || task.actual_hours) {\n      output.push('');\n      output.push(chalk.bold('Time Tracking:'));\n      if (task.estimated_hours) {\n        output.push(formatKeyValue('Estimated', `${task.estimated_hours}h`));\n      }\n      if (task.actual_hours) {\n        output.push(formatKeyValue('Actual', `${task.actual_hours}h`));\n      }\n    }\n\n    // Description\n    if (task.description) {\n      output.push('');\n      output.push(chalk.bold('Description:'));\n      output.push(task.description);\n    }\n\n    // Progress\n    if (task.completion_percentage !== undefined) {\n      output.push('');\n      output.push(chalk.bold('Progress:'));\n      output.push(formatProgressBar(task.completion_percentage, 100, 30));\n    }\n\n    // Subtasks\n    if (task.subtasks && task.subtasks.length > 0) {\n      output.push('');\n      output.push(chalk.bold(`Subtasks (${task.subtasks.length}):`));\n      for (const subtask of task.subtasks) {\n        const icon = subtask.status === 'done' ? '✓' : '○';\n        output.push(`  ${chalk.green(icon)} [${subtask.id}] ${subtask.title}`);\n      }\n    }\n\n    // Dependencies\n    if (task.dependencies && task.dependencies.length > 0) {\n      output.push('');\n      output.push(chalk.bold('Dependencies:'));\n      output.push(`  ${task.dependencies.join(', ')}`);\n    }\n\n    // Tags\n    if (task.tags && task.tags.length > 0) {\n      output.push('');\n      output.push(chalk.bold('Tags:'));\n      output.push(`  ${task.tags.map(tag => chalk.magenta(`#${tag}`)).join(' ')}`);\n    }\n\n    // Metadata\n    output.push('');\n    output.push(formatDivider());\n    if (task.comments_count) {\n      output.push(`💬 ${task.comments_count} comment${task.comments_count > 1 ? 's' : ''}`);\n    }\n    if (task.attachments_count) {\n      output.push(\n        `📎 ${task.attachments_count} attachment${task.attachments_count > 1 ? 's' : ''}`\n      );\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Sort tasks by specified field\n   */\n  private sortTasks(tasks: TaskDetails[], sortBy: string): TaskDetails[] {\n    return [...tasks].sort((a, b) => {\n      switch (sortBy) {\n        case 'priority':\n          const priorityOrder = { P1: 1, P2: 2, P3: 3, P4: 4, P5: 5 };\n          const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 99;\n          const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 99;\n          return aPriority - bPriority;\n\n        case 'due_date':\n          if (!a.due_date && !b.due_date) return 0;\n          if (!a.due_date) return 1;\n          if (!b.due_date) return -1;\n          return new Date(a.due_date).getTime() - new Date(b.due_date).getTime();\n\n        case 'created':\n          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n\n        case 'updated':\n          return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();\n\n        case 'status':\n          return a.status.localeCompare(b.status);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  /**\n   * Group tasks by specified field\n   */\n  private groupTasks(tasks: TaskDetails[], groupBy: string): Map<string, TaskDetails[]> {\n    const grouped = new Map<string, TaskDetails[]>();\n\n    for (const task of tasks) {\n      let key: string;\n\n      switch (groupBy) {\n        case 'status':\n          key = task.status;\n          break;\n        case 'priority':\n          key = task.priority || 'No Priority';\n          break;\n        case 'assignee':\n          key = task.assignee || 'Unassigned';\n          break;\n        default:\n          key = 'All Tasks';\n      }\n\n      if (!grouped.has(key)) {\n        grouped.set(key, []);\n      }\n      grouped.get(key)!.push(task);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Calculate column widths for table\n   */\n  private calculateTableWidths(headers: string[], showDescription: boolean): number[] {\n    const baseWidths = {\n      ID: 10,\n      Title: showDescription ? 40 : 50,\n      Status: 15,\n      Priority: 10,\n      Assignee: 15,\n      'Due Date': 12,\n      Tags: 20,\n    };\n\n    return headers.map(h => baseWidths[h as keyof typeof baseWidths] || 15);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/task-runner.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":27,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[646,648],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":52,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1329,1332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1329,1332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1406,1464],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":77,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":77,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":96,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2411,2414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2411,2414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2488,2552],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2727,2730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2727,2730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":129,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":129,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":130,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":130,"endColumn":41},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":131,"column":15,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":131,"endColumn":26},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to property of function parameter 'task'.","line":132,"column":15,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":132,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3276,3278],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":143,"column":15,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":150,"endColumn":16},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":144,"column":17,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":149,"endColumn":18},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":152,"column":15,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":155,"endColumn":16},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":153,"column":17,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":153,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":162,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":165,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4079,4082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4079,4082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'createRetryTask'.","line":175,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":175,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4240,4243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4240,4243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":189,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":189,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4544,4547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4544,4547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":192,"column":54,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":192,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":1,"message":"Unsafe return of an `any` typed value.","line":194,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":194,"endColumn":35},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":194,"column":20,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":194,"endColumn":34},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":198,"column":15,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":198,"endColumn":76},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":198,"column":44,"nodeType":"CallExpression","messageId":"returnsValue","endLine":198,"endColumn":75,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[4809,4840],"text":"{setTimeout(resolve, retryDelay)}"},"desc":"Wrap the expression in `{}`."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .message on an `any` value.","line":204,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":69}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ListrTask } from 'listr2';\nimport { Listr } from 'listr2';\nimport chalk from 'chalk';\n\nexport interface TaskItem {\n  id: string;\n  title: string;\n  action: () => Promise<any>;\n  skip?: () => boolean | string;\n  enabled?: boolean;\n  concurrent?: boolean;\n}\n\nexport interface TaskGroup {\n  title: string;\n  tasks: TaskItem[];\n  concurrent?: boolean;\n}\n\n/**\n * Manages concurrent task execution with visual feedback using Listr\n */\nexport class TaskRunner {\n  private readonly renderer: 'default' | 'simple' | 'verbose';\n\n  constructor(options?: { renderer?: 'default' | 'simple' | 'verbose' }) {\n    this.renderer = options?.renderer || 'default';\n  }\n\n  /**\n   * Run a single group of tasks\n   */\n  async runTasks(\n    _title: string,\n    tasks: TaskItem[],\n    options?: {\n      concurrent?: boolean;\n      exitOnError?: boolean;\n    }\n  ): Promise<void> {\n    const listrTasks: ListrTask[] = tasks.map(task => ({\n      title: task.title,\n      task: task.action,\n      ...(task.skip && { skip: task.skip }),\n      enabled: task.enabled ?? true,\n    }));\n\n    const listr = new Listr(listrTasks, {\n      concurrent: options?.concurrent ?? false,\n      exitOnError: options?.exitOnError ?? true,\n      renderer: this.renderer,\n      rendererOptions: {\n        showSubtasks: true,\n        showTimer: true,\n      } as any,\n    });\n\n    try {\n      await listr.run();\n    } catch (error) {\n      console.error(chalk.red('Task execution failed:'), error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run multiple groups of tasks\n   */\n  async runTaskGroups(\n    groups: TaskGroup[],\n    options?: {\n      exitOnError?: boolean;\n    }\n  ): Promise<void> {\n    const mainTasks: ListrTask[] = groups.map(group => ({\n      title: group.title,\n      task: (_ctx, task) => {\n        const subtasks: ListrTask[] = group.tasks.map(item => ({\n          title: item.title,\n          task: item.action,\n          ...(item.skip && { skip: item.skip }),\n          enabled: item.enabled ?? true,\n        }));\n\n        return task.newListr(subtasks, {\n          concurrent: group.concurrent ?? false,\n          exitOnError: options?.exitOnError ?? true,\n        });\n      },\n    }));\n\n    const listr = new Listr(mainTasks, {\n      concurrent: false,\n      exitOnError: options?.exitOnError ?? true,\n      renderer: this.renderer,\n      rendererOptions: {\n        showSubtasks: true,\n        showTimer: true,\n      } as any,\n    });\n\n    try {\n      await listr.run();\n    } catch (error) {\n      console.error(chalk.red('Task group execution failed:'), error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run tasks with progress tracking\n   */\n  async runWithProgress<T>(\n    title: string,\n    items: T[],\n    processor: (item: T, task: any) => Promise<void>,\n    options?: {\n      concurrent?: boolean;\n      concurrency?: number;\n    }\n  ): Promise<void> {\n    let completed = 0;\n    const total = items.length;\n\n    const listr = new Listr(\n      [\n        {\n          title: `${title} (0/${total})`,\n          task: async (_ctx, task) => {\n            const updateProgress = () => {\n              completed++;\n              task.title = `${title} (${completed}/${total})`;\n            };\n\n            if (options?.concurrent) {\n              const concurrency = options.concurrency || 5;\n              const chunks: T[][] = [];\n\n              for (let i = 0; i < items.length; i += concurrency) {\n                chunks.push(items.slice(i, i + concurrency));\n              }\n\n              for (const chunk of chunks) {\n                await Promise.all(\n                  chunk.map(async item => {\n                    await processor(item, task);\n                    updateProgress();\n                  })\n                );\n              }\n            } else {\n              for (const item of items) {\n                await processor(item, task);\n                updateProgress();\n              }\n            }\n          },\n        },\n      ],\n      {\n        renderer: this.renderer,\n        rendererOptions: {\n          showSubtasks: true,\n          showTimer: true,\n        } as any,\n      }\n    );\n\n    await listr.run();\n  }\n\n  /**\n   * Create a task with retry logic\n   */\n  createRetryTask(\n    title: string,\n    action: () => Promise<any>,\n    options?: {\n      retries?: number;\n      retryDelay?: number;\n    }\n  ): TaskItem {\n    const maxRetries = options?.retries ?? 3;\n    const retryDelay = options?.retryDelay ?? 1000;\n\n    return {\n      id: `retry-${Date.now()}`,\n      title,\n      action: async () => {\n        let lastError: any;\n\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n          try {\n            return await action();\n          } catch (error) {\n            lastError = error;\n            if (attempt < maxRetries) {\n              await new Promise(resolve => setTimeout(resolve, retryDelay));\n            }\n          }\n        }\n\n        throw new Error(\n          `Failed after ${maxRetries} attempts: ${lastError?.message || 'Unknown error'}`\n        );\n      },\n    };\n  }\n\n  /**\n   * Run tasks with dependency resolution\n   */\n  async runWithDependencies(tasks: Array<TaskItem & { dependencies?: string[] }>): Promise<void> {\n    const completed = new Set<string>();\n    const running = new Set<string>();\n\n    const canRun = (task: (typeof tasks)[0]): boolean => {\n      if (!task.dependencies || task.dependencies.length === 0) {\n        return true;\n      }\n      return task.dependencies.every(dep => completed.has(dep));\n    };\n\n    const runTask = async (task: (typeof tasks)[0]): Promise<void> => {\n      running.add(task.id);\n      try {\n        await task.action();\n        completed.add(task.id);\n      } finally {\n        running.delete(task.id);\n      }\n    };\n\n    // Group tasks by whether they can run\n    const groups: TaskGroup[] = [];\n    const remaining = [...tasks];\n\n    while (remaining.length > 0) {\n      const ready = remaining.filter(t => canRun(t) && !completed.has(t.id));\n\n      if (ready.length === 0 && remaining.length > 0) {\n        throw new Error('Circular dependency detected or unresolvable dependencies');\n      }\n\n      if (ready.length > 0) {\n        groups.push({\n          title: `Running ${ready.length} task(s)`,\n          tasks: ready.map(t => ({\n            ...t,\n            action: () => runTask(t),\n          })),\n          concurrent: true,\n        });\n\n        // Remove ready tasks from remaining\n        remaining.splice(0, remaining.length, ...remaining.filter(t => !ready.includes(t)));\n      }\n    }\n\n    await this.runTaskGroups(groups);\n  }\n}\n\n// Export singleton instance\nexport const taskRunner = new TaskRunner();\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/adammanuel/Projects/Agents/mcp-kanban/src/cli/utils/todo-processor.ts","messages":[{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class async method 'parseTodoFile'.","line":42,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":42,"endColumn":22},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":48,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":93,"endColumn":6},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[1429,1431],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-continue","severity":2,"message":"Unexpected use of continue statement.","line":55,"column":9,"nodeType":"ContinueStatement","messageId":"unexpected","endLine":55,"endColumn":18},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":71,"column":11,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":79,"endColumn":12},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'groupByPhase'.","line":101,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":101,"endColumn":23},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":104,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":113,"endColumn":6},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":105,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":105,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","fix":{"range":[3026,3028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'canExecuteTodo'.","line":121,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":121,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4149,4230],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":184,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":215,"endColumn":6},{"ruleId":"no-continue","severity":2,"message":"Unexpected use of continue statement.","line":185,"column":24,"nodeType":"ContinueStatement","messageId":"unexpected","endLine":185,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":196,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":196,"endColumn":27},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":199,"column":46,"nodeType":"CallExpression","messageId":"returnsValue","endLine":199,"endColumn":70,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[5778,5802],"text":"{setTimeout(resolve, 100)}"},"desc":"Wrap the expression in `{}`."}]},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to property of function parameter 'todo'.","line":200,"column":17,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":200,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":203,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":203,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":234,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":234,"endColumn":21},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'task' has no 'await' expression.","line":234,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":234,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":237,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":237,"endColumn":25},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":239,"column":46,"nodeType":"CallExpression","messageId":"returnsValue","endLine":239,"endColumn":70,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[7022,7046],"text":"{setTimeout(resolve, 100)}"},"desc":"Wrap the expression in `{}`."}]},{"ruleId":"no-param-reassign","severity":1,"message":"Assignment to property of function parameter 'todo'.","line":240,"column":17,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":240,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":247,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":249,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7312,7315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7312,7315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":255,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":258,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7485,7488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7485,7488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8504,8568],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":2,"message":"Expected 'this' to be used by class method 'calculateTimeEstimate'.","line":301,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":301,"endColumn":32}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFile, writeFile } from 'fs/promises';\nimport { Listr } from 'listr2';\nimport chalk from 'chalk';\nimport type { TaskGroup } from './task-runner';\nimport { TaskRunner } from './task-runner';\n\nexport interface TodoItem {\n  id: string;\n  text: string;\n  completed: boolean;\n  priority: 'P1' | 'P2' | 'P3' | 'P4' | 'P5';\n  size: 'S' | 'M' | 'L' | 'XL';\n  value: 'S' | 'M' | 'L';\n  dependencies: string[];\n  owner?: string;\n  notes?: string;\n  phase?: string;\n}\n\nexport interface TodoProcessorOptions {\n  concurrent?: boolean;\n  maxConcurrent?: number;\n  groupByPhase?: boolean;\n  showDependencies?: boolean;\n  generateReport?: boolean;\n  dryRun?: boolean;\n}\n\n/**\n * Processes TODO items from markdown files with visual feedback\n */\nexport class TodoProcessor {\n  private readonly taskRunner: TaskRunner;\n\n  constructor() {\n    this.taskRunner = new TaskRunner({ renderer: 'default' });\n  }\n\n  /**\n   * Parse TODO.md file and extract tasks\n   */\n  async parseTodoFile(filePath: string): Promise<Map<string, TodoItem>> {\n    const content = await readFile(filePath, 'utf-8');\n    const lines = content.split('\\n');\n    const todos = new Map<string, TodoItem>();\n    let currentPhase = '';\n\n    for (const line of lines) {\n      // Detect phase headers\n      if (line.startsWith('## Phase')) {\n        const phaseMatch = line.match(/## Phase \\d+: (.+?) \\(/);\n        if (phaseMatch) {\n          currentPhase = phaseMatch[1] || '';\n        }\n        continue;\n      }\n\n      // Parse TODO items\n      const todoMatch = line.match(\n        /- \\[([ x])\\] \\*\\*TASK-(\\d+)\\*\\*: (.+?) \\[([SML]|XL), (P[1-5]), Value: ([SML])\\]/\n      );\n      if (todoMatch) {\n        const [, completed, taskId, description, size, priority, value] = todoMatch;\n        const id = `TASK-${taskId}`;\n\n        // Look for dependencies in subsequent lines\n        const dependencies: string[] = [];\n        const lineIndex = lines.indexOf(line);\n        if (lineIndex < lines.length - 1) {\n          const nextLines = lines.slice(lineIndex + 1, lineIndex + 5);\n          for (const nextLine of nextLines) {\n            if (nextLine.includes('Dependencies:')) {\n              const depMatch = nextLine.match(/Dependencies: (.+)/);\n              if (depMatch && depMatch[1] !== 'None') {\n                dependencies.push(...depMatch[1].split(', ').map(d => d.trim()));\n              }\n              break;\n            }\n          }\n        }\n\n        todos.set(id, {\n          id,\n          text: description,\n          completed: completed === 'x',\n          priority: priority as TodoItem['priority'],\n          size: size as TodoItem['size'],\n          value: value as TodoItem['value'],\n          dependencies,\n          phase: currentPhase || undefined,\n        });\n      }\n    }\n\n    return todos;\n  }\n\n  /**\n   * Group todos by phase\n   */\n  private groupByPhase(todos: Map<string, TodoItem>): Map<string, TodoItem[]> {\n    const phases = new Map<string, TodoItem[]>();\n\n    for (const todo of todos.values()) {\n      const phase = todo.phase || 'Uncategorized';\n      if (!phases.has(phase)) {\n        phases.set(phase, []);\n      }\n      const phaseArray = phases.get(phase);\n      if (phaseArray) {\n        phaseArray.push(todo);\n      }\n    }\n\n    return phases;\n  }\n\n  /**\n   * Check if a todo can be executed based on dependencies\n   */\n  private canExecuteTodo(todo: TodoItem, completedTodos: Set<string>): boolean {\n    if (todo.completed) return false;\n    if (!todo.dependencies || todo.dependencies.length === 0) return true;\n    return todo.dependencies.every(dep => completedTodos.has(dep));\n  }\n\n  /**\n   * Create execution groups based on dependencies\n   */\n  private createExecutionGroups(todos: Map<string, TodoItem>): TodoItem[][] {\n    const groups: TodoItem[][] = [];\n    const completed = new Set<string>(\n      Array.from(todos.values())\n        .filter(t => t.completed)\n        .map(t => t.id)\n    );\n    const remaining = Array.from(todos.values()).filter(t => !t.completed);\n\n    while (remaining.length > 0) {\n      const executable = remaining.filter(t => this.canExecuteTodo(t, completed));\n\n      if (executable.length === 0) {\n        console.warn(chalk.yellow('Warning: Some tasks have unresolvable dependencies'));\n        break;\n      }\n\n      groups.push(executable);\n      executable.forEach(t => {\n        completed.add(t.id);\n        remaining.splice(remaining.indexOf(t), 1);\n      });\n    }\n\n    return groups;\n  }\n\n  /**\n   * Process todos with visual feedback\n   */\n  async processTodos(todoFile: string, options: TodoProcessorOptions = {}): Promise<void> {\n    const todos = await this.parseTodoFile(todoFile);\n\n    if (options.groupByPhase) {\n      await this.processGroupedByPhase(todos, options);\n    } else {\n      await this.processWithDependencies(todos, options);\n    }\n\n    if (options.generateReport) {\n      await this.generateReport(todos, todoFile);\n    }\n  }\n\n  /**\n   * Process todos grouped by phase\n   */\n  private async processGroupedByPhase(\n    todos: Map<string, TodoItem>,\n    options: TodoProcessorOptions\n  ): Promise<void> {\n    const phases = this.groupByPhase(todos);\n    const taskGroups: TaskGroup[] = [];\n\n    for (const [phaseName, phaseTodos] of phases) {\n      if (!phaseTodos) continue;\n      const completedCount = phaseTodos.filter(t => t.completed).length;\n      const totalCount = phaseTodos.length;\n\n      taskGroups.push({\n        title: `${phaseName} [${completedCount}/${totalCount}]`,\n        tasks: phaseTodos\n          .filter(t => !t.completed)\n          .map(todo => ({\n            id: todo.id,\n            title: `${todo.id}: ${todo.text}`,\n            action: async () => {\n              if (!options.dryRun) {\n                // Simulate task implementation\n                await new Promise(resolve => setTimeout(resolve, 100));\n                todo.completed = true;\n              }\n            },\n            skip: () => {\n              if (todo.dependencies.length > 0) {\n                const unmet = todo.dependencies.filter(dep => !todos.get(dep)?.completed);\n                if (unmet.length > 0) {\n                  return `Waiting for: ${unmet.join(', ')}`;\n                }\n              }\n              return false;\n            },\n          })),\n        concurrent: options.concurrent ?? false,\n      });\n    }\n\n    await this.taskRunner.runTaskGroups(taskGroups, {\n      exitOnError: false,\n    });\n  }\n\n  /**\n   * Process todos with dependency resolution\n   */\n  private async processWithDependencies(\n    todos: Map<string, TodoItem>,\n    options: TodoProcessorOptions\n  ): Promise<void> {\n    const groups = this.createExecutionGroups(todos);\n\n    const listr = new Listr(\n      groups.map((group, index) => ({\n        title: `Execution Group ${index + 1} (${group.length} tasks)`,\n        task: async (_ctx, task) => {\n          const subtasks = group.map(todo => ({\n            title: `${todo.id}: ${todo.text}`,\n            task: async () => {\n              if (!options.dryRun) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                todo.completed = true;\n              }\n            },\n          }));\n\n          return task.newListr(subtasks, {\n            concurrent: options.concurrent ?? true,\n            rendererOptions: {\n              showSubtasks: true,\n            } as any,\n          });\n        },\n      })),\n      {\n        concurrent: false,\n        rendererOptions: {\n          showSubtasks: true,\n          showTimer: true,\n        } as any,\n      }\n    );\n\n    await listr.run();\n  }\n\n  /**\n   * Generate implementation report\n   */\n  private async generateReport(todos: Map<string, TodoItem>, todoFile: string): Promise<void> {\n    const reportPath = todoFile.replace('.md', '-report.md');\n    const completed = Array.from(todos.values()).filter(t => t.completed);\n    const pending = Array.from(todos.values()).filter(t => !t.completed);\n\n    const report = `# TODO Implementation Report\n\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- Total Tasks: ${todos.size}\n- Completed: ${completed.length}\n- Pending: ${pending.length}\n- Completion Rate: ${((completed.length / todos.size) * 100).toFixed(1)}%\n\n## Completed Tasks\n${completed.map(t => `- [x] ${t.id}: ${t.text}`).join('\\n')}\n\n## Pending Tasks\n${pending.map(t => `- [ ] ${t.id}: ${t.text}`).join('\\n')}\n\n## Time Estimates\n- Completed: ${this.calculateTimeEstimate(completed)} minutes\n- Remaining: ${this.calculateTimeEstimate(pending)} minutes\n`;\n\n    await writeFile(reportPath, report);\n    console.log(chalk.green(`\\n✅ Report generated: ${reportPath}`));\n  }\n\n  /**\n   * Calculate time estimate based on task sizes\n   */\n  private calculateTimeEstimate(todos: TodoItem[]): number {\n    const sizeMultipliers = { S: 1, M: 1.4, L: 4, XL: 8 };\n    return todos.reduce((total, todo) => total + sizeMultipliers[todo.size], 0);\n  }\n}\n\n// Export singleton instance\nexport const todoProcessor = new TodoProcessor();\n","usedDeprecatedRules":[{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]}]}]
