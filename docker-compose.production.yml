version: '3.8'

services:
  mcp-kanban:
    build:
      context: .
      target: production
      args:
        NODE_ENV: production
    image: mcp-kanban:production
    container_name: mcp-kanban
    restart: unless-stopped
    ports:
      - '3000:3000'
      - '3001:3001' # WebSocket port
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WEBSOCKET_PORT=3001
      - DATABASE_PATH=/app/data/kanban.db
      - LOG_LEVEL=info
      - API_KEY_HASH=${API_KEY_HASH}
      - BACKUP_DIR=/app/backups
      - MAX_BACKUP_SIZE=${MAX_BACKUP_SIZE:-1073741824} # 1GB default
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    env_file:
      - .env.production
    networks:
      - mcp-kanban-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: mcp-kanban-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - mcp-kanban
    networks:
      - mcp-kanban-network
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage (optional)
  redis:
    image: redis:alpine
    container_name: mcp-kanban-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - mcp-kanban-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-kanban-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-kanban-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-kanban-grafana
    restart: unless-stopped
    ports:
      - '3002:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - mcp-kanban-network

  # Backup service (runs periodically)
  backup-service:
    build:
      context: .
      target: production
    image: mcp-kanban:production
    container_name: mcp-kanban-backup
    restart: 'no'
    volumes:
      - ./data:/app/data
      - ./backups:/app/backups
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - DATABASE_PATH=/app/data/kanban.db
      - BACKUP_DIR=/app/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    env_file:
      - .env.production
    networks:
      - mcp-kanban-network
    command: ['node', 'scripts/backup.js']
    profiles:
      - backup

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcp-kanban-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
