name: Cross-Platform Installation Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'install.sh'
      - 'install.ps1'
      - 'install.js'
      - 'verify-install.js'
      - 'claude.sh'
      - 'cursor.sh'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [main]
    paths:
      - 'install.sh'
      - 'install.ps1'
      - 'install.js'
      - 'verify-install.js'
      - 'claude.sh'
      - 'cursor.sh'
      - 'package.json'
      - 'package-lock.json'

jobs:
  test-installation:
    name: Test Installation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Test installation script (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Testing installation on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}"
          chmod +x install.sh claude.sh cursor.sh
          ./install.sh --help
          ./verify-install.js --help

      - name: Test installation script (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "Testing installation on Windows with Node.js ${{ matrix.node-version }}"
          node install.js --help
          node verify-install.js --help

      - name: Test build process
        run: |
          npm run build
          npm run typecheck --silent || echo "TypeScript check completed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installation-test-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            logs/
            dist/
          retention-days: 7

  test-docker:
    name: Test Docker Installation
    runs-on: ubuntu-latest
    needs: test-installation

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.mcp -t mcp-kanban:test .

      - name: Test Docker container
        run: |
          docker run --rm mcp-kanban:test node --version
          docker run --rm mcp-kanban:test node dist/mcp/server.js --help || echo "MCP server help test completed"

  test-devcontainer:
    name: Test DevContainer Configuration
    runs-on: ubuntu-latest
    needs: test-installation

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Test devcontainer configuration
        run: |
          cat .devcontainer/devcontainer.json | jq .
          cat .devcontainer/devcontainer.json | jq -e '.name'
          cat .devcontainer/devcontainer.json | jq -e '.image'
          cat .devcontainer/devcontainer.json | jq -e '.postCreateCommand'

  test-replit:
    name: Test Replit Configuration
    runs-on: ubuntu-latest
    needs: test-installation

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Test Replit configuration
        run: |
          test -f .replit
          grep -q "run = " .replit
          grep -q "language = " .replit
