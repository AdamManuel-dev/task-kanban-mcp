openapi: 3.0.3
info:
  title: MCP Kanban REST API
  description: |
    Comprehensive REST API for the MCP Kanban Task Management System.
    
    This API provides full CRUD operations for boards, tasks, notes, tags, and more.
    It supports real-time updates via WebSocket, AI-powered context generation,
    and advanced task management features.
    
    ## Features
    - **Task Management**: Create, update, delete, and organize tasks
    - **Subtask Support**: Hierarchical task organization with progress tracking
    - **Task Dependencies**: Dependency management with cycle detection
    - **Task Templates**: Predefined templates for common task types
    - **Board Management**: Multi-board support with customizable columns
    - **Real-time Updates**: WebSocket integration for live collaboration
    - **AI Integration**: Context-aware task prioritization and suggestions
    - **Analytics & Reporting**: Completion analytics and velocity tracking
    - **Performance Monitoring**: System health and performance dashboards
    - **Backup & Recovery**: Comprehensive data backup and restoration
    - **Advanced Search**: Full-text search across tasks and notes
    - **Tag System**: Hierarchical tagging with automatic categorization
    - **Git Integration**: Branch-based board mapping and context awareness
    
    ## Authentication
    All API requests require authentication using API keys.
    
    ## Rate Limiting
    API requests are rate-limited to 1000 requests per minute per API key.
    
    ## WebSocket Support
    For real-time updates, connect to the WebSocket endpoint at `ws://localhost:3456`.
    
    ## MCP Integration
    This API is designed to work seamlessly with the Model Context Protocol (MCP)
    for AI assistant integration.
  version: 1.0.0
  contact:
    name: MCP Kanban API Support
    url: https://github.com/yourusername/mcp-kanban
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.mcp-kanban.com/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: Health Check
      description: Basic health check endpoint
      tags: [Health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/detailed:
    get:
      summary: Detailed Health Check
      description: Comprehensive health check including database and dependencies
      tags: [Health]
      responses:
        '200':
          description: Detailed health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '503':
          description: Service has issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ready:
    get:
      summary: Readiness Check
      description: Check if the service is ready to accept requests
      tags: [Health]
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadyResponse'
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /live:
    get:
      summary: Liveness Check
      description: Check if the service is alive and responding
      tags: [Health]
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveResponse'
        '503':
          description: Service is not responding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /boards:
    get:
      summary: List Boards
      description: Retrieve a list of boards with optional filtering and pagination
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: name
          in: query
          description: Filter boards by name (partial match)
          schema:
            type: string
        - name: status
          in: query
          description: Filter boards by status
          schema:
            type: string
            enum: [active, archived]
      responses:
        '200':
          description: List of boards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create Board
      description: Create a new board with specified columns and settings
      tags: [Boards]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardRequest'
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}:
    get:
      summary: Get Board
      description: Retrieve a specific board with its tasks and columns
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
        - name: includeTasks
          in: query
          description: Include tasks in the response
          schema:
            type: boolean
            default: true
        - name: includeArchived
          in: query
          description: Include archived tasks
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Board details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    patch:
      summary: Update Board
      description: Update board properties and settings
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBoardRequest'
      responses:
        '200':
          description: Board updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      summary: Delete Board
      description: Delete a board and optionally its tasks
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
        - name: cascade
          in: query
          description: Delete all tasks in the board
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Board deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/columns:
    get:
      summary: List Board Columns
      description: Get all columns for a specific board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      responses:
        '200':
          description: List of columns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnListResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create Board Column
      description: Add a new column to a board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateColumnRequest'
      responses:
        '201':
          description: Column created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/columns/{columnId}:
    patch:
      summary: Update Board Column
      description: Update column properties
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
        - $ref: '#/components/parameters/ColumnIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateColumnRequest'
      responses:
        '200':
          description: Column updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      summary: Delete Board Column
      description: Remove a column from a board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
        - $ref: '#/components/parameters/ColumnIdParam'
        - name: moveTasksTo
          in: query
          description: Column ID to move tasks to
          schema:
            type: string
      responses:
        '204':
          description: Column deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/stats:
    get:
      summary: Get Board Statistics
      description: Retrieve comprehensive statistics for a board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
        - name: period
          in: query
          description: Time period for statistics
          schema:
            type: string
            enum: [day, week, month, quarter, year]
            default: month
      responses:
        '200':
          description: Board statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardStatsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/clone:
    post:
      summary: Clone Board
      description: Create a copy of an existing board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneBoardRequest'
      responses:
        '201':
          description: Board cloned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/archive:
    post:
      summary: Archive Board
      description: Archive a board and optionally its tasks
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveBoardRequest'
      responses:
        '200':
          description: Board archived successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /boards/{boardId}/unarchive:
    post:
      summary: Unarchive Board
      description: Restore an archived board
      tags: [Boards]
      parameters:
        - $ref: '#/components/parameters/BoardIdParam'
      responses:
        '200':
          description: Board unarchived successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key in Bearer format (e.g., "Bearer your-api-key")

  parameters:
    LimitParam:
      name: limit
      in: query
      description: Number of items per page (max 100)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 50
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
        default: 0
    SortByParam:
      name: sortBy
      in: query
      description: Field to sort by
      schema:
        type: string
        enum: [created_at, updated_at, name, title, priority, due_date]
        default: created_at
    SortOrderParam:
      name: sortOrder
      in: query
      description: Sort order
      schema:
        type: string
        enum: [asc, desc]
        default: desc
    BoardIdParam:
      name: boardId
      in: path
      required: true
      description: Board identifier
      schema:
        type: string
        pattern: '^board-[a-zA-Z0-9-]+$'
    ColumnIdParam:
      name: columnId
      in: path
      required: true
      description: Column identifier
      schema:
        type: string
        pattern: '^col-[a-zA-Z0-9-]+$'
    TaskIdParam:
      name: taskId
      in: path
      required: true
      description: Task identifier
      schema:
        type: string
        pattern: '^task-[a-zA-Z0-9-]+$'
    NoteIdParam:
      name: noteId
      in: path
      required: true
      description: Note identifier
      schema:
        type: string
        pattern: '^note-[a-zA-Z0-9-]+$'
    TagIdParam:
      name: tagId
      in: path
      required: true
      description: Tag identifier
      schema:
        type: string
        pattern: '^tag-[a-zA-Z0-9-]+$'

  responses:
    BadRequest:
      description: Bad request - validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not found - resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict - resource already exists or constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimited:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Human-readable error message
            details:
              type: object
              description: Additional error context
            timestamp:
              type: string
              format: date-time
              description: Error timestamp
            requestId:
              type: string
              description: Request tracking ID
          required:
            - code
            - message
            - timestamp

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Service uptime in seconds
        version:
          type: string
          description: API version

    DetailedHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
        version:
          type: string
        checks:
          type: object
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                responseTime:
                  type: number
                  description: Database response time in milliseconds
            websocket:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                connections:
                  type: number
                  description: Active WebSocket connections
            memory:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                usage:
                  type: number
                  description: Memory usage percentage

    ReadyResponse:
      type: object
      properties:
        ready:
          type: boolean
        timestamp:
          type: string
          format: date-time
        checks:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
                enum: [ready, not_ready]

    LiveResponse:
      type: object
      properties:
        alive:
          type: boolean
        timestamp:
          type: string
          format: date-time
        pid:
          type: number
          description: Process ID

    Board:
      type: object
      properties:
        id:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        status:
          type: string
          enum: [active, archived]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        taskCount:
          type: integer
          minimum: 0
        columnCount:
          type: integer
          minimum: 0
      required:
        - id
        - name
        - status
        - createdAt
        - updatedAt

    CreateBoardRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        columns:
          type: array
          items:
            $ref: '#/components/schemas/CreateColumnRequest'
          minItems: 1
          maxItems: 10
      required:
        - name

    UpdateBoardRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        status:
          type: string
          enum: [active, archived]

    BoardResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Board'

    BoardListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Board'
        pagination:
          $ref: '#/components/schemas/Pagination'

    BoardDetailResponse:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Board'
            - type: object
              properties:
                columns:
                  type: array
                  items:
                    $ref: '#/components/schemas/Column'
                tasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'

    Column:
      type: object
      properties:
        id:
          type: string
          pattern: '^col-[a-zA-Z0-9-]+$'
        boardId:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        position:
          type: integer
          minimum: 0
        taskCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - boardId
        - name
        - position
        - createdAt
        - updatedAt

    CreateColumnRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        position:
          type: integer
          minimum: 0
      required:
        - name

    UpdateColumnRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        position:
          type: integer
          minimum: 0

    ColumnResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Column'

    ColumnListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Column'

    CloneBoardRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        includeTasks:
          type: boolean
          default: false
        includeNotes:
          type: boolean
          default: false
        includeTags:
          type: boolean
          default: false
      required:
        - name

    ArchiveBoardRequest:
      type: object
      properties:
        archiveTasks:
          type: boolean
          default: true
        reason:
          type: string
          maxLength: 500

    BoardStatsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            totalTasks:
              type: integer
              minimum: 0
            completedTasks:
              type: integer
              minimum: 0
            inProgressTasks:
              type: integer
              minimum: 0
            blockedTasks:
              type: integer
              minimum: 0
            overdueTasks:
              type: integer
              minimum: 0
            averageCompletionTime:
              type: number
              description: Average time to complete tasks in hours
            taskVelocity:
              type: number
              description: Tasks completed per day
            columnDistribution:
              type: object
              additionalProperties:
                type: integer
            priorityDistribution:
              type: object
              additionalProperties:
                type: integer
            recentActivity:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  description:
                    type: string

    Pagination:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        hasMore:
          type: boolean
      required:
        - limit
        - offset
        - total
        - hasMore 

    Task:
      type: object
      properties:
        id:
          type: string
          pattern: '^task-[a-zA-Z0-9-]+$'
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 5000
        boardId:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
        columnId:
          type: string
          pattern: '^col-[a-zA-Z0-9-]+$'
        status:
          type: string
          enum: [todo, in_progress, done, blocked, archived]
        priority:
          type: integer
          minimum: 1
          maximum: 5
        assignee:
          type: string
          maxLength: 100
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
        actualHours:
          type: number
          minimum: 0
        position:
          type: integer
          minimum: 0
        parentTaskId:
          type: string
          pattern: '^task-[a-zA-Z0-9-]+$'
        tags:
          type: array
          items:
            type: string
            pattern: '^tag-[a-zA-Z0-9-]+$'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        subtaskCount:
          type: integer
          minimum: 0
        dependencyCount:
          type: integer
          minimum: 0
      required:
        - id
        - title
        - boardId
        - columnId
        - status
        - priority
        - position
        - createdAt
        - updatedAt

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 5000
        boardId:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
        columnId:
          type: string
          pattern: '^col-[a-zA-Z0-9-]+$'
        status:
          type: string
          enum: [todo, in_progress, done, blocked, archived]
          default: todo
        priority:
          type: integer
          minimum: 1
          maximum: 5
          default: 3
        assignee:
          type: string
          maxLength: 100
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
        parentTaskId:
          type: string
          pattern: '^task-[a-zA-Z0-9-]+$'
        tags:
          type: array
          items:
            type: string
            pattern: '^tag-[a-zA-Z0-9-]+$'
      required:
        - title
        - boardId

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 5000
        columnId:
          type: string
          pattern: '^col-[a-zA-Z0-9-]+$'
        status:
          type: string
          enum: [todo, in_progress, done, blocked, archived]
        priority:
          type: integer
          minimum: 1
          maximum: 5
        assignee:
          type: string
          maxLength: 100
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0
        actualHours:
          type: number
          minimum: 0
        parentTaskId:
          type: string
          pattern: '^task-[a-zA-Z0-9-]+$'
        tags:
          type: array
          items:
            type: string
            pattern: '^tag-[a-zA-Z0-9-]+$'

    TaskResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Task'

    TaskListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        pagination:
          $ref: '#/components/schemas/Pagination'

    TaskDetailResponse:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Task'
            - type: object
              properties:
                subtasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
                dependencies:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
                notes:
                  type: array
                  items:
                    $ref: '#/components/schemas/Note'

    CreateSubtaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 5000
        priority:
          type: integer
          minimum: 1
          maximum: 5
          default: 3
        estimatedHours:
          type: number
          minimum: 0
      required:
        - title

    MoveTaskRequest:
      type: object
      properties:
        columnId:
          type: string
          pattern: '^col-[a-zA-Z0-9-]+$'
        position:
          type: integer
          minimum: 0
        boardId:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
      required:
        - columnId

    UpdatePriorityRequest:
      type: object
      properties:
        priority:
          type: integer
          minimum: 1
          maximum: 5
        reason:
          type: string
          maxLength: 500
      required:
        - priority

    DependencyResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            dependencies:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            dependents:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            circularDependencies:
              type: array
              items:
                type: string
                pattern: '^task-[a-zA-Z0-9-]+$'

    UpdateDependenciesRequest:
      type: object
      properties:
        dependencies:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'
        dependents:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'

    BulkTaskRequest:
      type: object
      properties:
        operation:
          type: string
          enum: [update, delete, move, archive, unarchive]
        taskIds:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'
          minItems: 1
        data:
          type: object
          description: Data for the operation
      required:
        - operation
        - taskIds

    BulkTaskResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: array
              items:
                type: string
                pattern: '^task-[a-zA-Z0-9-]+$'
            failed:
              type: array
              items:
                type: object
                properties:
                  taskId:
                    type: string
                  error:
                    type: string
            total:
              type: integer
              minimum: 0
            successCount:
              type: integer
              minimum: 0
            failureCount:
              type: integer
              minimum: 0

    TaskSearchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        pagination:
          $ref: '#/components/schemas/Pagination'
        search:
          type: object
          properties:
            query:
              type: string
            filters:
              type: object
            totalResults:
              type: integer
              minimum: 0
            searchTime:
              type: number
              description: Search time in milliseconds

    Note:
      type: object
      properties:
        id:
          type: string
          pattern: '^note-[a-zA-Z0-9-]+$'
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          maxLength: 10000
        category:
          type: string
          maxLength: 100
        pinned:
          type: boolean
          default: false
        linkedTasks:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - content
        - createdAt
        - updatedAt

    CreateNoteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          maxLength: 10000
        category:
          type: string
          maxLength: 100
        pinned:
          type: boolean
          default: false
        linkedTasks:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'
      required:
        - title
        - content

    UpdateNoteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          maxLength: 10000
        category:
          type: string
          maxLength: 100
        pinned:
          type: boolean
        linkedTasks:
          type: array
          items:
            type: string
            pattern: '^task-[a-zA-Z0-9-]+$'

    NoteResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Note'

    NoteListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        pagination:
          $ref: '#/components/schemas/Pagination'

    NoteSearchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        pagination:
          $ref: '#/components/schemas/Pagination'
        search:
          type: object
          properties:
            query:
              type: string
            filters:
              type: object
            totalResults:
              type: integer
              minimum: 0
            searchTime:
              type: number

    Tag:
      type: object
      properties:
        id:
          type: string
          pattern: '^tag-[a-zA-Z0-9-]+$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        parentId:
          type: string
          pattern: '^tag-[a-zA-Z0-9-]+$'
        taskCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - color
        - createdAt
        - updatedAt

    CreateTagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          default: '#3B82F6'
        parentId:
          type: string
          pattern: '^tag-[a-zA-Z0-9-]+$'
      required:
        - name

    UpdateTagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        parentId:
          type: string
          pattern: '^tag-[a-zA-Z0-9-]+$'

    TagResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Tag'

    TagListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        pagination:
          $ref: '#/components/schemas/Pagination'

    TagDetailResponse:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Tag'
            - type: object
              properties:
                tasks:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
                children:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'

    TagSearchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        pagination:
          $ref: '#/components/schemas/Pagination'
        search:
          type: object
          properties:
            query:
              type: string
            totalResults:
              type: integer
              minimum: 0

    AddTagsRequest:
      type: object
      properties:
        tagIds:
          type: array
          items:
            type: string
            pattern: '^tag-[a-zA-Z0-9-]+$'
          minItems: 1
      required:
        - tagIds

    BulkTagRequest:
      type: object
      properties:
        operation:
          type: string
          enum: [merge, delete, move]
        tagIds:
          type: array
          items:
            type: string
            pattern: '^tag-[a-zA-Z0-9-]+$'
          minItems: 1
        data:
          type: object
          description: Data for the operation
      required:
        - operation
        - tagIds

    BulkTagResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: array
              items:
                type: string
                pattern: '^tag-[a-zA-Z0-9-]+$'
            failed:
              type: array
              items:
                type: object
                properties:
                  tagId:
                    type: string
                  error:
                    type: string
            total:
              type: integer
              minimum: 0
            successCount:
              type: integer
              minimum: 0
            failureCount:
              type: integer
              minimum: 0

    ContextResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            currentBoard:
              $ref: '#/components/schemas/Board'
            recentTasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            recentNotes:
              type: array
              items:
                $ref: '#/components/schemas/Note'
            activeTags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            nextTasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            blockedTasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            contextSummary:
              type: string
              maxLength: 1000

    TaskContextResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            task:
              $ref: '#/components/schemas/Task'
            dependencies:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            dependents:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            relatedTasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            notes:
              type: array
              items:
                $ref: '#/components/schemas/Note'
            contextInsights:
              type: object
              properties:
                complexity:
                  type: string
                  enum: [low, medium, high]
                estimatedTime:
                  type: number
                  description: Estimated time in hours
                blockers:
                  type: array
                  items:
                    type: string
                recommendations:
                  type: array
                  items:
                    type: string

    ProjectSummaryResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            overview:
              type: object
              properties:
                totalTasks:
                  type: integer
                  minimum: 0
                completedTasks:
                  type: integer
                  minimum: 0
                inProgressTasks:
                  type: integer
                  minimum: 0
                blockedTasks:
                  type: integer
                  minimum: 0
                completionRate:
                  type: number
                  minimum: 0
                  maximum: 100
            trends:
              type: object
              properties:
                tasksCreated:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                      count:
                        type: integer
                        minimum: 0
                tasksCompleted:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                      count:
                        type: integer
                        minimum: 0
            insights:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  priority:
                    type: string
                    enum: [low, medium, high]

    PriorityListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/Task'
              - type: object
                properties:
                  priorityScore:
                    type: number
                    description: AI-calculated priority score
                  reasoning:
                    type: string
                    description: Explanation for priority
        pagination:
          $ref: '#/components/schemas/Pagination'

    CalculatePrioritiesRequest:
      type: object
      properties:
        boardId:
          type: string
          pattern: '^board-[a-zA-Z0-9-]+$'
        algorithm:
          type: string
          enum: [ai, simple, dependency]
          default: ai
        factors:
          type: object
          properties:
            dueDateWeight:
              type: number
              minimum: 0
              maximum: 1
            priorityWeight:
              type: number
              minimum: 0
              maximum: 1
            dependencyWeight:
              type: number
              minimum: 0
              maximum: 1
            complexityWeight:
              type: number
              minimum: 0
              maximum: 1

    CalculatePrioritiesResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            tasksUpdated:
              type: integer
              minimum: 0
            algorithm:
              type: string
            factors:
              type: object
            processingTime:
              type: number
              description: Processing time in milliseconds

    NextTaskResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            task:
              $ref: '#/components/schemas/Task'
            reasoning:
              type: string
              description: Explanation for selection
            alternatives:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            context:
              type: object
              properties:
                currentFocus:
                  type: string
                recommendations:
                  type: array
                  items:
                    type: string

    Backup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 255
        type:
          type: string
          enum: [full, incremental]
        status:
          type: string
          enum: [completed, failed, in_progress]
        size:
          type: integer
          minimum: 0
          description: Size in bytes
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        metadata:
          type: object
          properties:
            taskCount:
              type: integer
              minimum: 0
            boardCount:
              type: integer
              minimum: 0
            noteCount:
              type: integer
              minimum: 0
            tagCount:
              type: integer
              minimum: 0
      required:
        - id
        - name
        - type
        - status
        - createdAt

    CreateBackupRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        type:
          type: string
          enum: [full, incremental]
          default: full
        description:
          type: string
          maxLength: 500
        includeMetadata:
          type: boolean
          default: true
        compression:
          type: boolean
          default: true

    BackupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Backup'

    BackupListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Backup'
        pagination:
          $ref: '#/components/schemas/Pagination'

    BackupDetailResponse:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Backup'
            - type: object
              properties:
                filePath:
                  type: string
                checksum:
                  type: string
                error:
                  type: string

    RestoreBackupRequest:
      type: object
      properties:
        validateOnly:
          type: boolean
          default: false
        overwrite:
          type: boolean
          default: false
        restoreMetadata:
          type: boolean
          default: true

    RestoreBackupResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
            restoredItems:
              type: object
              properties:
                tasks:
                  type: integer
                  minimum: 0
                boards:
                  type: integer
                  minimum: 0
                notes:
                  type: integer
                  minimum: 0
                tags:
                  type: integer
                  minimum: 0
            processingTime:
              type: number
              description: Processing time in milliseconds

    VerifyBackupResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            valid:
              type: boolean
            checksum:
              type: string
            size:
              type: integer
              minimum: 0
            metadata:
              type: object
            errors:
              type: array
              items:
                type: string

    Schedule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 255
        cronExpression:
          type: string
          description: Cron expression for scheduling
        type:
          type: string
          enum: [full, incremental]
        status:
          type: string
          enum: [active, paused, disabled]
        retentionDays:
          type: integer
          minimum: 1
        lastRun:
          type: string
          format: date-time
        nextRun:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - cronExpression
        - type
        - status
        - retentionDays
        - createdAt
        - updatedAt

    CreateScheduleRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        cronExpression:
          type: string
          description: Cron expression (e.g., "0 2 * * *" for daily at 2 AM)
        type:
          type: string
          enum: [full, incremental]
          default: full
        retentionDays:
          type: integer
          minimum: 1
          default: 30
        enabled:
          type: boolean
          default: true
      required:
        - name
        - cronExpression

    UpdateScheduleRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        cronExpression:
          type: string
        type:
          type: string
          enum: [full, incremental]
        status:
          type: string
          enum: [active, paused, disabled]
        retentionDays:
          type: integer
          minimum: 1

    ScheduleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Schedule'

    ScheduleListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        pagination:
          $ref: '#/components/schemas/Pagination'

    ScheduleDetailResponse:
      type: object
      properties:
        data:
          type: object
          allOf:
            - $ref: '#/components/schemas/Schedule'
            - type: object
              properties:
                backups:
                  type: array
                  items:
                    $ref: '#/components/schemas/Backup'
                statistics:
                  type: object
                  properties:
                    totalRuns:
                      type: integer
                      minimum: 0
                    successfulRuns:
                      type: integer
                      minimum: 0
                    failedRuns:
                      type: integer
                      minimum: 0
                    averageDuration:
                      type: number
                      description: Average duration in seconds

    ImportResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
            importedItems:
              type: object
              properties:
                tasks:
                  type: integer
                  minimum: 0
                boards:
                  type: integer
                  minimum: 0
                notes:
                  type: integer
                  minimum: 0
                tags:
                  type: integer
                  minimum: 0
            errors:
              type: array
              items:
                type: object
                properties:
                  row:
                    type: integer
                  field:
                    type: string
                  message:
                    type: string
            processingTime:
              type: number
              description: Processing time in milliseconds 

  # NEW ENDPOINTS - Subtasks, Dependencies, Templates, Analytics, Performance

  /tasks/{taskId}/subtasks:
    get:
      summary: Get subtasks for a task
      tags: [Tasks]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of subtasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
    post:
      summary: Create a subtask
      tags: [Tasks]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                priority:
                  type: integer
                assignee:
                  type: string
                due_date:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Subtask created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Task'

  /tasks/{taskId}/dependencies:
    get:
      summary: Get task dependencies
      tags: [Tasks]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task dependencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      dependsOn:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      dependents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
    post:
      summary: Add task dependency
      tags: [Tasks]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dependsOnTaskId:
                  type: string
                dependencyType:
                  type: string
                  enum: [blocks, relates_to, duplicates]
      responses:
        '201':
          description: Dependency added
        '400':
          description: Circular dependency detected

  /templates:
    get:
      summary: Get task templates
      tags: [Templates]
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [bug, feature, meeting, maintenance, research, review, custom]
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskTemplate'
    post:
      summary: Create task template
      tags: [Templates]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskTemplateCreate'
      responses:
        '201':
          description: Template created

  /templates/{templateId}:
    get:
      summary: Get task template
      tags: [Templates]
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task template details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/TaskTemplate'

  /analytics/completion:
    get:
      summary: Get task completion analytics
      tags: [Analytics]
      parameters:
        - name: boardId
          in: query
          schema:
            type: string
        - name: timeframe
          in: query
          schema:
            type: integer
            description: Timeframe in days
      responses:
        '200':
          description: Completion analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/CompletionAnalytics'

  /analytics/velocity:
    get:
      summary: Get velocity metrics
      tags: [Analytics]
      parameters:
        - name: boardId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Velocity metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/VelocityMetrics'

  /analytics/dashboard:
    get:
      summary: Get analytics dashboard
      tags: [Analytics]
      parameters:
        - name: boardId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Analytics dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/AnalyticsDashboard'

  /performance/health:
    get:
      summary: Get system health metrics
      tags: [Performance]
      responses:
        '200':
          description: System health metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/SystemHealth'

  /performance/dashboard:
    get:
      summary: Get performance dashboard
      tags: [Performance]
      responses:
        '200':
          description: Performance dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/PerformanceDashboard'

  /performance/metrics/endpoint:
    get:
      summary: Get endpoint-specific metrics
      tags: [Performance]
      parameters:
        - name: endpoint
          in: query
          required: true
          schema:
            type: string
        - name: timeframe
          in: query
          schema:
            type: integer
            description: Timeframe in milliseconds
      responses:
        '200':
          description: Endpoint metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/EndpointMetrics'

  /performance/alerts:
    get:
      summary: Get alert rules
      tags: [Performance]
      responses:
        '200':
          description: List of alert rules
    post:
      summary: Create alert rule
      tags: [Performance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertRule'
      responses:
        '201':
          description: Alert rule created

  /performance/alerts/{ruleId}:
    delete:
      summary: Delete alert rule
      tags: [Performance]
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert rule deleted

components:
  schemas:
    TaskTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [bug, feature, meeting, maintenance, research, review, custom]
        title_template:
          type: string
        description_template:
          type: string
        priority:
          type: integer
        estimated_hours:
          type: number
        default_tags:
          type: array
          items:
            type: string
        is_system:
          type: boolean
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskTemplateCreate:
      type: object
      required: [name, title_template, category]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [bug, feature, meeting, maintenance, research, review, custom]
        title_template:
          type: string
        description_template:
          type: string
        priority:
          type: integer
        estimated_hours:
          type: number
        default_tags:
          type: array
          items:
            type: string

    CompletionAnalytics:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        completionRate:
          type: number
        averageCompletionTime:
          type: number
        completionsByStatus:
          type: object
        completionsByPriority:
          type: object
        completionsByTimeframe:
          type: object
          properties:
            today:
              type: integer
            thisWeek:
              type: integer
            thisMonth:
              type: integer
            lastMonth:
              type: integer
        topPerformers:
          type: array
          items:
            type: object
            properties:
              assignee:
                type: string
              completedTasks:
                type: integer
              averageTime:
                type: number
        trends:
          type: object
          properties:
            dailyCompletions:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                  count:
                    type: integer

    VelocityMetrics:
      type: object
      properties:
        currentSprint:
          type: object
          properties:
            plannedPoints:
              type: number
            completedPoints:
              type: number
            remainingPoints:
              type: number
            velocityRate:
              type: number
        historicalVelocity:
          type: object
          properties:
            last7Days:
              type: number
            last14Days:
              type: number
            last30Days:
              type: number
            average:
              type: number
            trend:
              type: string
              enum: [increasing, decreasing, stable]

    AnalyticsDashboard:
      type: object
      properties:
        completion:
          $ref: '#/components/schemas/CompletionAnalytics'
        velocity:
          $ref: '#/components/schemas/VelocityMetrics'
        productivity:
          type: object
        summary:
          type: object
          properties:
            keyMetrics:
              type: object
            alerts:
              type: array
              items:
                type: string
            achievements:
              type: array
              items:
                type: string

    SystemHealth:
      type: object
      properties:
        uptime:
          type: number
        memoryUsage:
          type: object
        cpuUsage:
          type: object
        requestsPerMinute:
          type: number
        errorRate:
          type: number
        averageResponseTime:
          type: number
        databaseHealth:
          type: object
        websocketConnections:
          type: number

    PerformanceDashboard:
      type: object
      properties:
        overview:
          type: object
          properties:
            totalRequests:
              type: integer
            averageResponseTime:
              type: number
            errorRate:
              type: number
            uptime:
              type: number
            healthScore:
              type: number
              minimum: 0
              maximum: 100
        realtime:
          type: object
          properties:
            requestsPerSecond:
              type: number
            activeUsers:
              type: integer
            memoryUsage:
              type: number
            cpuUsage:
              type: number
        topEndpoints:
          type: array
          items:
            type: object
            properties:
              endpoint:
                type: string
              requests:
                type: integer
              averageTime:
                type: number
              errorRate:
                type: number
        alerts:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [warning, error, critical]
              message:
                type: string
              timestamp:
                type: integer

    EndpointMetrics:
      type: object
      properties:
        endpoint:
          type: string
        timeframe:
          type: integer
        statistics:
          type: object
          properties:
            totalRequests:
              type: integer
            averageResponseTime:
              type: number
            errorRate:
              type: number
            maxResponseTime:
              type: number
            minResponseTime:
              type: number
            p95ResponseTime:
              type: number
            p99ResponseTime:
              type: number

    AlertRule:
      type: object
      required: [id, name, condition, severity, action, enabled]
      properties:
        id:
          type: string
        name:
          type: string
        condition:
          type: object
          properties:
            metric:
              type: string
              enum: [responseTime, errorRate, memoryUsage, dbQueryTime]
            operator:
              type: string
              enum: ['>', '<', '=', '>=', '<=']
            threshold:
              type: number
            duration:
              type: number
        severity:
          type: string
          enum: [warning, error, critical]
        action:
          type: string
          enum: [log, email, webhook]
        enabled:
          type: boolean 